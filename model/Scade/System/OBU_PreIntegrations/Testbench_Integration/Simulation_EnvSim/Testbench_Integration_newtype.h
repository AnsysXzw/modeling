#ifndef TESTBENCH_INTEGRATION_TYPES_CONVERSION
#define TESTBENCH_INTEGRATION_TYPES_CONVERSION

#include "NewSmuTypes.h"

/****************************************************************
 ** _41_SSM_ST_SM1 
 ****************************************************************/
extern int _41_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__41_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__41_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__41_SSM_ST_SM1_allow_double_conversion();
extern int _41_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__41_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__41_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__41_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__41_SSM_ST_SM1_Utils;

/****************************************************************
 ** _43_SSM_TR_SM1 
 ****************************************************************/
extern int _43_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__43_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__43_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__43_SSM_TR_SM1_allow_double_conversion();
extern int _43_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__43_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__43_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__43_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__43_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_SM3_SM1_Awakness_of_Train 
 ****************************************************************/
extern int SSM_ST_SM3_SM1_Awakness_of_Train_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM3_SM1_Awakness_of_Train_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM3_SM1_Awakness_of_Train(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM3_SM1_Awakness_of_Train_allow_double_conversion();
extern int SSM_ST_SM3_SM1_Awakness_of_Train_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM3_SM1_Awakness_of_Train_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM3_SM1_Awakness_of_Train(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM3_SM1_Awakness_of_Train_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM3_SM1_Awakness_of_Train_Utils;

/****************************************************************
 ** SSM_TR_SM3_SM1_Awakness_of_Train 
 ****************************************************************/
extern int SSM_TR_SM3_SM1_Awakness_of_Train_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM3_SM1_Awakness_of_Train_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM3_SM1_Awakness_of_Train(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM3_SM1_Awakness_of_Train_allow_double_conversion();
extern int SSM_TR_SM3_SM1_Awakness_of_Train_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM3_SM1_Awakness_of_Train_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM3_SM1_Awakness_of_Train(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM3_SM1_Awakness_of_Train_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM3_SM1_Awakness_of_Train_Utils;

/****************************************************************
 ** SSM_ST_GSM_R_MobileManagement 
 ****************************************************************/
extern int SSM_ST_GSM_R_MobileManagement_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_GSM_R_MobileManagement_string(const char *str, char **endptr);
extern int string_to_SSM_ST_GSM_R_MobileManagement(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_GSM_R_MobileManagement_allow_double_conversion();
extern int SSM_ST_GSM_R_MobileManagement_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_GSM_R_MobileManagement_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_GSM_R_MobileManagement(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_GSM_R_MobileManagement_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_GSM_R_MobileManagement_Utils;

/****************************************************************
 ** SSM_TR_GSM_R_MobileManagement 
 ****************************************************************/
extern int SSM_TR_GSM_R_MobileManagement_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_GSM_R_MobileManagement_string(const char *str, char **endptr);
extern int string_to_SSM_TR_GSM_R_MobileManagement(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_GSM_R_MobileManagement_allow_double_conversion();
extern int SSM_TR_GSM_R_MobileManagement_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_GSM_R_MobileManagement_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_GSM_R_MobileManagement(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_GSM_R_MobileManagement_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_GSM_R_MobileManagement_Utils;

/****************************************************************
 ** SSM_ST_SM1 
 ****************************************************************/
extern int SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM1_allow_double_conversion();
extern int SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM1_Utils;

/****************************************************************
 ** SSM_TR_SM1 
 ****************************************************************/
extern int SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM1_allow_double_conversion();
extern int SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM1_Utils;

/****************************************************************
 ** _45_SSM_ST_SM1 
 ****************************************************************/
extern int _45_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__45_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__45_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__45_SSM_ST_SM1_allow_double_conversion();
extern int _45_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__45_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__45_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__45_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__45_SSM_ST_SM1_Utils;

/****************************************************************
 ** _48_SSM_TR_SM1 
 ****************************************************************/
extern int _48_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__48_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__48_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__48_SSM_TR_SM1_allow_double_conversion();
extern int _48_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__48_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__48_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__48_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__48_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_ST_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Level_NTC_and_Mode_SN_allow_double_conversion();
extern int SSM_ST_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_Level_NTC_and_Mode_SN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_Level_NTC_and_Mode_SN_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** SSM_TR_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_TR_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Level_NTC_and_Mode_SN_allow_double_conversion();
extern int SSM_TR_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_Level_NTC_and_Mode_SN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_Level_NTC_and_Mode_SN_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** _37_SSM_ST_SM1 
 ****************************************************************/
extern int _37_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__37_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__37_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__37_SSM_ST_SM1_allow_double_conversion();
extern int _37_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__37_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__37_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__37_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__37_SSM_ST_SM1_Utils;

/****************************************************************
 ** _40_SSM_TR_SM1 
 ****************************************************************/
extern int _40_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__40_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__40_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__40_SSM_TR_SM1_allow_double_conversion();
extern int _40_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__40_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__40_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__40_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__40_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_ST_CONTROLLER_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CONTROLLER_SM_allow_double_conversion();
extern int SSM_ST_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_CONTROLLER_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_CONTROLLER_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_TR_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_TR_CONTROLLER_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CONTROLLER_SM_allow_double_conversion();
extern int SSM_TR_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_CONTROLLER_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_CONTROLLER_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED 
 ****************************************************************/
extern int SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_allow_double_conversion();
extern int SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_Utils;

/****************************************************************
 ** SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED 
 ****************************************************************/
extern int SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_allow_double_conversion();
extern int SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_Utils;

/****************************************************************
 ** SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC 
 ****************************************************************/
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_string(const char *str, char **endptr);
extern int string_to_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_allow_double_conversion();
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_Utils;

/****************************************************************
 ** SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC 
 ****************************************************************/
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_string(const char *str, char **endptr);
extern int string_to_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_allow_double_conversion();
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_Utils;

/****************************************************************
 ** SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M 
 ****************************************************************/
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_allow_double_conversion();
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_Utils;

/****************************************************************
 ** SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M 
 ****************************************************************/
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_allow_double_conversion();
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_Utils;

/****************************************************************
 ** SSM_ST_modeInterplay 
 ****************************************************************/
extern int SSM_ST_modeInterplay_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_modeInterplay_allow_double_conversion();
extern int SSM_ST_modeInterplay_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_modeInterplay_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_modeInterplay_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_modeInterplay 
 ****************************************************************/
extern int SSM_TR_modeInterplay_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_modeInterplay_allow_double_conversion();
extern int SSM_TR_modeInterplay_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_modeInterplay_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_modeInterplay_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_CSM_modeInterplay_CSM 
 ****************************************************************/
extern int SSM_ST_CSM_modeInterplay_CSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_CSM_modeInterplay_CSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CSM_modeInterplay_CSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CSM_modeInterplay_CSM_allow_double_conversion();
extern int SSM_ST_CSM_modeInterplay_CSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_CSM_modeInterplay_CSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_CSM_modeInterplay_CSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_CSM_modeInterplay_CSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_CSM_modeInterplay_CSM_Utils;

/****************************************************************
 ** SSM_TR_CSM_modeInterplay_CSM 
 ****************************************************************/
extern int SSM_TR_CSM_modeInterplay_CSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_CSM_modeInterplay_CSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CSM_modeInterplay_CSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CSM_modeInterplay_CSM_allow_double_conversion();
extern int SSM_TR_CSM_modeInterplay_CSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_CSM_modeInterplay_CSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_CSM_modeInterplay_CSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_CSM_modeInterplay_CSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_CSM_modeInterplay_CSM_Utils;

/****************************************************************
 ** SSM_ST_SM4_modeInterplay_TSM 
 ****************************************************************/
extern int SSM_ST_SM4_modeInterplay_TSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM4_modeInterplay_TSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM4_modeInterplay_TSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM4_modeInterplay_TSM_allow_double_conversion();
extern int SSM_ST_SM4_modeInterplay_TSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM4_modeInterplay_TSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM4_modeInterplay_TSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM4_modeInterplay_TSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM4_modeInterplay_TSM_Utils;

/****************************************************************
 ** SSM_TR_SM4_modeInterplay_TSM 
 ****************************************************************/
extern int SSM_TR_SM4_modeInterplay_TSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM4_modeInterplay_TSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM4_modeInterplay_TSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM4_modeInterplay_TSM_allow_double_conversion();
extern int SSM_TR_SM4_modeInterplay_TSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM4_modeInterplay_TSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM4_modeInterplay_TSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM4_modeInterplay_TSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM4_modeInterplay_TSM_Utils;

/****************************************************************
 ** SSM_ST_RSM_modeInterplay_RSM 
 ****************************************************************/
extern int SSM_ST_RSM_modeInterplay_RSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_RSM_modeInterplay_RSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_RSM_modeInterplay_RSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_RSM_modeInterplay_RSM_allow_double_conversion();
extern int SSM_ST_RSM_modeInterplay_RSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_RSM_modeInterplay_RSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_RSM_modeInterplay_RSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_RSM_modeInterplay_RSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_RSM_modeInterplay_RSM_Utils;

/****************************************************************
 ** SSM_TR_RSM_modeInterplay_RSM 
 ****************************************************************/
extern int SSM_TR_RSM_modeInterplay_RSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_RSM_modeInterplay_RSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_RSM_modeInterplay_RSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_RSM_modeInterplay_RSM_allow_double_conversion();
extern int SSM_TR_RSM_modeInterplay_RSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_RSM_modeInterplay_RSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_RSM_modeInterplay_RSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_RSM_modeInterplay_RSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_RSM_modeInterplay_RSM_Utils;

/****************************************************************
 ** SSM_ST_repeat_SM 
 ****************************************************************/
extern int SSM_ST_repeat_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_repeat_SM_allow_double_conversion();
extern int SSM_ST_repeat_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_repeat_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_repeat_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_repeat_SM_Utils;

/****************************************************************
 ** SSM_TR_repeat_SM 
 ****************************************************************/
extern int SSM_TR_repeat_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_repeat_SM_allow_double_conversion();
extern int SSM_TR_repeat_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_repeat_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_repeat_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_repeat_SM_Utils;

/****************************************************************
 ** SSM_ST_Register_SM 
 ****************************************************************/
extern int SSM_ST_Register_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Register_SM_allow_double_conversion();
extern int SSM_ST_Register_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_Register_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_Register_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_Register_SM_Utils;

/****************************************************************
 ** SSM_TR_Register_SM 
 ****************************************************************/
extern int SSM_TR_Register_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Register_SM_allow_double_conversion();
extern int SSM_TR_Register_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_Register_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_Register_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_Register_SM_Utils;

/****************************************************************
 ** SSM_ST_Session_SM 
 ****************************************************************/
extern int SSM_ST_Session_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Session_SM_allow_double_conversion();
extern int SSM_ST_Session_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_Session_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_Session_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_Session_SM_Utils;

/****************************************************************
 ** SSM_TR_Session_SM 
 ****************************************************************/
extern int SSM_TR_Session_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Session_SM_allow_double_conversion();
extern int SSM_TR_Session_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_Session_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_Session_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_Session_SM_Utils;

/****************************************************************
 ** SSM_ST_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TrainExitedFromRBCArea_SM_allow_double_conversion();
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_TrainExitedFromRBCArea_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_TrainExitedFromRBCArea_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_TR_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TrainExitedFromRBCArea_SM_allow_double_conversion();
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_TrainExitedFromRBCArea_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_TrainExitedFromRBCArea_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_ST_connectionStatus_SM 
 ****************************************************************/
extern int SSM_ST_connectionStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_connectionStatus_SM_allow_double_conversion();
extern int SSM_ST_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_connectionStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_connectionStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_connectionStatus_SM 
 ****************************************************************/
extern int SSM_TR_connectionStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_connectionStatus_SM_allow_double_conversion();
extern int SSM_TR_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_connectionStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_connectionStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_1_Session_SM_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_1_Session_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_handOver_with_1_Session_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_1_Session_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_1_Session_SM_IfBlock1_allow_double_conversion();
extern int SSM_ST_handOver_with_1_Session_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_handOver_with_1_Session_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_handOver_with_1_Session_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_handOver_with_1_Session_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_1_Session_SM_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_1_Session_SM_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_1_Session_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_handOver_with_1_Session_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_1_Session_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_1_Session_SM_IfBlock1_allow_double_conversion();
extern int SSM_TR_handOver_with_1_Session_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_handOver_with_1_Session_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_handOver_with_1_Session_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_handOver_with_1_Session_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_1_Session_SM_IfBlock1_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_2_Sessions_SM_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_allow_double_conversion();
extern int SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_2_Sessions_SM_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_allow_double_conversion();
extern int SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_Utils;

/****************************************************************
 ** _4_SSM_ST_SM1 
 ****************************************************************/
extern int _4_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__4_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__4_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__4_SSM_ST_SM1_allow_double_conversion();
extern int _4_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__4_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__4_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__4_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__4_SSM_ST_SM1_Utils;

/****************************************************************
 ** _6_SSM_TR_SM1 
 ****************************************************************/
extern int _6_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__6_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__6_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__6_SSM_TR_SM1_allow_double_conversion();
extern int _6_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__6_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__6_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__6_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__6_SSM_TR_SM1_Utils;

/****************************************************************
 ** _1_SSM_ST_SM1 
 ****************************************************************/
extern int _1_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__1_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__1_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__1_SSM_ST_SM1_allow_double_conversion();
extern int _1_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__1_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__1_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__1_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__1_SSM_ST_SM1_Utils;

/****************************************************************
 ** _3_SSM_TR_SM1 
 ****************************************************************/
extern int _3_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__3_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__3_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__3_SSM_TR_SM1_allow_double_conversion();
extern int _3_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__3_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__3_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__3_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__3_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_POSITION_REPORT_SM 
 ****************************************************************/
extern int SSM_ST_POSITION_REPORT_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_POSITION_REPORT_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_POSITION_REPORT_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_POSITION_REPORT_SM_allow_double_conversion();
extern int SSM_ST_POSITION_REPORT_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_POSITION_REPORT_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_POSITION_REPORT_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_POSITION_REPORT_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_POSITION_REPORT_SM_Utils;

/****************************************************************
 ** SSM_TR_POSITION_REPORT_SM 
 ****************************************************************/
extern int SSM_TR_POSITION_REPORT_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_POSITION_REPORT_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_POSITION_REPORT_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_POSITION_REPORT_SM_allow_double_conversion();
extern int SSM_TR_POSITION_REPORT_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_POSITION_REPORT_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_POSITION_REPORT_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_POSITION_REPORT_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_POSITION_REPORT_SM_Utils;

/****************************************************************
 ** SSM_ST_MOVEMENT_AUTHORITY_SM 
 ****************************************************************/
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_MOVEMENT_AUTHORITY_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_MOVEMENT_AUTHORITY_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_MOVEMENT_AUTHORITY_SM_allow_double_conversion();
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_MOVEMENT_AUTHORITY_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_MOVEMENT_AUTHORITY_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_MOVEMENT_AUTHORITY_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_MOVEMENT_AUTHORITY_SM_Utils;

/****************************************************************
 ** SSM_TR_MOVEMENT_AUTHORITY_SM 
 ****************************************************************/
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_MOVEMENT_AUTHORITY_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_MOVEMENT_AUTHORITY_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_MOVEMENT_AUTHORITY_SM_allow_double_conversion();
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_MOVEMENT_AUTHORITY_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_MOVEMENT_AUTHORITY_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_MOVEMENT_AUTHORITY_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_MOVEMENT_AUTHORITY_SM_Utils;

/****************************************************************
 ** SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM 
 ****************************************************************/
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_allow_double_conversion();
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM 
 ****************************************************************/
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_allow_double_conversion();
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_ST_GENERAL_MESSAGE_SM 
 ****************************************************************/
extern int SSM_ST_GENERAL_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_GENERAL_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_GENERAL_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_GENERAL_MESSAGE_SM_allow_double_conversion();
extern int SSM_ST_GENERAL_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_GENERAL_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_GENERAL_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_GENERAL_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_GENERAL_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_TR_GENERAL_MESSAGE_SM 
 ****************************************************************/
extern int SSM_TR_GENERAL_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_GENERAL_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_GENERAL_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_GENERAL_MESSAGE_SM_allow_double_conversion();
extern int SSM_TR_GENERAL_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_GENERAL_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_GENERAL_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_GENERAL_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_GENERAL_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_ST_TRIP_AND_POST_TRIP_SM 
 ****************************************************************/
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_TRIP_AND_POST_TRIP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TRIP_AND_POST_TRIP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TRIP_AND_POST_TRIP_SM_allow_double_conversion();
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_TRIP_AND_POST_TRIP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_TRIP_AND_POST_TRIP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_TRIP_AND_POST_TRIP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_TRIP_AND_POST_TRIP_SM_Utils;

/****************************************************************
 ** SSM_TR_TRIP_AND_POST_TRIP_SM 
 ****************************************************************/
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_TRIP_AND_POST_TRIP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TRIP_AND_POST_TRIP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TRIP_AND_POST_TRIP_SM_allow_double_conversion();
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_TRIP_AND_POST_TRIP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_TRIP_AND_POST_TRIP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_TRIP_AND_POST_TRIP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_TRIP_AND_POST_TRIP_SM_Utils;

/****************************************************************
 ** SSM_ST_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_ST_SM_StartOfMissionProcedure_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_StartOfMissionProcedure_allow_double_conversion();
extern int SSM_ST_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_StartOfMissionProcedure_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_StartOfMissionProcedure_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_TR_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_TR_SM_StartOfMissionProcedure_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_StartOfMissionProcedure_allow_double_conversion();
extern int SSM_TR_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_StartOfMissionProcedure_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_StartOfMissionProcedure_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On 
 ****************************************************************/
extern int SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_allow_double_conversion();
extern int SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_Utils;

/****************************************************************
 ** SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On 
 ****************************************************************/
extern int SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_allow_double_conversion();
extern int SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Trip 
 ****************************************************************/
extern int SSM_ST_SM_Train_Trip_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Trip_allow_double_conversion();
extern int SSM_ST_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Train_Trip_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Train_Trip_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Trip 
 ****************************************************************/
extern int SSM_TR_SM_Train_Trip_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Trip_allow_double_conversion();
extern int SSM_TR_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Train_Trip_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Train_Trip_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_ST_SM_Train_Reversing_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Reversing_allow_double_conversion();
extern int SSM_ST_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Train_Reversing_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Train_Reversing_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Reversing_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_TR_SM_Train_Reversing_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Reversing_allow_double_conversion();
extern int SSM_TR_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Train_Reversing_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Train_Reversing_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Reversing_Utils;

/****************************************************************
 ** _33_SSM_ST_SM1 
 ****************************************************************/
extern int _33_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__33_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__33_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__33_SSM_ST_SM1_allow_double_conversion();
extern int _33_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__33_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__33_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__33_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__33_SSM_ST_SM1_Utils;

/****************************************************************
 ** _35_SSM_TR_SM1 
 ****************************************************************/
extern int _35_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__35_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__35_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__35_SSM_TR_SM1_allow_double_conversion();
extern int _35_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__35_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__35_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__35_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__35_SSM_TR_SM1_Utils;

/****************************************************************
 ** _30_SSM_ST_SM1 
 ****************************************************************/
extern int _30_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__30_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__30_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__30_SSM_ST_SM1_allow_double_conversion();
extern int _30_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__30_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__30_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__30_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__30_SSM_ST_SM1_Utils;

/****************************************************************
 ** _32_SSM_TR_SM1 
 ****************************************************************/
extern int _32_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__32_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__32_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__32_SSM_TR_SM1_allow_double_conversion();
extern int _32_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__32_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__32_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__32_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__32_SSM_TR_SM1_Utils;

/****************************************************************
 ** _27_SSM_ST_SM1 
 ****************************************************************/
extern int _27_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__27_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__27_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__27_SSM_ST_SM1_allow_double_conversion();
extern int _27_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__27_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__27_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__27_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__27_SSM_ST_SM1_Utils;

/****************************************************************
 ** _29_SSM_TR_SM1 
 ****************************************************************/
extern int _29_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__29_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__29_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__29_SSM_TR_SM1_allow_double_conversion();
extern int _29_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__29_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__29_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__29_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__29_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_TimerStatus_SM 
 ****************************************************************/
extern int SSM_ST_TimerStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TimerStatus_SM_allow_double_conversion();
extern int SSM_ST_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_TimerStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_TimerStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_TimerStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_TimerStatus_SM 
 ****************************************************************/
extern int SSM_TR_TimerStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TimerStatus_SM_allow_double_conversion();
extern int SSM_TR_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_TimerStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_TimerStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_TimerStatus_SM_Utils;

/****************************************************************
 ** _11_SSM_ST_SM1 
 ****************************************************************/
extern int _11_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__11_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__11_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__11_SSM_ST_SM1_allow_double_conversion();
extern int _11_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__11_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__11_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__11_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__11_SSM_ST_SM1_Utils;

/****************************************************************
 ** _14_SSM_TR_SM1 
 ****************************************************************/
extern int _14_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__14_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__14_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__14_SSM_TR_SM1_allow_double_conversion();
extern int _14_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__14_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__14_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__14_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__14_SSM_TR_SM1_Utils;

/****************************************************************
 ** _7_SSM_ST_SM1 
 ****************************************************************/
extern int _7_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__7_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__7_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__7_SSM_ST_SM1_allow_double_conversion();
extern int _7_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__7_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__7_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__7_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__7_SSM_ST_SM1_Utils;

/****************************************************************
 ** _9_SSM_TR_SM1 
 ****************************************************************/
extern int _9_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__9_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__9_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__9_SSM_TR_SM1_allow_double_conversion();
extern int _9_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__9_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__9_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__9_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__9_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_ST_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_TR_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Mode_Profile_By_Trackside_allow_double_conversion();
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Mode_Profile_By_Trackside_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Mode_Profile_By_Trackside_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Mode_Profile_By_Trackside_allow_double_conversion();
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Mode_Profile_By_Trackside_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Mode_Profile_By_Trackside_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location 
 ****************************************************************/
extern int SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_allow_double_conversion();
extern int SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_Utils;

/****************************************************************
 ** SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location 
 ****************************************************************/
extern int SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_allow_double_conversion();
extern int SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_Utils;

/****************************************************************
 ** SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location 
 ****************************************************************/
extern int SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_allow_double_conversion();
extern int SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_Utils;

/****************************************************************
 ** SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location 
 ****************************************************************/
extern int SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_allow_double_conversion();
extern int SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_Utils;

/****************************************************************
 ** SSM_ST_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_ST_SM_Start_L1_L2_L3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Start_L1_L2_L3_allow_double_conversion();
extern int SSM_ST_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Start_L1_L2_L3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Start_L1_L2_L3_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** SSM_TR_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_TR_SM_Start_L1_L2_L3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Start_L1_L2_L3_allow_double_conversion();
extern int SSM_TR_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Start_L1_L2_L3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Start_L1_L2_L3_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** _22_SSM_ST_SM1 
 ****************************************************************/
extern int _22_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__22_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__22_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__22_SSM_ST_SM1_allow_double_conversion();
extern int _22_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__22_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__22_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__22_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__22_SSM_ST_SM1_Utils;

/****************************************************************
 ** _26_SSM_TR_SM1 
 ****************************************************************/
extern int _26_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__26_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__26_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__26_SSM_TR_SM1_allow_double_conversion();
extern int _26_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__26_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__26_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__26_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__26_SSM_TR_SM1_Utils;

/****************************************************************
 ** _16_SSM_ST_SM1 
 ****************************************************************/
extern int _16_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__16_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__16_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__16_SSM_ST_SM1_allow_double_conversion();
extern int _16_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__16_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__16_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__16_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__16_SSM_ST_SM1_Utils;

/****************************************************************
 ** _19_SSM_TR_SM1 
 ****************************************************************/
extern int _19_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__19_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__19_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__19_SSM_TR_SM1_allow_double_conversion();
extern int _19_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__19_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__19_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__19_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__19_SSM_TR_SM1_Utils;

/****************************************************************
 ** kcg_real 
 ****************************************************************/
extern int kcg_real_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_real_string(const char *str, char **endptr);
extern int string_to_kcg_real(const char *str, void *pValue, char **endptr);
extern int is_kcg_real_allow_double_conversion();
extern int kcg_real_to_double(const void *pValue, double *nValue);
extern int get_kcg_real_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_real(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_real_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_real_Utils;

/****************************************************************
 ** kcg_bool 
 ****************************************************************/
extern int kcg_bool_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_bool_string(const char *str, char **endptr);
extern int string_to_kcg_bool(const char *str, void *pValue, char **endptr);
extern int is_kcg_bool_allow_double_conversion();
extern int kcg_bool_to_double(const void *pValue, double *nValue);
extern int get_kcg_bool_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_bool(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_bool_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_bool_Utils;

/****************************************************************
 ** kcg_char 
 ****************************************************************/
extern int kcg_char_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_char_string(const char *str, char **endptr);
extern int string_to_kcg_char(const char *str, void *pValue, char **endptr);
extern int is_kcg_char_allow_double_conversion();
extern int kcg_char_to_double(const void *pValue, double *nValue);
extern int get_kcg_char_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_char(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_char_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_char_Utils;

/****************************************************************
 ** kcg_int 
 ****************************************************************/
extern int kcg_int_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_int_string(const char *str, char **endptr);
extern int string_to_kcg_int(const char *str, void *pValue, char **endptr);
extern int is_kcg_int_allow_double_conversion();
extern int kcg_int_to_double(const void *pValue, double *nValue);
extern int get_kcg_int_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_int(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_int_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_int_Utils;

/****************************************************************
 ** struct__154982 
 ****************************************************************/
extern int struct__154982_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__154982_string(const char *str, char **endptr);
extern int string_to_struct__154982(const char *str, void *pValue, char **endptr);
extern int is_struct__154982_allow_double_conversion();
extern int struct__154982_to_double(const void *pValue, double *nValue);
extern int get_struct__154982_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__154982(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__154982_default_value(void *pValue);
extern SimTypeUtils _Type_struct__154982_Utils;

/****************************************************************
 ** struct__154988 
 ****************************************************************/
extern int struct__154988_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__154988_string(const char *str, char **endptr);
extern int string_to_struct__154988(const char *str, void *pValue, char **endptr);
extern int is_struct__154988_allow_double_conversion();
extern int struct__154988_to_double(const void *pValue, double *nValue);
extern int get_struct__154988_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__154988(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__154988_default_value(void *pValue);
extern SimTypeUtils _Type_struct__154988_Utils;

/****************************************************************
 ** array_int_500 
 ****************************************************************/
extern int array_int_500_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_500_string(const char *str, char **endptr);
extern int string_to_array_int_500(const char *str, void *pValue, char **endptr);
extern int is_array_int_500_allow_double_conversion();
extern int array_int_500_to_double(const void *pValue, double *nValue);
extern int get_array_int_500_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_500(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_500_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_500_Utils;

/****************************************************************
 ** struct__155004 
 ****************************************************************/
extern int struct__155004_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155004_string(const char *str, char **endptr);
extern int string_to_struct__155004(const char *str, void *pValue, char **endptr);
extern int is_struct__155004_allow_double_conversion();
extern int struct__155004_to_double(const void *pValue, double *nValue);
extern int get_struct__155004_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155004(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155004_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155004_Utils;

/****************************************************************
 ** array__155012 
 ****************************************************************/
extern int array__155012_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155012_string(const char *str, char **endptr);
extern int string_to_array__155012(const char *str, void *pValue, char **endptr);
extern int is_array__155012_allow_double_conversion();
extern int array__155012_to_double(const void *pValue, double *nValue);
extern int get_array__155012_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155012(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155012_default_value(void *pValue);
extern SimTypeUtils _Type_array__155012_Utils;

/****************************************************************
 ** struct__155015 
 ****************************************************************/
extern int struct__155015_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155015_string(const char *str, char **endptr);
extern int string_to_struct__155015(const char *str, void *pValue, char **endptr);
extern int is_struct__155015_allow_double_conversion();
extern int struct__155015_to_double(const void *pValue, double *nValue);
extern int get_struct__155015_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155015(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155015_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155015_Utils;

/****************************************************************
 ** struct__155020 
 ****************************************************************/
extern int struct__155020_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155020_string(const char *str, char **endptr);
extern int string_to_struct__155020(const char *str, void *pValue, char **endptr);
extern int is_struct__155020_allow_double_conversion();
extern int struct__155020_to_double(const void *pValue, double *nValue);
extern int get_struct__155020_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155020(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155020_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155020_Utils;

/****************************************************************
 ** struct__155025 
 ****************************************************************/
extern int struct__155025_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155025_string(const char *str, char **endptr);
extern int string_to_struct__155025(const char *str, void *pValue, char **endptr);
extern int is_struct__155025_allow_double_conversion();
extern int struct__155025_to_double(const void *pValue, double *nValue);
extern int get_struct__155025_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155025(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155025_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155025_Utils;

/****************************************************************
 ** struct__155030 
 ****************************************************************/
extern int struct__155030_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155030_string(const char *str, char **endptr);
extern int string_to_struct__155030(const char *str, void *pValue, char **endptr);
extern int is_struct__155030_allow_double_conversion();
extern int struct__155030_to_double(const void *pValue, double *nValue);
extern int get_struct__155030_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155030(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155030_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155030_Utils;

/****************************************************************
 ** struct__155038 
 ****************************************************************/
extern int struct__155038_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155038_string(const char *str, char **endptr);
extern int string_to_struct__155038(const char *str, void *pValue, char **endptr);
extern int is_struct__155038_allow_double_conversion();
extern int struct__155038_to_double(const void *pValue, double *nValue);
extern int get_struct__155038_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155038(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155038_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155038_Utils;

/****************************************************************
 ** struct__155047 
 ****************************************************************/
extern int struct__155047_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155047_string(const char *str, char **endptr);
extern int string_to_struct__155047(const char *str, void *pValue, char **endptr);
extern int is_struct__155047_allow_double_conversion();
extern int struct__155047_to_double(const void *pValue, double *nValue);
extern int get_struct__155047_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155047(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155047_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155047_Utils;

/****************************************************************
 ** struct__155052 
 ****************************************************************/
extern int struct__155052_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155052_string(const char *str, char **endptr);
extern int string_to_struct__155052(const char *str, void *pValue, char **endptr);
extern int is_struct__155052_allow_double_conversion();
extern int struct__155052_to_double(const void *pValue, double *nValue);
extern int get_struct__155052_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155052(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155052_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155052_Utils;

/****************************************************************
 ** struct__155060 
 ****************************************************************/
extern int struct__155060_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155060_string(const char *str, char **endptr);
extern int string_to_struct__155060(const char *str, void *pValue, char **endptr);
extern int is_struct__155060_allow_double_conversion();
extern int struct__155060_to_double(const void *pValue, double *nValue);
extern int get_struct__155060_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155060(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155060_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155060_Utils;

/****************************************************************
 ** array__155066 
 ****************************************************************/
extern int array__155066_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155066_string(const char *str, char **endptr);
extern int string_to_array__155066(const char *str, void *pValue, char **endptr);
extern int is_array__155066_allow_double_conversion();
extern int array__155066_to_double(const void *pValue, double *nValue);
extern int get_array__155066_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155066(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155066_default_value(void *pValue);
extern SimTypeUtils _Type_array__155066_Utils;

/****************************************************************
 ** struct__155069 
 ****************************************************************/
extern int struct__155069_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155069_string(const char *str, char **endptr);
extern int string_to_struct__155069(const char *str, void *pValue, char **endptr);
extern int is_struct__155069_allow_double_conversion();
extern int struct__155069_to_double(const void *pValue, double *nValue);
extern int get_struct__155069_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155069(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155069_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155069_Utils;

/****************************************************************
 ** array_int_3 
 ****************************************************************/
extern int array_int_3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_3_string(const char *str, char **endptr);
extern int string_to_array_int_3(const char *str, void *pValue, char **endptr);
extern int is_array_int_3_allow_double_conversion();
extern int array_int_3_to_double(const void *pValue, double *nValue);
extern int get_array_int_3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_3_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_3_Utils;

/****************************************************************
 ** array_int_3_33 
 ****************************************************************/
extern int array_int_3_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_3_33_string(const char *str, char **endptr);
extern int string_to_array_int_3_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_3_33_allow_double_conversion();
extern int array_int_3_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_3_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_3_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_3_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_3_33_Utils;

/****************************************************************
 ** array_int_99 
 ****************************************************************/
extern int array_int_99_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_99_string(const char *str, char **endptr);
extern int string_to_array_int_99(const char *str, void *pValue, char **endptr);
extern int is_array_int_99_allow_double_conversion();
extern int array_int_99_to_double(const void *pValue, double *nValue);
extern int get_array_int_99_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_99(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_99_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_99_Utils;

/****************************************************************
 ** array__155092 
 ****************************************************************/
extern int array__155092_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155092_string(const char *str, char **endptr);
extern int string_to_array__155092(const char *str, void *pValue, char **endptr);
extern int is_array__155092_allow_double_conversion();
extern int array__155092_to_double(const void *pValue, double *nValue);
extern int get_array__155092_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155092(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155092_default_value(void *pValue);
extern SimTypeUtils _Type_array__155092_Utils;

/****************************************************************
 ** struct__155095 
 ****************************************************************/
extern int struct__155095_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155095_string(const char *str, char **endptr);
extern int string_to_struct__155095(const char *str, void *pValue, char **endptr);
extern int is_struct__155095_allow_double_conversion();
extern int struct__155095_to_double(const void *pValue, double *nValue);
extern int get_struct__155095_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155095(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155095_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155095_Utils;

/****************************************************************
 ** array__155100 
 ****************************************************************/
extern int array__155100_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155100_string(const char *str, char **endptr);
extern int string_to_array__155100(const char *str, void *pValue, char **endptr);
extern int is_array__155100_allow_double_conversion();
extern int array__155100_to_double(const void *pValue, double *nValue);
extern int get_array__155100_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155100(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155100_default_value(void *pValue);
extern SimTypeUtils _Type_array__155100_Utils;

/****************************************************************
 ** struct__155103 
 ****************************************************************/
extern int struct__155103_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155103_string(const char *str, char **endptr);
extern int string_to_struct__155103(const char *str, void *pValue, char **endptr);
extern int is_struct__155103_allow_double_conversion();
extern int struct__155103_to_double(const void *pValue, double *nValue);
extern int get_struct__155103_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155103(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155103_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155103_Utils;

/****************************************************************
 ** array_int_2 
 ****************************************************************/
extern int array_int_2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_string(const char *str, char **endptr);
extern int string_to_array_int_2(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_allow_double_conversion();
extern int array_int_2_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_Utils;

/****************************************************************
 ** array_int_2_33 
 ****************************************************************/
extern int array_int_2_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_33_string(const char *str, char **endptr);
extern int string_to_array_int_2_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_33_allow_double_conversion();
extern int array_int_2_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_33_Utils;

/****************************************************************
 ** array_int_66 
 ****************************************************************/
extern int array_int_66_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_66_string(const char *str, char **endptr);
extern int string_to_array_int_66(const char *str, void *pValue, char **endptr);
extern int is_array_int_66_allow_double_conversion();
extern int array_int_66_to_double(const void *pValue, double *nValue);
extern int get_array_int_66_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_66(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_66_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_66_Utils;

/****************************************************************
 ** array__155123 
 ****************************************************************/
extern int array__155123_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155123_string(const char *str, char **endptr);
extern int string_to_array__155123(const char *str, void *pValue, char **endptr);
extern int is_array__155123_allow_double_conversion();
extern int array__155123_to_double(const void *pValue, double *nValue);
extern int get_array__155123_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155123(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155123_default_value(void *pValue);
extern SimTypeUtils _Type_array__155123_Utils;

/****************************************************************
 ** struct__155126 
 ****************************************************************/
extern int struct__155126_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155126_string(const char *str, char **endptr);
extern int string_to_struct__155126(const char *str, void *pValue, char **endptr);
extern int is_struct__155126_allow_double_conversion();
extern int struct__155126_to_double(const void *pValue, double *nValue);
extern int get_struct__155126_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155126(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155126_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155126_Utils;

/****************************************************************
 ** array_int_32 
 ****************************************************************/
extern int array_int_32_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_32_string(const char *str, char **endptr);
extern int string_to_array_int_32(const char *str, void *pValue, char **endptr);
extern int is_array_int_32_allow_double_conversion();
extern int array_int_32_to_double(const void *pValue, double *nValue);
extern int get_array_int_32_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_32(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_32_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_32_Utils;

/****************************************************************
 ** struct__155141 
 ****************************************************************/
extern int struct__155141_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155141_string(const char *str, char **endptr);
extern int string_to_struct__155141(const char *str, void *pValue, char **endptr);
extern int is_struct__155141_allow_double_conversion();
extern int struct__155141_to_double(const void *pValue, double *nValue);
extern int get_struct__155141_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155141(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155141_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155141_Utils;

/****************************************************************
 ** struct__155170 
 ****************************************************************/
extern int struct__155170_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155170_string(const char *str, char **endptr);
extern int string_to_struct__155170(const char *str, void *pValue, char **endptr);
extern int is_struct__155170_allow_double_conversion();
extern int struct__155170_to_double(const void *pValue, double *nValue);
extern int get_struct__155170_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155170(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155170_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155170_Utils;

/****************************************************************
 ** struct__155178 
 ****************************************************************/
extern int struct__155178_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155178_string(const char *str, char **endptr);
extern int string_to_struct__155178(const char *str, void *pValue, char **endptr);
extern int is_struct__155178_allow_double_conversion();
extern int struct__155178_to_double(const void *pValue, double *nValue);
extern int get_struct__155178_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155178(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155178_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155178_Utils;

/****************************************************************
 ** array__155185 
 ****************************************************************/
extern int array__155185_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155185_string(const char *str, char **endptr);
extern int string_to_array__155185(const char *str, void *pValue, char **endptr);
extern int is_array__155185_allow_double_conversion();
extern int array__155185_to_double(const void *pValue, double *nValue);
extern int get_array__155185_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155185(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155185_default_value(void *pValue);
extern SimTypeUtils _Type_array__155185_Utils;

/****************************************************************
 ** struct__155188 
 ****************************************************************/
extern int struct__155188_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155188_string(const char *str, char **endptr);
extern int string_to_struct__155188(const char *str, void *pValue, char **endptr);
extern int is_struct__155188_allow_double_conversion();
extern int struct__155188_to_double(const void *pValue, double *nValue);
extern int get_struct__155188_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155188(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155188_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155188_Utils;

/****************************************************************
 ** struct__155215 
 ****************************************************************/
extern int struct__155215_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155215_string(const char *str, char **endptr);
extern int string_to_struct__155215(const char *str, void *pValue, char **endptr);
extern int is_struct__155215_allow_double_conversion();
extern int struct__155215_to_double(const void *pValue, double *nValue);
extern int get_struct__155215_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155215(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155215_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155215_Utils;

/****************************************************************
 ** array__155225 
 ****************************************************************/
extern int array__155225_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155225_string(const char *str, char **endptr);
extern int string_to_array__155225(const char *str, void *pValue, char **endptr);
extern int is_array__155225_allow_double_conversion();
extern int array__155225_to_double(const void *pValue, double *nValue);
extern int get_array__155225_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155225(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155225_default_value(void *pValue);
extern SimTypeUtils _Type_array__155225_Utils;

/****************************************************************
 ** struct__155228 
 ****************************************************************/
extern int struct__155228_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155228_string(const char *str, char **endptr);
extern int string_to_struct__155228(const char *str, void *pValue, char **endptr);
extern int is_struct__155228_allow_double_conversion();
extern int struct__155228_to_double(const void *pValue, double *nValue);
extern int get_struct__155228_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155228(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155228_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155228_Utils;

/****************************************************************
 ** struct__155245 
 ****************************************************************/
extern int struct__155245_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155245_string(const char *str, char **endptr);
extern int string_to_struct__155245(const char *str, void *pValue, char **endptr);
extern int is_struct__155245_allow_double_conversion();
extern int struct__155245_to_double(const void *pValue, double *nValue);
extern int get_struct__155245_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155245(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155245_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155245_Utils;

/****************************************************************
 ** array__155250 
 ****************************************************************/
extern int array__155250_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155250_string(const char *str, char **endptr);
extern int string_to_array__155250(const char *str, void *pValue, char **endptr);
extern int is_array__155250_allow_double_conversion();
extern int array__155250_to_double(const void *pValue, double *nValue);
extern int get_array__155250_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155250(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155250_default_value(void *pValue);
extern SimTypeUtils _Type_array__155250_Utils;

/****************************************************************
 ** struct__155253 
 ****************************************************************/
extern int struct__155253_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155253_string(const char *str, char **endptr);
extern int string_to_struct__155253(const char *str, void *pValue, char **endptr);
extern int is_struct__155253_allow_double_conversion();
extern int struct__155253_to_double(const void *pValue, double *nValue);
extern int get_struct__155253_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155253(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155253_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155253_Utils;

/****************************************************************
 ** array__155261 
 ****************************************************************/
extern int array__155261_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155261_string(const char *str, char **endptr);
extern int string_to_array__155261(const char *str, void *pValue, char **endptr);
extern int is_array__155261_allow_double_conversion();
extern int array__155261_to_double(const void *pValue, double *nValue);
extern int get_array__155261_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155261(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155261_default_value(void *pValue);
extern SimTypeUtils _Type_array__155261_Utils;

/****************************************************************
 ** struct__155264 
 ****************************************************************/
extern int struct__155264_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155264_string(const char *str, char **endptr);
extern int string_to_struct__155264(const char *str, void *pValue, char **endptr);
extern int is_struct__155264_allow_double_conversion();
extern int struct__155264_to_double(const void *pValue, double *nValue);
extern int get_struct__155264_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155264(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155264_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155264_Utils;

/****************************************************************
 ** struct__155279 
 ****************************************************************/
extern int struct__155279_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155279_string(const char *str, char **endptr);
extern int string_to_struct__155279(const char *str, void *pValue, char **endptr);
extern int is_struct__155279_allow_double_conversion();
extern int struct__155279_to_double(const void *pValue, double *nValue);
extern int get_struct__155279_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155279(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155279_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155279_Utils;

/****************************************************************
 ** array__155285 
 ****************************************************************/
extern int array__155285_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155285_string(const char *str, char **endptr);
extern int string_to_array__155285(const char *str, void *pValue, char **endptr);
extern int is_array__155285_allow_double_conversion();
extern int array__155285_to_double(const void *pValue, double *nValue);
extern int get_array__155285_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155285(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155285_default_value(void *pValue);
extern SimTypeUtils _Type_array__155285_Utils;

/****************************************************************
 ** struct__155288 
 ****************************************************************/
extern int struct__155288_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155288_string(const char *str, char **endptr);
extern int string_to_struct__155288(const char *str, void *pValue, char **endptr);
extern int is_struct__155288_allow_double_conversion();
extern int struct__155288_to_double(const void *pValue, double *nValue);
extern int get_struct__155288_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155288(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155288_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155288_Utils;

/****************************************************************
 ** struct__155301 
 ****************************************************************/
extern int struct__155301_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155301_string(const char *str, char **endptr);
extern int string_to_struct__155301(const char *str, void *pValue, char **endptr);
extern int is_struct__155301_allow_double_conversion();
extern int struct__155301_to_double(const void *pValue, double *nValue);
extern int get_struct__155301_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155301(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155301_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155301_Utils;

/****************************************************************
 ** array_int_4 
 ****************************************************************/
extern int array_int_4_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_4_string(const char *str, char **endptr);
extern int string_to_array_int_4(const char *str, void *pValue, char **endptr);
extern int is_array_int_4_allow_double_conversion();
extern int array_int_4_to_double(const void *pValue, double *nValue);
extern int get_array_int_4_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_4(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_4_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_4_Utils;

/****************************************************************
 ** array_int_4_32 
 ****************************************************************/
extern int array_int_4_32_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_4_32_string(const char *str, char **endptr);
extern int string_to_array_int_4_32(const char *str, void *pValue, char **endptr);
extern int is_array_int_4_32_allow_double_conversion();
extern int array_int_4_32_to_double(const void *pValue, double *nValue);
extern int get_array_int_4_32_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_4_32(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_4_32_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_4_32_Utils;

/****************************************************************
 ** array_int_128 
 ****************************************************************/
extern int array_int_128_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_128_string(const char *str, char **endptr);
extern int string_to_array_int_128(const char *str, void *pValue, char **endptr);
extern int is_array_int_128_allow_double_conversion();
extern int array_int_128_to_double(const void *pValue, double *nValue);
extern int get_array_int_128_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_128(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_128_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_128_Utils;

/****************************************************************
 ** array_int_7 
 ****************************************************************/
extern int array_int_7_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_7_string(const char *str, char **endptr);
extern int string_to_array_int_7(const char *str, void *pValue, char **endptr);
extern int is_array_int_7_allow_double_conversion();
extern int array_int_7_to_double(const void *pValue, double *nValue);
extern int get_array_int_7_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_7(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_7_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_7_Utils;

/****************************************************************
 ** array_int_7_33 
 ****************************************************************/
extern int array_int_7_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_7_33_string(const char *str, char **endptr);
extern int string_to_array_int_7_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_7_33_allow_double_conversion();
extern int array_int_7_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_7_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_7_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_7_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_7_33_Utils;

/****************************************************************
 ** array_int_231 
 ****************************************************************/
extern int array_int_231_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_231_string(const char *str, char **endptr);
extern int string_to_array_int_231(const char *str, void *pValue, char **endptr);
extern int is_array_int_231_allow_double_conversion();
extern int array_int_231_to_double(const void *pValue, double *nValue);
extern int get_array_int_231_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_231(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_231_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_231_Utils;

/****************************************************************
 ** array__155332 
 ****************************************************************/
extern int array__155332_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155332_string(const char *str, char **endptr);
extern int string_to_array__155332(const char *str, void *pValue, char **endptr);
extern int is_array__155332_allow_double_conversion();
extern int array__155332_to_double(const void *pValue, double *nValue);
extern int get_array__155332_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155332(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155332_default_value(void *pValue);
extern SimTypeUtils _Type_array__155332_Utils;

/****************************************************************
 ** array_int_64 
 ****************************************************************/
extern int array_int_64_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_64_string(const char *str, char **endptr);
extern int string_to_array_int_64(const char *str, void *pValue, char **endptr);
extern int is_array_int_64_allow_double_conversion();
extern int array_int_64_to_double(const void *pValue, double *nValue);
extern int get_array_int_64_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_64(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_64_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_64_Utils;

/****************************************************************
 ** array_int_2_32 
 ****************************************************************/
extern int array_int_2_32_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_32_string(const char *str, char **endptr);
extern int string_to_array_int_2_32(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_32_allow_double_conversion();
extern int array_int_2_32_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_32_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2_32(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_32_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_32_Utils;

/****************************************************************
 ** array__155341 
 ****************************************************************/
extern int array__155341_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155341_string(const char *str, char **endptr);
extern int string_to_array__155341(const char *str, void *pValue, char **endptr);
extern int is_array__155341_allow_double_conversion();
extern int array__155341_to_double(const void *pValue, double *nValue);
extern int get_array__155341_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155341(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155341_default_value(void *pValue);
extern SimTypeUtils _Type_array__155341_Utils;

/****************************************************************
 ** array__155344 
 ****************************************************************/
extern int array__155344_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155344_string(const char *str, char **endptr);
extern int string_to_array__155344(const char *str, void *pValue, char **endptr);
extern int is_array__155344_allow_double_conversion();
extern int array__155344_to_double(const void *pValue, double *nValue);
extern int get_array__155344_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155344(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155344_default_value(void *pValue);
extern SimTypeUtils _Type_array__155344_Utils;

/****************************************************************
 ** struct__155347 
 ****************************************************************/
extern int struct__155347_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155347_string(const char *str, char **endptr);
extern int string_to_struct__155347(const char *str, void *pValue, char **endptr);
extern int is_struct__155347_allow_double_conversion();
extern int struct__155347_to_double(const void *pValue, double *nValue);
extern int get_struct__155347_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155347(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155347_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155347_Utils;

/****************************************************************
 ** struct__155356 
 ****************************************************************/
extern int struct__155356_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155356_string(const char *str, char **endptr);
extern int string_to_struct__155356(const char *str, void *pValue, char **endptr);
extern int is_struct__155356_allow_double_conversion();
extern int struct__155356_to_double(const void *pValue, double *nValue);
extern int get_struct__155356_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155356(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155356_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155356_Utils;

/****************************************************************
 ** struct__155371 
 ****************************************************************/
extern int struct__155371_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155371_string(const char *str, char **endptr);
extern int string_to_struct__155371(const char *str, void *pValue, char **endptr);
extern int is_struct__155371_allow_double_conversion();
extern int struct__155371_to_double(const void *pValue, double *nValue);
extern int get_struct__155371_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155371(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155371_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155371_Utils;

/****************************************************************
 ** struct__155378 
 ****************************************************************/
extern int struct__155378_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155378_string(const char *str, char **endptr);
extern int string_to_struct__155378(const char *str, void *pValue, char **endptr);
extern int is_struct__155378_allow_double_conversion();
extern int struct__155378_to_double(const void *pValue, double *nValue);
extern int get_struct__155378_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155378(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155378_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155378_Utils;

/****************************************************************
 ** struct__155388 
 ****************************************************************/
extern int struct__155388_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155388_string(const char *str, char **endptr);
extern int string_to_struct__155388(const char *str, void *pValue, char **endptr);
extern int is_struct__155388_allow_double_conversion();
extern int struct__155388_to_double(const void *pValue, double *nValue);
extern int get_struct__155388_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155388(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155388_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155388_Utils;

/****************************************************************
 ** array__155393 
 ****************************************************************/
extern int array__155393_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155393_string(const char *str, char **endptr);
extern int string_to_array__155393(const char *str, void *pValue, char **endptr);
extern int is_array__155393_allow_double_conversion();
extern int array__155393_to_double(const void *pValue, double *nValue);
extern int get_array__155393_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155393(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155393_default_value(void *pValue);
extern SimTypeUtils _Type_array__155393_Utils;

/****************************************************************
 ** struct__155396 
 ****************************************************************/
extern int struct__155396_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155396_string(const char *str, char **endptr);
extern int string_to_struct__155396(const char *str, void *pValue, char **endptr);
extern int is_struct__155396_allow_double_conversion();
extern int struct__155396_to_double(const void *pValue, double *nValue);
extern int get_struct__155396_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155396(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155396_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155396_Utils;

/****************************************************************
 ** struct__155409 
 ****************************************************************/
extern int struct__155409_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155409_string(const char *str, char **endptr);
extern int string_to_struct__155409(const char *str, void *pValue, char **endptr);
extern int is_struct__155409_allow_double_conversion();
extern int struct__155409_to_double(const void *pValue, double *nValue);
extern int get_struct__155409_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155409(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155409_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155409_Utils;

/****************************************************************
 ** struct__155419 
 ****************************************************************/
extern int struct__155419_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155419_string(const char *str, char **endptr);
extern int string_to_struct__155419(const char *str, void *pValue, char **endptr);
extern int is_struct__155419_allow_double_conversion();
extern int struct__155419_to_double(const void *pValue, double *nValue);
extern int get_struct__155419_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155419(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155419_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155419_Utils;

/****************************************************************
 ** struct__155429 
 ****************************************************************/
extern int struct__155429_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155429_string(const char *str, char **endptr);
extern int string_to_struct__155429(const char *str, void *pValue, char **endptr);
extern int is_struct__155429_allow_double_conversion();
extern int struct__155429_to_double(const void *pValue, double *nValue);
extern int get_struct__155429_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155429(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155429_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155429_Utils;

/****************************************************************
 ** struct__155447 
 ****************************************************************/
extern int struct__155447_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155447_string(const char *str, char **endptr);
extern int string_to_struct__155447(const char *str, void *pValue, char **endptr);
extern int is_struct__155447_allow_double_conversion();
extern int struct__155447_to_double(const void *pValue, double *nValue);
extern int get_struct__155447_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155447(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155447_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155447_Utils;

/****************************************************************
 ** struct__155457 
 ****************************************************************/
extern int struct__155457_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155457_string(const char *str, char **endptr);
extern int string_to_struct__155457(const char *str, void *pValue, char **endptr);
extern int is_struct__155457_allow_double_conversion();
extern int struct__155457_to_double(const void *pValue, double *nValue);
extern int get_struct__155457_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155457(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155457_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155457_Utils;

/****************************************************************
 ** struct__155467 
 ****************************************************************/
extern int struct__155467_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155467_string(const char *str, char **endptr);
extern int string_to_struct__155467(const char *str, void *pValue, char **endptr);
extern int is_struct__155467_allow_double_conversion();
extern int struct__155467_to_double(const void *pValue, double *nValue);
extern int get_struct__155467_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155467(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155467_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155467_Utils;

/****************************************************************
 ** struct__155478 
 ****************************************************************/
extern int struct__155478_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155478_string(const char *str, char **endptr);
extern int string_to_struct__155478(const char *str, void *pValue, char **endptr);
extern int is_struct__155478_allow_double_conversion();
extern int struct__155478_to_double(const void *pValue, double *nValue);
extern int get_struct__155478_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155478(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155478_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155478_Utils;

/****************************************************************
 ** struct__155492 
 ****************************************************************/
extern int struct__155492_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155492_string(const char *str, char **endptr);
extern int string_to_struct__155492(const char *str, void *pValue, char **endptr);
extern int is_struct__155492_allow_double_conversion();
extern int struct__155492_to_double(const void *pValue, double *nValue);
extern int get_struct__155492_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155492(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155492_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155492_Utils;

/****************************************************************
 ** struct__155501 
 ****************************************************************/
extern int struct__155501_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155501_string(const char *str, char **endptr);
extern int string_to_struct__155501(const char *str, void *pValue, char **endptr);
extern int is_struct__155501_allow_double_conversion();
extern int struct__155501_to_double(const void *pValue, double *nValue);
extern int get_struct__155501_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155501(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155501_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155501_Utils;

/****************************************************************
 ** struct__155511 
 ****************************************************************/
extern int struct__155511_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155511_string(const char *str, char **endptr);
extern int string_to_struct__155511(const char *str, void *pValue, char **endptr);
extern int is_struct__155511_allow_double_conversion();
extern int struct__155511_to_double(const void *pValue, double *nValue);
extern int get_struct__155511_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155511(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155511_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155511_Utils;

/****************************************************************
 ** struct__155522 
 ****************************************************************/
extern int struct__155522_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155522_string(const char *str, char **endptr);
extern int string_to_struct__155522(const char *str, void *pValue, char **endptr);
extern int is_struct__155522_allow_double_conversion();
extern int struct__155522_to_double(const void *pValue, double *nValue);
extern int get_struct__155522_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155522(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155522_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155522_Utils;

/****************************************************************
 ** struct__155532 
 ****************************************************************/
extern int struct__155532_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155532_string(const char *str, char **endptr);
extern int string_to_struct__155532(const char *str, void *pValue, char **endptr);
extern int is_struct__155532_allow_double_conversion();
extern int struct__155532_to_double(const void *pValue, double *nValue);
extern int get_struct__155532_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155532(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155532_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155532_Utils;

/****************************************************************
 ** struct__155546 
 ****************************************************************/
extern int struct__155546_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155546_string(const char *str, char **endptr);
extern int string_to_struct__155546(const char *str, void *pValue, char **endptr);
extern int is_struct__155546_allow_double_conversion();
extern int struct__155546_to_double(const void *pValue, double *nValue);
extern int get_struct__155546_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155546(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155546_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155546_Utils;

/****************************************************************
 ** struct__155556 
 ****************************************************************/
extern int struct__155556_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155556_string(const char *str, char **endptr);
extern int string_to_struct__155556(const char *str, void *pValue, char **endptr);
extern int is_struct__155556_allow_double_conversion();
extern int struct__155556_to_double(const void *pValue, double *nValue);
extern int get_struct__155556_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155556(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155556_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155556_Utils;

/****************************************************************
 ** struct__155570 
 ****************************************************************/
extern int struct__155570_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155570_string(const char *str, char **endptr);
extern int string_to_struct__155570(const char *str, void *pValue, char **endptr);
extern int is_struct__155570_allow_double_conversion();
extern int struct__155570_to_double(const void *pValue, double *nValue);
extern int get_struct__155570_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155570(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155570_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155570_Utils;

/****************************************************************
 ** struct__155588 
 ****************************************************************/
extern int struct__155588_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155588_string(const char *str, char **endptr);
extern int string_to_struct__155588(const char *str, void *pValue, char **endptr);
extern int is_struct__155588_allow_double_conversion();
extern int struct__155588_to_double(const void *pValue, double *nValue);
extern int get_struct__155588_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155588(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155588_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155588_Utils;

/****************************************************************
 ** struct__155593 
 ****************************************************************/
extern int struct__155593_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155593_string(const char *str, char **endptr);
extern int string_to_struct__155593(const char *str, void *pValue, char **endptr);
extern int is_struct__155593_allow_double_conversion();
extern int struct__155593_to_double(const void *pValue, double *nValue);
extern int get_struct__155593_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155593(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155593_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155593_Utils;

/****************************************************************
 ** struct__155606 
 ****************************************************************/
extern int struct__155606_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155606_string(const char *str, char **endptr);
extern int string_to_struct__155606(const char *str, void *pValue, char **endptr);
extern int is_struct__155606_allow_double_conversion();
extern int struct__155606_to_double(const void *pValue, double *nValue);
extern int get_struct__155606_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155606(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155606_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155606_Utils;

/****************************************************************
 ** array__155611 
 ****************************************************************/
extern int array__155611_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155611_string(const char *str, char **endptr);
extern int string_to_array__155611(const char *str, void *pValue, char **endptr);
extern int is_array__155611_allow_double_conversion();
extern int array__155611_to_double(const void *pValue, double *nValue);
extern int get_array__155611_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155611(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155611_default_value(void *pValue);
extern SimTypeUtils _Type_array__155611_Utils;

/****************************************************************
 ** struct__155614 
 ****************************************************************/
extern int struct__155614_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155614_string(const char *str, char **endptr);
extern int string_to_struct__155614(const char *str, void *pValue, char **endptr);
extern int is_struct__155614_allow_double_conversion();
extern int struct__155614_to_double(const void *pValue, double *nValue);
extern int get_struct__155614_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155614(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155614_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155614_Utils;

/****************************************************************
 ** struct__155618 
 ****************************************************************/
extern int struct__155618_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155618_string(const char *str, char **endptr);
extern int string_to_struct__155618(const char *str, void *pValue, char **endptr);
extern int is_struct__155618_allow_double_conversion();
extern int struct__155618_to_double(const void *pValue, double *nValue);
extern int get_struct__155618_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155618(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155618_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155618_Utils;

/****************************************************************
 ** struct__155627 
 ****************************************************************/
extern int struct__155627_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155627_string(const char *str, char **endptr);
extern int string_to_struct__155627(const char *str, void *pValue, char **endptr);
extern int is_struct__155627_allow_double_conversion();
extern int struct__155627_to_double(const void *pValue, double *nValue);
extern int get_struct__155627_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155627(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155627_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155627_Utils;

/****************************************************************
 ** array__155632 
 ****************************************************************/
extern int array__155632_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155632_string(const char *str, char **endptr);
extern int string_to_array__155632(const char *str, void *pValue, char **endptr);
extern int is_array__155632_allow_double_conversion();
extern int array__155632_to_double(const void *pValue, double *nValue);
extern int get_array__155632_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155632(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155632_default_value(void *pValue);
extern SimTypeUtils _Type_array__155632_Utils;

/****************************************************************
 ** struct__155635 
 ****************************************************************/
extern int struct__155635_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155635_string(const char *str, char **endptr);
extern int string_to_struct__155635(const char *str, void *pValue, char **endptr);
extern int is_struct__155635_allow_double_conversion();
extern int struct__155635_to_double(const void *pValue, double *nValue);
extern int get_struct__155635_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155635(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155635_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155635_Utils;

/****************************************************************
 ** struct__155645 
 ****************************************************************/
extern int struct__155645_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155645_string(const char *str, char **endptr);
extern int string_to_struct__155645(const char *str, void *pValue, char **endptr);
extern int is_struct__155645_allow_double_conversion();
extern int struct__155645_to_double(const void *pValue, double *nValue);
extern int get_struct__155645_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155645(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155645_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155645_Utils;

/****************************************************************
 ** struct__155652 
 ****************************************************************/
extern int struct__155652_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155652_string(const char *str, char **endptr);
extern int string_to_struct__155652(const char *str, void *pValue, char **endptr);
extern int is_struct__155652_allow_double_conversion();
extern int struct__155652_to_double(const void *pValue, double *nValue);
extern int get_struct__155652_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155652(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155652_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155652_Utils;

/****************************************************************
 ** struct__155662 
 ****************************************************************/
extern int struct__155662_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155662_string(const char *str, char **endptr);
extern int string_to_struct__155662(const char *str, void *pValue, char **endptr);
extern int is_struct__155662_allow_double_conversion();
extern int struct__155662_to_double(const void *pValue, double *nValue);
extern int get_struct__155662_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155662(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155662_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155662_Utils;

/****************************************************************
 ** struct__155669 
 ****************************************************************/
extern int struct__155669_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155669_string(const char *str, char **endptr);
extern int string_to_struct__155669(const char *str, void *pValue, char **endptr);
extern int is_struct__155669_allow_double_conversion();
extern int struct__155669_to_double(const void *pValue, double *nValue);
extern int get_struct__155669_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155669(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155669_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155669_Utils;

/****************************************************************
 ** struct__155673 
 ****************************************************************/
extern int struct__155673_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155673_string(const char *str, char **endptr);
extern int string_to_struct__155673(const char *str, void *pValue, char **endptr);
extern int is_struct__155673_allow_double_conversion();
extern int struct__155673_to_double(const void *pValue, double *nValue);
extern int get_struct__155673_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155673(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155673_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155673_Utils;

/****************************************************************
 ** array_int_15 
 ****************************************************************/
extern int array_int_15_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_15_string(const char *str, char **endptr);
extern int string_to_array_int_15(const char *str, void *pValue, char **endptr);
extern int is_array_int_15_allow_double_conversion();
extern int array_int_15_to_double(const void *pValue, double *nValue);
extern int get_array_int_15_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_15(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_15_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_15_Utils;

/****************************************************************
 ** struct__155694 
 ****************************************************************/
extern int struct__155694_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155694_string(const char *str, char **endptr);
extern int string_to_struct__155694(const char *str, void *pValue, char **endptr);
extern int is_struct__155694_allow_double_conversion();
extern int struct__155694_to_double(const void *pValue, double *nValue);
extern int get_struct__155694_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155694(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155694_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155694_Utils;

/****************************************************************
 ** array__155699 
 ****************************************************************/
extern int array__155699_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155699_string(const char *str, char **endptr);
extern int string_to_array__155699(const char *str, void *pValue, char **endptr);
extern int is_array__155699_allow_double_conversion();
extern int array__155699_to_double(const void *pValue, double *nValue);
extern int get_array__155699_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155699(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155699_default_value(void *pValue);
extern SimTypeUtils _Type_array__155699_Utils;

/****************************************************************
 ** struct__155702 
 ****************************************************************/
extern int struct__155702_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155702_string(const char *str, char **endptr);
extern int string_to_struct__155702(const char *str, void *pValue, char **endptr);
extern int is_struct__155702_allow_double_conversion();
extern int struct__155702_to_double(const void *pValue, double *nValue);
extern int get_struct__155702_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155702(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155702_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155702_Utils;

/****************************************************************
 ** array__155707 
 ****************************************************************/
extern int array__155707_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155707_string(const char *str, char **endptr);
extern int string_to_array__155707(const char *str, void *pValue, char **endptr);
extern int is_array__155707_allow_double_conversion();
extern int array__155707_to_double(const void *pValue, double *nValue);
extern int get_array__155707_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155707(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155707_default_value(void *pValue);
extern SimTypeUtils _Type_array__155707_Utils;

/****************************************************************
 ** array_int_5 
 ****************************************************************/
extern int array_int_5_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_5_string(const char *str, char **endptr);
extern int string_to_array_int_5(const char *str, void *pValue, char **endptr);
extern int is_array_int_5_allow_double_conversion();
extern int array_int_5_to_double(const void *pValue, double *nValue);
extern int get_array_int_5_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_5(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_5_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_5_Utils;

/****************************************************************
 ** struct__155713 
 ****************************************************************/
extern int struct__155713_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155713_string(const char *str, char **endptr);
extern int string_to_struct__155713(const char *str, void *pValue, char **endptr);
extern int is_struct__155713_allow_double_conversion();
extern int struct__155713_to_double(const void *pValue, double *nValue);
extern int get_struct__155713_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155713(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155713_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155713_Utils;

/****************************************************************
 ** struct__155731 
 ****************************************************************/
extern int struct__155731_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155731_string(const char *str, char **endptr);
extern int string_to_struct__155731(const char *str, void *pValue, char **endptr);
extern int is_struct__155731_allow_double_conversion();
extern int struct__155731_to_double(const void *pValue, double *nValue);
extern int get_struct__155731_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155731(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155731_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155731_Utils;

/****************************************************************
 ** array__155736 
 ****************************************************************/
extern int array__155736_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__155736_string(const char *str, char **endptr);
extern int string_to_array__155736(const char *str, void *pValue, char **endptr);
extern int is_array__155736_allow_double_conversion();
extern int array__155736_to_double(const void *pValue, double *nValue);
extern int get_array__155736_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__155736(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__155736_default_value(void *pValue);
extern SimTypeUtils _Type_array__155736_Utils;

/****************************************************************
 ** struct__155739 
 ****************************************************************/
extern int struct__155739_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155739_string(const char *str, char **endptr);
extern int string_to_struct__155739(const char *str, void *pValue, char **endptr);
extern int is_struct__155739_allow_double_conversion();
extern int struct__155739_to_double(const void *pValue, double *nValue);
extern int get_struct__155739_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155739(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155739_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155739_Utils;

/****************************************************************
 ** struct__155748 
 ****************************************************************/
extern int struct__155748_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155748_string(const char *str, char **endptr);
extern int string_to_struct__155748(const char *str, void *pValue, char **endptr);
extern int is_struct__155748_allow_double_conversion();
extern int struct__155748_to_double(const void *pValue, double *nValue);
extern int get_struct__155748_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155748(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155748_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155748_Utils;

/****************************************************************
 ** struct__155760 
 ****************************************************************/
extern int struct__155760_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155760_string(const char *str, char **endptr);
extern int string_to_struct__155760(const char *str, void *pValue, char **endptr);
extern int is_struct__155760_allow_double_conversion();
extern int struct__155760_to_double(const void *pValue, double *nValue);
extern int get_struct__155760_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155760(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155760_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155760_Utils;

/****************************************************************
 ** struct__155776 
 ****************************************************************/
extern int struct__155776_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155776_string(const char *str, char **endptr);
extern int string_to_struct__155776(const char *str, void *pValue, char **endptr);
extern int is_struct__155776_allow_double_conversion();
extern int struct__155776_to_double(const void *pValue, double *nValue);
extern int get_struct__155776_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155776(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155776_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155776_Utils;

/****************************************************************
 ** struct__155781 
 ****************************************************************/
extern int struct__155781_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155781_string(const char *str, char **endptr);
extern int string_to_struct__155781(const char *str, void *pValue, char **endptr);
extern int is_struct__155781_allow_double_conversion();
extern int struct__155781_to_double(const void *pValue, double *nValue);
extern int get_struct__155781_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155781(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155781_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155781_Utils;

/****************************************************************
 ** struct__155787 
 ****************************************************************/
extern int struct__155787_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155787_string(const char *str, char **endptr);
extern int string_to_struct__155787(const char *str, void *pValue, char **endptr);
extern int is_struct__155787_allow_double_conversion();
extern int struct__155787_to_double(const void *pValue, double *nValue);
extern int get_struct__155787_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155787(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155787_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155787_Utils;

/****************************************************************
 ** struct__155807 
 ****************************************************************/
extern int struct__155807_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155807_string(const char *str, char **endptr);
extern int string_to_struct__155807(const char *str, void *pValue, char **endptr);
extern int is_struct__155807_allow_double_conversion();
extern int struct__155807_to_double(const void *pValue, double *nValue);
extern int get_struct__155807_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155807(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155807_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155807_Utils;

/****************************************************************
 ** struct__155812 
 ****************************************************************/
extern int struct__155812_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155812_string(const char *str, char **endptr);
extern int string_to_struct__155812(const char *str, void *pValue, char **endptr);
extern int is_struct__155812_allow_double_conversion();
extern int struct__155812_to_double(const void *pValue, double *nValue);
extern int get_struct__155812_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155812(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155812_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155812_Utils;

/****************************************************************
 ** struct__155831 
 ****************************************************************/
extern int struct__155831_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155831_string(const char *str, char **endptr);
extern int string_to_struct__155831(const char *str, void *pValue, char **endptr);
extern int is_struct__155831_allow_double_conversion();
extern int struct__155831_to_double(const void *pValue, double *nValue);
extern int get_struct__155831_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155831(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155831_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155831_Utils;

/****************************************************************
 ** struct__155836 
 ****************************************************************/
extern int struct__155836_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155836_string(const char *str, char **endptr);
extern int string_to_struct__155836(const char *str, void *pValue, char **endptr);
extern int is_struct__155836_allow_double_conversion();
extern int struct__155836_to_double(const void *pValue, double *nValue);
extern int get_struct__155836_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155836(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155836_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155836_Utils;

/****************************************************************
 ** struct__155841 
 ****************************************************************/
extern int struct__155841_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155841_string(const char *str, char **endptr);
extern int string_to_struct__155841(const char *str, void *pValue, char **endptr);
extern int is_struct__155841_allow_double_conversion();
extern int struct__155841_to_double(const void *pValue, double *nValue);
extern int get_struct__155841_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155841(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155841_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155841_Utils;

/****************************************************************
 ** struct__155846 
 ****************************************************************/
extern int struct__155846_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155846_string(const char *str, char **endptr);
extern int string_to_struct__155846(const char *str, void *pValue, char **endptr);
extern int is_struct__155846_allow_double_conversion();
extern int struct__155846_to_double(const void *pValue, double *nValue);
extern int get_struct__155846_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155846(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155846_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155846_Utils;

/****************************************************************
 ** struct__155856 
 ****************************************************************/
extern int struct__155856_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155856_string(const char *str, char **endptr);
extern int string_to_struct__155856(const char *str, void *pValue, char **endptr);
extern int is_struct__155856_allow_double_conversion();
extern int struct__155856_to_double(const void *pValue, double *nValue);
extern int get_struct__155856_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155856(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155856_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155856_Utils;

/****************************************************************
 ** struct__155862 
 ****************************************************************/
extern int struct__155862_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155862_string(const char *str, char **endptr);
extern int string_to_struct__155862(const char *str, void *pValue, char **endptr);
extern int is_struct__155862_allow_double_conversion();
extern int struct__155862_to_double(const void *pValue, double *nValue);
extern int get_struct__155862_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155862(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155862_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155862_Utils;

/****************************************************************
 ** struct__155880 
 ****************************************************************/
extern int struct__155880_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155880_string(const char *str, char **endptr);
extern int string_to_struct__155880(const char *str, void *pValue, char **endptr);
extern int is_struct__155880_allow_double_conversion();
extern int struct__155880_to_double(const void *pValue, double *nValue);
extern int get_struct__155880_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155880(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155880_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155880_Utils;

/****************************************************************
 ** struct__155887 
 ****************************************************************/
extern int struct__155887_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155887_string(const char *str, char **endptr);
extern int string_to_struct__155887(const char *str, void *pValue, char **endptr);
extern int is_struct__155887_allow_double_conversion();
extern int struct__155887_to_double(const void *pValue, double *nValue);
extern int get_struct__155887_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155887(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155887_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155887_Utils;

/****************************************************************
 ** struct__155894 
 ****************************************************************/
extern int struct__155894_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155894_string(const char *str, char **endptr);
extern int string_to_struct__155894(const char *str, void *pValue, char **endptr);
extern int is_struct__155894_allow_double_conversion();
extern int struct__155894_to_double(const void *pValue, double *nValue);
extern int get_struct__155894_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155894(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155894_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155894_Utils;

/****************************************************************
 ** struct__155901 
 ****************************************************************/
extern int struct__155901_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155901_string(const char *str, char **endptr);
extern int string_to_struct__155901(const char *str, void *pValue, char **endptr);
extern int is_struct__155901_allow_double_conversion();
extern int struct__155901_to_double(const void *pValue, double *nValue);
extern int get_struct__155901_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155901(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155901_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155901_Utils;

/****************************************************************
 ** struct__155909 
 ****************************************************************/
extern int struct__155909_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155909_string(const char *str, char **endptr);
extern int string_to_struct__155909(const char *str, void *pValue, char **endptr);
extern int is_struct__155909_allow_double_conversion();
extern int struct__155909_to_double(const void *pValue, double *nValue);
extern int get_struct__155909_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155909(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155909_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155909_Utils;

/****************************************************************
 ** struct__155930 
 ****************************************************************/
extern int struct__155930_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155930_string(const char *str, char **endptr);
extern int string_to_struct__155930(const char *str, void *pValue, char **endptr);
extern int is_struct__155930_allow_double_conversion();
extern int struct__155930_to_double(const void *pValue, double *nValue);
extern int get_struct__155930_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155930(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155930_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155930_Utils;

/****************************************************************
 ** array_int_8 
 ****************************************************************/
extern int array_int_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_8_string(const char *str, char **endptr);
extern int string_to_array_int_8(const char *str, void *pValue, char **endptr);
extern int is_array_int_8_allow_double_conversion();
extern int array_int_8_to_double(const void *pValue, double *nValue);
extern int get_array_int_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_8_Utils;

/****************************************************************
 ** array_int_11 
 ****************************************************************/
extern int array_int_11_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_11_string(const char *str, char **endptr);
extern int string_to_array_int_11(const char *str, void *pValue, char **endptr);
extern int is_array_int_11_allow_double_conversion();
extern int array_int_11_to_double(const void *pValue, double *nValue);
extern int get_array_int_11_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_11(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_11_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_11_Utils;

/****************************************************************
 ** array_int_25 
 ****************************************************************/
extern int array_int_25_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_25_string(const char *str, char **endptr);
extern int string_to_array_int_25(const char *str, void *pValue, char **endptr);
extern int is_array_int_25_allow_double_conversion();
extern int array_int_25_to_double(const void *pValue, double *nValue);
extern int get_array_int_25_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_25(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_25_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_25_Utils;

/****************************************************************
 ** array_int_17 
 ****************************************************************/
extern int array_int_17_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_17_string(const char *str, char **endptr);
extern int string_to_array_int_17(const char *str, void *pValue, char **endptr);
extern int is_array_int_17_allow_double_conversion();
extern int array_int_17_to_double(const void *pValue, double *nValue);
extern int get_array_int_17_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_17(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_17_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_17_Utils;

/****************************************************************
 ** array_int_50 
 ****************************************************************/
extern int array_int_50_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_50_string(const char *str, char **endptr);
extern int string_to_array_int_50(const char *str, void *pValue, char **endptr);
extern int is_array_int_50_allow_double_conversion();
extern int array_int_50_to_double(const void *pValue, double *nValue);
extern int get_array_int_50_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_50(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_50_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_50_Utils;

/****************************************************************
 ** struct__155965 
 ****************************************************************/
extern int struct__155965_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155965_string(const char *str, char **endptr);
extern int string_to_struct__155965(const char *str, void *pValue, char **endptr);
extern int is_struct__155965_allow_double_conversion();
extern int struct__155965_to_double(const void *pValue, double *nValue);
extern int get_struct__155965_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155965(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155965_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155965_Utils;

/****************************************************************
 ** struct__155976 
 ****************************************************************/
extern int struct__155976_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155976_string(const char *str, char **endptr);
extern int string_to_struct__155976(const char *str, void *pValue, char **endptr);
extern int is_struct__155976_allow_double_conversion();
extern int struct__155976_to_double(const void *pValue, double *nValue);
extern int get_struct__155976_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155976(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155976_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155976_Utils;

/****************************************************************
 ** struct__155981 
 ****************************************************************/
extern int struct__155981_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155981_string(const char *str, char **endptr);
extern int string_to_struct__155981(const char *str, void *pValue, char **endptr);
extern int is_struct__155981_allow_double_conversion();
extern int struct__155981_to_double(const void *pValue, double *nValue);
extern int get_struct__155981_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155981(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155981_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155981_Utils;

/****************************************************************
 ** struct__155987 
 ****************************************************************/
extern int struct__155987_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155987_string(const char *str, char **endptr);
extern int string_to_struct__155987(const char *str, void *pValue, char **endptr);
extern int is_struct__155987_allow_double_conversion();
extern int struct__155987_to_double(const void *pValue, double *nValue);
extern int get_struct__155987_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155987(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155987_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155987_Utils;

/****************************************************************
 ** struct__155994 
 ****************************************************************/
extern int struct__155994_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__155994_string(const char *str, char **endptr);
extern int string_to_struct__155994(const char *str, void *pValue, char **endptr);
extern int is_struct__155994_allow_double_conversion();
extern int struct__155994_to_double(const void *pValue, double *nValue);
extern int get_struct__155994_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__155994(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__155994_default_value(void *pValue);
extern SimTypeUtils _Type_struct__155994_Utils;

/****************************************************************
 ** struct__156000 
 ****************************************************************/
extern int struct__156000_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156000_string(const char *str, char **endptr);
extern int string_to_struct__156000(const char *str, void *pValue, char **endptr);
extern int is_struct__156000_allow_double_conversion();
extern int struct__156000_to_double(const void *pValue, double *nValue);
extern int get_struct__156000_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156000(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156000_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156000_Utils;

/****************************************************************
 ** struct__156010 
 ****************************************************************/
extern int struct__156010_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156010_string(const char *str, char **endptr);
extern int string_to_struct__156010(const char *str, void *pValue, char **endptr);
extern int is_struct__156010_allow_double_conversion();
extern int struct__156010_to_double(const void *pValue, double *nValue);
extern int get_struct__156010_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156010(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156010_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156010_Utils;

/****************************************************************
 ** struct__156016 
 ****************************************************************/
extern int struct__156016_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156016_string(const char *str, char **endptr);
extern int string_to_struct__156016(const char *str, void *pValue, char **endptr);
extern int is_struct__156016_allow_double_conversion();
extern int struct__156016_to_double(const void *pValue, double *nValue);
extern int get_struct__156016_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156016(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156016_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156016_Utils;

/****************************************************************
 ** struct__156028 
 ****************************************************************/
extern int struct__156028_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156028_string(const char *str, char **endptr);
extern int string_to_struct__156028(const char *str, void *pValue, char **endptr);
extern int is_struct__156028_allow_double_conversion();
extern int struct__156028_to_double(const void *pValue, double *nValue);
extern int get_struct__156028_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156028(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156028_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156028_Utils;

/****************************************************************
 ** struct__156035 
 ****************************************************************/
extern int struct__156035_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156035_string(const char *str, char **endptr);
extern int string_to_struct__156035(const char *str, void *pValue, char **endptr);
extern int is_struct__156035_allow_double_conversion();
extern int struct__156035_to_double(const void *pValue, double *nValue);
extern int get_struct__156035_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156035(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156035_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156035_Utils;

/****************************************************************
 ** struct__156043 
 ****************************************************************/
extern int struct__156043_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156043_string(const char *str, char **endptr);
extern int string_to_struct__156043(const char *str, void *pValue, char **endptr);
extern int is_struct__156043_allow_double_conversion();
extern int struct__156043_to_double(const void *pValue, double *nValue);
extern int get_struct__156043_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156043(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156043_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156043_Utils;

/****************************************************************
 ** struct__156048 
 ****************************************************************/
extern int struct__156048_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156048_string(const char *str, char **endptr);
extern int string_to_struct__156048(const char *str, void *pValue, char **endptr);
extern int is_struct__156048_allow_double_conversion();
extern int struct__156048_to_double(const void *pValue, double *nValue);
extern int get_struct__156048_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156048(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156048_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156048_Utils;

/****************************************************************
 ** struct__156056 
 ****************************************************************/
extern int struct__156056_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156056_string(const char *str, char **endptr);
extern int string_to_struct__156056(const char *str, void *pValue, char **endptr);
extern int is_struct__156056_allow_double_conversion();
extern int struct__156056_to_double(const void *pValue, double *nValue);
extern int get_struct__156056_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156056(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156056_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156056_Utils;

/****************************************************************
 ** struct__156065 
 ****************************************************************/
extern int struct__156065_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156065_string(const char *str, char **endptr);
extern int string_to_struct__156065(const char *str, void *pValue, char **endptr);
extern int is_struct__156065_allow_double_conversion();
extern int struct__156065_to_double(const void *pValue, double *nValue);
extern int get_struct__156065_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156065(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156065_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156065_Utils;

/****************************************************************
 ** struct__156072 
 ****************************************************************/
extern int struct__156072_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156072_string(const char *str, char **endptr);
extern int string_to_struct__156072(const char *str, void *pValue, char **endptr);
extern int is_struct__156072_allow_double_conversion();
extern int struct__156072_to_double(const void *pValue, double *nValue);
extern int get_struct__156072_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156072(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156072_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156072_Utils;

/****************************************************************
 ** struct__156078 
 ****************************************************************/
extern int struct__156078_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156078_string(const char *str, char **endptr);
extern int string_to_struct__156078(const char *str, void *pValue, char **endptr);
extern int is_struct__156078_allow_double_conversion();
extern int struct__156078_to_double(const void *pValue, double *nValue);
extern int get_struct__156078_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156078(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156078_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156078_Utils;

/****************************************************************
 ** struct__156096 
 ****************************************************************/
extern int struct__156096_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156096_string(const char *str, char **endptr);
extern int string_to_struct__156096(const char *str, void *pValue, char **endptr);
extern int is_struct__156096_allow_double_conversion();
extern int struct__156096_to_double(const void *pValue, double *nValue);
extern int get_struct__156096_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156096(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156096_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156096_Utils;

/****************************************************************
 ** struct__156101 
 ****************************************************************/
extern int struct__156101_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156101_string(const char *str, char **endptr);
extern int string_to_struct__156101(const char *str, void *pValue, char **endptr);
extern int is_struct__156101_allow_double_conversion();
extern int struct__156101_to_double(const void *pValue, double *nValue);
extern int get_struct__156101_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156101(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156101_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156101_Utils;

/****************************************************************
 ** struct__156107 
 ****************************************************************/
extern int struct__156107_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156107_string(const char *str, char **endptr);
extern int string_to_struct__156107(const char *str, void *pValue, char **endptr);
extern int is_struct__156107_allow_double_conversion();
extern int struct__156107_to_double(const void *pValue, double *nValue);
extern int get_struct__156107_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156107(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156107_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156107_Utils;

/****************************************************************
 ** struct__156113 
 ****************************************************************/
extern int struct__156113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156113_string(const char *str, char **endptr);
extern int string_to_struct__156113(const char *str, void *pValue, char **endptr);
extern int is_struct__156113_allow_double_conversion();
extern int struct__156113_to_double(const void *pValue, double *nValue);
extern int get_struct__156113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156113_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156113_Utils;

/****************************************************************
 ** struct__156122 
 ****************************************************************/
extern int struct__156122_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156122_string(const char *str, char **endptr);
extern int string_to_struct__156122(const char *str, void *pValue, char **endptr);
extern int is_struct__156122_allow_double_conversion();
extern int struct__156122_to_double(const void *pValue, double *nValue);
extern int get_struct__156122_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156122(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156122_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156122_Utils;

/****************************************************************
 ** struct__156127 
 ****************************************************************/
extern int struct__156127_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156127_string(const char *str, char **endptr);
extern int string_to_struct__156127(const char *str, void *pValue, char **endptr);
extern int is_struct__156127_allow_double_conversion();
extern int struct__156127_to_double(const void *pValue, double *nValue);
extern int get_struct__156127_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156127(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156127_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156127_Utils;

/****************************************************************
 ** struct__156138 
 ****************************************************************/
extern int struct__156138_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156138_string(const char *str, char **endptr);
extern int string_to_struct__156138(const char *str, void *pValue, char **endptr);
extern int is_struct__156138_allow_double_conversion();
extern int struct__156138_to_double(const void *pValue, double *nValue);
extern int get_struct__156138_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156138(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156138_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156138_Utils;

/****************************************************************
 ** struct__156147 
 ****************************************************************/
extern int struct__156147_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156147_string(const char *str, char **endptr);
extern int string_to_struct__156147(const char *str, void *pValue, char **endptr);
extern int is_struct__156147_allow_double_conversion();
extern int struct__156147_to_double(const void *pValue, double *nValue);
extern int get_struct__156147_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156147(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156147_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156147_Utils;

/****************************************************************
 ** struct__156153 
 ****************************************************************/
extern int struct__156153_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156153_string(const char *str, char **endptr);
extern int string_to_struct__156153(const char *str, void *pValue, char **endptr);
extern int is_struct__156153_allow_double_conversion();
extern int struct__156153_to_double(const void *pValue, double *nValue);
extern int get_struct__156153_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156153(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156153_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156153_Utils;

/****************************************************************
 ** struct__156158 
 ****************************************************************/
extern int struct__156158_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156158_string(const char *str, char **endptr);
extern int string_to_struct__156158(const char *str, void *pValue, char **endptr);
extern int is_struct__156158_allow_double_conversion();
extern int struct__156158_to_double(const void *pValue, double *nValue);
extern int get_struct__156158_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156158(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156158_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156158_Utils;

/****************************************************************
 ** struct__156164 
 ****************************************************************/
extern int struct__156164_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156164_string(const char *str, char **endptr);
extern int string_to_struct__156164(const char *str, void *pValue, char **endptr);
extern int is_struct__156164_allow_double_conversion();
extern int struct__156164_to_double(const void *pValue, double *nValue);
extern int get_struct__156164_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156164(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156164_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156164_Utils;

/****************************************************************
 ** struct__156169 
 ****************************************************************/
extern int struct__156169_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156169_string(const char *str, char **endptr);
extern int string_to_struct__156169(const char *str, void *pValue, char **endptr);
extern int is_struct__156169_allow_double_conversion();
extern int struct__156169_to_double(const void *pValue, double *nValue);
extern int get_struct__156169_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156169(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156169_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156169_Utils;

/****************************************************************
 ** struct__156174 
 ****************************************************************/
extern int struct__156174_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156174_string(const char *str, char **endptr);
extern int string_to_struct__156174(const char *str, void *pValue, char **endptr);
extern int is_struct__156174_allow_double_conversion();
extern int struct__156174_to_double(const void *pValue, double *nValue);
extern int get_struct__156174_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156174(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156174_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156174_Utils;

/****************************************************************
 ** struct__156180 
 ****************************************************************/
extern int struct__156180_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156180_string(const char *str, char **endptr);
extern int string_to_struct__156180(const char *str, void *pValue, char **endptr);
extern int is_struct__156180_allow_double_conversion();
extern int struct__156180_to_double(const void *pValue, double *nValue);
extern int get_struct__156180_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156180(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156180_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156180_Utils;

/****************************************************************
 ** struct__156188 
 ****************************************************************/
extern int struct__156188_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156188_string(const char *str, char **endptr);
extern int string_to_struct__156188(const char *str, void *pValue, char **endptr);
extern int is_struct__156188_allow_double_conversion();
extern int struct__156188_to_double(const void *pValue, double *nValue);
extern int get_struct__156188_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156188(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156188_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156188_Utils;

/****************************************************************
 ** struct__156195 
 ****************************************************************/
extern int struct__156195_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156195_string(const char *str, char **endptr);
extern int string_to_struct__156195(const char *str, void *pValue, char **endptr);
extern int is_struct__156195_allow_double_conversion();
extern int struct__156195_to_double(const void *pValue, double *nValue);
extern int get_struct__156195_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156195(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156195_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156195_Utils;

/****************************************************************
 ** struct__156200 
 ****************************************************************/
extern int struct__156200_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156200_string(const char *str, char **endptr);
extern int string_to_struct__156200(const char *str, void *pValue, char **endptr);
extern int is_struct__156200_allow_double_conversion();
extern int struct__156200_to_double(const void *pValue, double *nValue);
extern int get_struct__156200_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156200(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156200_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156200_Utils;

/****************************************************************
 ** struct__156210 
 ****************************************************************/
extern int struct__156210_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156210_string(const char *str, char **endptr);
extern int string_to_struct__156210(const char *str, void *pValue, char **endptr);
extern int is_struct__156210_allow_double_conversion();
extern int struct__156210_to_double(const void *pValue, double *nValue);
extern int get_struct__156210_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156210(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156210_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156210_Utils;

/****************************************************************
 ** struct__156215 
 ****************************************************************/
extern int struct__156215_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156215_string(const char *str, char **endptr);
extern int string_to_struct__156215(const char *str, void *pValue, char **endptr);
extern int is_struct__156215_allow_double_conversion();
extern int struct__156215_to_double(const void *pValue, double *nValue);
extern int get_struct__156215_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156215(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156215_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156215_Utils;

/****************************************************************
 ** struct__156220 
 ****************************************************************/
extern int struct__156220_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156220_string(const char *str, char **endptr);
extern int string_to_struct__156220(const char *str, void *pValue, char **endptr);
extern int is_struct__156220_allow_double_conversion();
extern int struct__156220_to_double(const void *pValue, double *nValue);
extern int get_struct__156220_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156220(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156220_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156220_Utils;

/****************************************************************
 ** array__156225 
 ****************************************************************/
extern int array__156225_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156225_string(const char *str, char **endptr);
extern int string_to_array__156225(const char *str, void *pValue, char **endptr);
extern int is_array__156225_allow_double_conversion();
extern int array__156225_to_double(const void *pValue, double *nValue);
extern int get_array__156225_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156225(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156225_default_value(void *pValue);
extern SimTypeUtils _Type_array__156225_Utils;

/****************************************************************
 ** struct__156228 
 ****************************************************************/
extern int struct__156228_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156228_string(const char *str, char **endptr);
extern int string_to_struct__156228(const char *str, void *pValue, char **endptr);
extern int is_struct__156228_allow_double_conversion();
extern int struct__156228_to_double(const void *pValue, double *nValue);
extern int get_struct__156228_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156228(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156228_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156228_Utils;

/****************************************************************
 ** struct__156233 
 ****************************************************************/
extern int struct__156233_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156233_string(const char *str, char **endptr);
extern int string_to_struct__156233(const char *str, void *pValue, char **endptr);
extern int is_struct__156233_allow_double_conversion();
extern int struct__156233_to_double(const void *pValue, double *nValue);
extern int get_struct__156233_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156233(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156233_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156233_Utils;

/****************************************************************
 ** struct__156240 
 ****************************************************************/
extern int struct__156240_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156240_string(const char *str, char **endptr);
extern int string_to_struct__156240(const char *str, void *pValue, char **endptr);
extern int is_struct__156240_allow_double_conversion();
extern int struct__156240_to_double(const void *pValue, double *nValue);
extern int get_struct__156240_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156240(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156240_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156240_Utils;

/****************************************************************
 ** struct__156253 
 ****************************************************************/
extern int struct__156253_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156253_string(const char *str, char **endptr);
extern int string_to_struct__156253(const char *str, void *pValue, char **endptr);
extern int is_struct__156253_allow_double_conversion();
extern int struct__156253_to_double(const void *pValue, double *nValue);
extern int get_struct__156253_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156253(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156253_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156253_Utils;

/****************************************************************
 ** array_int_311 
 ****************************************************************/
extern int array_int_311_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_311_string(const char *str, char **endptr);
extern int string_to_array_int_311(const char *str, void *pValue, char **endptr);
extern int is_array_int_311_allow_double_conversion();
extern int array_int_311_to_double(const void *pValue, double *nValue);
extern int get_array_int_311_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_311(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_311_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_311_Utils;

/****************************************************************
 ** array_int_999 
 ****************************************************************/
extern int array_int_999_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_999_string(const char *str, char **endptr);
extern int string_to_array_int_999(const char *str, void *pValue, char **endptr);
extern int is_array_int_999_allow_double_conversion();
extern int array_int_999_to_double(const void *pValue, double *nValue);
extern int get_array_int_999_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_999(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_999_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_999_Utils;

/****************************************************************
 ** struct__156273 
 ****************************************************************/
extern int struct__156273_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156273_string(const char *str, char **endptr);
extern int string_to_struct__156273(const char *str, void *pValue, char **endptr);
extern int is_struct__156273_allow_double_conversion();
extern int struct__156273_to_double(const void *pValue, double *nValue);
extern int get_struct__156273_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156273(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156273_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156273_Utils;

/****************************************************************
 ** struct__156281 
 ****************************************************************/
extern int struct__156281_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156281_string(const char *str, char **endptr);
extern int string_to_struct__156281(const char *str, void *pValue, char **endptr);
extern int is_struct__156281_allow_double_conversion();
extern int struct__156281_to_double(const void *pValue, double *nValue);
extern int get_struct__156281_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156281(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156281_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156281_Utils;

/****************************************************************
 ** struct__156299 
 ****************************************************************/
extern int struct__156299_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156299_string(const char *str, char **endptr);
extern int string_to_struct__156299(const char *str, void *pValue, char **endptr);
extern int is_struct__156299_allow_double_conversion();
extern int struct__156299_to_double(const void *pValue, double *nValue);
extern int get_struct__156299_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156299(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156299_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156299_Utils;

/****************************************************************
 ** struct__156309 
 ****************************************************************/
extern int struct__156309_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156309_string(const char *str, char **endptr);
extern int string_to_struct__156309(const char *str, void *pValue, char **endptr);
extern int is_struct__156309_allow_double_conversion();
extern int struct__156309_to_double(const void *pValue, double *nValue);
extern int get_struct__156309_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156309(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156309_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156309_Utils;

/****************************************************************
 ** struct__156315 
 ****************************************************************/
extern int struct__156315_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156315_string(const char *str, char **endptr);
extern int string_to_struct__156315(const char *str, void *pValue, char **endptr);
extern int is_struct__156315_allow_double_conversion();
extern int struct__156315_to_double(const void *pValue, double *nValue);
extern int get_struct__156315_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156315(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156315_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156315_Utils;

/****************************************************************
 ** struct__156327 
 ****************************************************************/
extern int struct__156327_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156327_string(const char *str, char **endptr);
extern int string_to_struct__156327(const char *str, void *pValue, char **endptr);
extern int is_struct__156327_allow_double_conversion();
extern int struct__156327_to_double(const void *pValue, double *nValue);
extern int get_struct__156327_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156327(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156327_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156327_Utils;

/****************************************************************
 ** struct__156337 
 ****************************************************************/
extern int struct__156337_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156337_string(const char *str, char **endptr);
extern int string_to_struct__156337(const char *str, void *pValue, char **endptr);
extern int is_struct__156337_allow_double_conversion();
extern int struct__156337_to_double(const void *pValue, double *nValue);
extern int get_struct__156337_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156337(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156337_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156337_Utils;

/****************************************************************
 ** struct__156344 
 ****************************************************************/
extern int struct__156344_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156344_string(const char *str, char **endptr);
extern int string_to_struct__156344(const char *str, void *pValue, char **endptr);
extern int is_struct__156344_allow_double_conversion();
extern int struct__156344_to_double(const void *pValue, double *nValue);
extern int get_struct__156344_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156344(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156344_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156344_Utils;

/****************************************************************
 ** struct__156350 
 ****************************************************************/
extern int struct__156350_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156350_string(const char *str, char **endptr);
extern int string_to_struct__156350(const char *str, void *pValue, char **endptr);
extern int is_struct__156350_allow_double_conversion();
extern int struct__156350_to_double(const void *pValue, double *nValue);
extern int get_struct__156350_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156350(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156350_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156350_Utils;

/****************************************************************
 ** struct__156358 
 ****************************************************************/
extern int struct__156358_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156358_string(const char *str, char **endptr);
extern int string_to_struct__156358(const char *str, void *pValue, char **endptr);
extern int is_struct__156358_allow_double_conversion();
extern int struct__156358_to_double(const void *pValue, double *nValue);
extern int get_struct__156358_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156358(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156358_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156358_Utils;

/****************************************************************
 ** struct__156365 
 ****************************************************************/
extern int struct__156365_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156365_string(const char *str, char **endptr);
extern int string_to_struct__156365(const char *str, void *pValue, char **endptr);
extern int is_struct__156365_allow_double_conversion();
extern int struct__156365_to_double(const void *pValue, double *nValue);
extern int get_struct__156365_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156365(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156365_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156365_Utils;

/****************************************************************
 ** struct__156370 
 ****************************************************************/
extern int struct__156370_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156370_string(const char *str, char **endptr);
extern int string_to_struct__156370(const char *str, void *pValue, char **endptr);
extern int is_struct__156370_allow_double_conversion();
extern int struct__156370_to_double(const void *pValue, double *nValue);
extern int get_struct__156370_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156370(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156370_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156370_Utils;

/****************************************************************
 ** struct__156394 
 ****************************************************************/
extern int struct__156394_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156394_string(const char *str, char **endptr);
extern int string_to_struct__156394(const char *str, void *pValue, char **endptr);
extern int is_struct__156394_allow_double_conversion();
extern int struct__156394_to_double(const void *pValue, double *nValue);
extern int get_struct__156394_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156394(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156394_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156394_Utils;

/****************************************************************
 ** struct__156401 
 ****************************************************************/
extern int struct__156401_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156401_string(const char *str, char **endptr);
extern int string_to_struct__156401(const char *str, void *pValue, char **endptr);
extern int is_struct__156401_allow_double_conversion();
extern int struct__156401_to_double(const void *pValue, double *nValue);
extern int get_struct__156401_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156401(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156401_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156401_Utils;

/****************************************************************
 ** struct__156411 
 ****************************************************************/
extern int struct__156411_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156411_string(const char *str, char **endptr);
extern int string_to_struct__156411(const char *str, void *pValue, char **endptr);
extern int is_struct__156411_allow_double_conversion();
extern int struct__156411_to_double(const void *pValue, double *nValue);
extern int get_struct__156411_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156411(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156411_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156411_Utils;

/****************************************************************
 ** struct__156419 
 ****************************************************************/
extern int struct__156419_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156419_string(const char *str, char **endptr);
extern int string_to_struct__156419(const char *str, void *pValue, char **endptr);
extern int is_struct__156419_allow_double_conversion();
extern int struct__156419_to_double(const void *pValue, double *nValue);
extern int get_struct__156419_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156419(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156419_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156419_Utils;

/****************************************************************
 ** struct__156432 
 ****************************************************************/
extern int struct__156432_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156432_string(const char *str, char **endptr);
extern int string_to_struct__156432(const char *str, void *pValue, char **endptr);
extern int is_struct__156432_allow_double_conversion();
extern int struct__156432_to_double(const void *pValue, double *nValue);
extern int get_struct__156432_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156432(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156432_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156432_Utils;

/****************************************************************
 ** struct__156439 
 ****************************************************************/
extern int struct__156439_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156439_string(const char *str, char **endptr);
extern int string_to_struct__156439(const char *str, void *pValue, char **endptr);
extern int is_struct__156439_allow_double_conversion();
extern int struct__156439_to_double(const void *pValue, double *nValue);
extern int get_struct__156439_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156439(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156439_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156439_Utils;

/****************************************************************
 ** struct__156447 
 ****************************************************************/
extern int struct__156447_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156447_string(const char *str, char **endptr);
extern int string_to_struct__156447(const char *str, void *pValue, char **endptr);
extern int is_struct__156447_allow_double_conversion();
extern int struct__156447_to_double(const void *pValue, double *nValue);
extern int get_struct__156447_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156447(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156447_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156447_Utils;

/****************************************************************
 ** struct__156461 
 ****************************************************************/
extern int struct__156461_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156461_string(const char *str, char **endptr);
extern int string_to_struct__156461(const char *str, void *pValue, char **endptr);
extern int is_struct__156461_allow_double_conversion();
extern int struct__156461_to_double(const void *pValue, double *nValue);
extern int get_struct__156461_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156461(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156461_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156461_Utils;

/****************************************************************
 ** array__156467 
 ****************************************************************/
extern int array__156467_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156467_string(const char *str, char **endptr);
extern int string_to_array__156467(const char *str, void *pValue, char **endptr);
extern int is_array__156467_allow_double_conversion();
extern int array__156467_to_double(const void *pValue, double *nValue);
extern int get_array__156467_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156467(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156467_default_value(void *pValue);
extern SimTypeUtils _Type_array__156467_Utils;

/****************************************************************
 ** struct__156470 
 ****************************************************************/
extern int struct__156470_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156470_string(const char *str, char **endptr);
extern int string_to_struct__156470(const char *str, void *pValue, char **endptr);
extern int is_struct__156470_allow_double_conversion();
extern int struct__156470_to_double(const void *pValue, double *nValue);
extern int get_struct__156470_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156470(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156470_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156470_Utils;

/****************************************************************
 ** struct__156478 
 ****************************************************************/
extern int struct__156478_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156478_string(const char *str, char **endptr);
extern int string_to_struct__156478(const char *str, void *pValue, char **endptr);
extern int is_struct__156478_allow_double_conversion();
extern int struct__156478_to_double(const void *pValue, double *nValue);
extern int get_struct__156478_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156478(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156478_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156478_Utils;

/****************************************************************
 ** array__156492 
 ****************************************************************/
extern int array__156492_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156492_string(const char *str, char **endptr);
extern int string_to_array__156492(const char *str, void *pValue, char **endptr);
extern int is_array__156492_allow_double_conversion();
extern int array__156492_to_double(const void *pValue, double *nValue);
extern int get_array__156492_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156492(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156492_default_value(void *pValue);
extern SimTypeUtils _Type_array__156492_Utils;

/****************************************************************
 ** struct__156495 
 ****************************************************************/
extern int struct__156495_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156495_string(const char *str, char **endptr);
extern int string_to_struct__156495(const char *str, void *pValue, char **endptr);
extern int is_struct__156495_allow_double_conversion();
extern int struct__156495_to_double(const void *pValue, double *nValue);
extern int get_struct__156495_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156495(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156495_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156495_Utils;

/****************************************************************
 ** struct__156501 
 ****************************************************************/
extern int struct__156501_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156501_string(const char *str, char **endptr);
extern int string_to_struct__156501(const char *str, void *pValue, char **endptr);
extern int is_struct__156501_allow_double_conversion();
extern int struct__156501_to_double(const void *pValue, double *nValue);
extern int get_struct__156501_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156501(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156501_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156501_Utils;

/****************************************************************
 ** struct__156510 
 ****************************************************************/
extern int struct__156510_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156510_string(const char *str, char **endptr);
extern int string_to_struct__156510(const char *str, void *pValue, char **endptr);
extern int is_struct__156510_allow_double_conversion();
extern int struct__156510_to_double(const void *pValue, double *nValue);
extern int get_struct__156510_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156510(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156510_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156510_Utils;

/****************************************************************
 ** array__156522 
 ****************************************************************/
extern int array__156522_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156522_string(const char *str, char **endptr);
extern int string_to_array__156522(const char *str, void *pValue, char **endptr);
extern int is_array__156522_allow_double_conversion();
extern int array__156522_to_double(const void *pValue, double *nValue);
extern int get_array__156522_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156522(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156522_default_value(void *pValue);
extern SimTypeUtils _Type_array__156522_Utils;

/****************************************************************
 ** struct__156525 
 ****************************************************************/
extern int struct__156525_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156525_string(const char *str, char **endptr);
extern int string_to_struct__156525(const char *str, void *pValue, char **endptr);
extern int is_struct__156525_allow_double_conversion();
extern int struct__156525_to_double(const void *pValue, double *nValue);
extern int get_struct__156525_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156525(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156525_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156525_Utils;

/****************************************************************
 ** struct__156534 
 ****************************************************************/
extern int struct__156534_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156534_string(const char *str, char **endptr);
extern int string_to_struct__156534(const char *str, void *pValue, char **endptr);
extern int is_struct__156534_allow_double_conversion();
extern int struct__156534_to_double(const void *pValue, double *nValue);
extern int get_struct__156534_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156534(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156534_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156534_Utils;

/****************************************************************
 ** struct__156545 
 ****************************************************************/
extern int struct__156545_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156545_string(const char *str, char **endptr);
extern int string_to_struct__156545(const char *str, void *pValue, char **endptr);
extern int is_struct__156545_allow_double_conversion();
extern int struct__156545_to_double(const void *pValue, double *nValue);
extern int get_struct__156545_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156545(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156545_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156545_Utils;

/****************************************************************
 ** array_int_9 
 ****************************************************************/
extern int array_int_9_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_9_string(const char *str, char **endptr);
extern int string_to_array_int_9(const char *str, void *pValue, char **endptr);
extern int is_array_int_9_allow_double_conversion();
extern int array_int_9_to_double(const void *pValue, double *nValue);
extern int get_array_int_9_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_9(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_9_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_9_Utils;

/****************************************************************
 ** struct__156558 
 ****************************************************************/
extern int struct__156558_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156558_string(const char *str, char **endptr);
extern int string_to_struct__156558(const char *str, void *pValue, char **endptr);
extern int is_struct__156558_allow_double_conversion();
extern int struct__156558_to_double(const void *pValue, double *nValue);
extern int get_struct__156558_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156558(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156558_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156558_Utils;

/****************************************************************
 ** struct__156568 
 ****************************************************************/
extern int struct__156568_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156568_string(const char *str, char **endptr);
extern int string_to_struct__156568(const char *str, void *pValue, char **endptr);
extern int is_struct__156568_allow_double_conversion();
extern int struct__156568_to_double(const void *pValue, double *nValue);
extern int get_struct__156568_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156568(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156568_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156568_Utils;

/****************************************************************
 ** struct__156588 
 ****************************************************************/
extern int struct__156588_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156588_string(const char *str, char **endptr);
extern int string_to_struct__156588(const char *str, void *pValue, char **endptr);
extern int is_struct__156588_allow_double_conversion();
extern int struct__156588_to_double(const void *pValue, double *nValue);
extern int get_struct__156588_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156588(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156588_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156588_Utils;

/****************************************************************
 ** struct__156594 
 ****************************************************************/
extern int struct__156594_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156594_string(const char *str, char **endptr);
extern int string_to_struct__156594(const char *str, void *pValue, char **endptr);
extern int is_struct__156594_allow_double_conversion();
extern int struct__156594_to_double(const void *pValue, double *nValue);
extern int get_struct__156594_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156594(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156594_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156594_Utils;

/****************************************************************
 ** array__156600 
 ****************************************************************/
extern int array__156600_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156600_string(const char *str, char **endptr);
extern int string_to_array__156600(const char *str, void *pValue, char **endptr);
extern int is_array__156600_allow_double_conversion();
extern int array__156600_to_double(const void *pValue, double *nValue);
extern int get_array__156600_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156600(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156600_default_value(void *pValue);
extern SimTypeUtils _Type_array__156600_Utils;

/****************************************************************
 ** struct__156603 
 ****************************************************************/
extern int struct__156603_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156603_string(const char *str, char **endptr);
extern int string_to_struct__156603(const char *str, void *pValue, char **endptr);
extern int is_struct__156603_allow_double_conversion();
extern int struct__156603_to_double(const void *pValue, double *nValue);
extern int get_struct__156603_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156603(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156603_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156603_Utils;

/****************************************************************
 ** array__156610 
 ****************************************************************/
extern int array__156610_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156610_string(const char *str, char **endptr);
extern int string_to_array__156610(const char *str, void *pValue, char **endptr);
extern int is_array__156610_allow_double_conversion();
extern int array__156610_to_double(const void *pValue, double *nValue);
extern int get_array__156610_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156610(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156610_default_value(void *pValue);
extern SimTypeUtils _Type_array__156610_Utils;

/****************************************************************
 ** struct__156613 
 ****************************************************************/
extern int struct__156613_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156613_string(const char *str, char **endptr);
extern int string_to_struct__156613(const char *str, void *pValue, char **endptr);
extern int is_struct__156613_allow_double_conversion();
extern int struct__156613_to_double(const void *pValue, double *nValue);
extern int get_struct__156613_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156613(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156613_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156613_Utils;

/****************************************************************
 ** array__156625 
 ****************************************************************/
extern int array__156625_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156625_string(const char *str, char **endptr);
extern int string_to_array__156625(const char *str, void *pValue, char **endptr);
extern int is_array__156625_allow_double_conversion();
extern int array__156625_to_double(const void *pValue, double *nValue);
extern int get_array__156625_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156625(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156625_default_value(void *pValue);
extern SimTypeUtils _Type_array__156625_Utils;

/****************************************************************
 ** struct__156628 
 ****************************************************************/
extern int struct__156628_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156628_string(const char *str, char **endptr);
extern int string_to_struct__156628(const char *str, void *pValue, char **endptr);
extern int is_struct__156628_allow_double_conversion();
extern int struct__156628_to_double(const void *pValue, double *nValue);
extern int get_struct__156628_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156628(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156628_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156628_Utils;

/****************************************************************
 ** array__156635 
 ****************************************************************/
extern int array__156635_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156635_string(const char *str, char **endptr);
extern int string_to_array__156635(const char *str, void *pValue, char **endptr);
extern int is_array__156635_allow_double_conversion();
extern int array__156635_to_double(const void *pValue, double *nValue);
extern int get_array__156635_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156635(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156635_default_value(void *pValue);
extern SimTypeUtils _Type_array__156635_Utils;

/****************************************************************
 ** struct__156638 
 ****************************************************************/
extern int struct__156638_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156638_string(const char *str, char **endptr);
extern int string_to_struct__156638(const char *str, void *pValue, char **endptr);
extern int is_struct__156638_allow_double_conversion();
extern int struct__156638_to_double(const void *pValue, double *nValue);
extern int get_struct__156638_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156638(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156638_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156638_Utils;

/****************************************************************
 ** struct__156669 
 ****************************************************************/
extern int struct__156669_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156669_string(const char *str, char **endptr);
extern int string_to_struct__156669(const char *str, void *pValue, char **endptr);
extern int is_struct__156669_allow_double_conversion();
extern int struct__156669_to_double(const void *pValue, double *nValue);
extern int get_struct__156669_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156669(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156669_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156669_Utils;

/****************************************************************
 ** struct__156674 
 ****************************************************************/
extern int struct__156674_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156674_string(const char *str, char **endptr);
extern int string_to_struct__156674(const char *str, void *pValue, char **endptr);
extern int is_struct__156674_allow_double_conversion();
extern int struct__156674_to_double(const void *pValue, double *nValue);
extern int get_struct__156674_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156674(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156674_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156674_Utils;

/****************************************************************
 ** array__156680 
 ****************************************************************/
extern int array__156680_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156680_string(const char *str, char **endptr);
extern int string_to_array__156680(const char *str, void *pValue, char **endptr);
extern int is_array__156680_allow_double_conversion();
extern int array__156680_to_double(const void *pValue, double *nValue);
extern int get_array__156680_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156680(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156680_default_value(void *pValue);
extern SimTypeUtils _Type_array__156680_Utils;

/****************************************************************
 ** struct__156683 
 ****************************************************************/
extern int struct__156683_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156683_string(const char *str, char **endptr);
extern int string_to_struct__156683(const char *str, void *pValue, char **endptr);
extern int is_struct__156683_allow_double_conversion();
extern int struct__156683_to_double(const void *pValue, double *nValue);
extern int get_struct__156683_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156683(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156683_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156683_Utils;

/****************************************************************
 ** array__156690 
 ****************************************************************/
extern int array__156690_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156690_string(const char *str, char **endptr);
extern int string_to_array__156690(const char *str, void *pValue, char **endptr);
extern int is_array__156690_allow_double_conversion();
extern int array__156690_to_double(const void *pValue, double *nValue);
extern int get_array__156690_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156690(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156690_default_value(void *pValue);
extern SimTypeUtils _Type_array__156690_Utils;

/****************************************************************
 ** struct__156693 
 ****************************************************************/
extern int struct__156693_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156693_string(const char *str, char **endptr);
extern int string_to_struct__156693(const char *str, void *pValue, char **endptr);
extern int is_struct__156693_allow_double_conversion();
extern int struct__156693_to_double(const void *pValue, double *nValue);
extern int get_struct__156693_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156693(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156693_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156693_Utils;

/****************************************************************
 ** array__156701 
 ****************************************************************/
extern int array__156701_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156701_string(const char *str, char **endptr);
extern int string_to_array__156701(const char *str, void *pValue, char **endptr);
extern int is_array__156701_allow_double_conversion();
extern int array__156701_to_double(const void *pValue, double *nValue);
extern int get_array__156701_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156701(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156701_default_value(void *pValue);
extern SimTypeUtils _Type_array__156701_Utils;

/****************************************************************
 ** struct__156704 
 ****************************************************************/
extern int struct__156704_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156704_string(const char *str, char **endptr);
extern int string_to_struct__156704(const char *str, void *pValue, char **endptr);
extern int is_struct__156704_allow_double_conversion();
extern int struct__156704_to_double(const void *pValue, double *nValue);
extern int get_struct__156704_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156704(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156704_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156704_Utils;

/****************************************************************
 ** array__156709 
 ****************************************************************/
extern int array__156709_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156709_string(const char *str, char **endptr);
extern int string_to_array__156709(const char *str, void *pValue, char **endptr);
extern int is_array__156709_allow_double_conversion();
extern int array__156709_to_double(const void *pValue, double *nValue);
extern int get_array__156709_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156709(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156709_default_value(void *pValue);
extern SimTypeUtils _Type_array__156709_Utils;

/****************************************************************
 ** struct__156712 
 ****************************************************************/
extern int struct__156712_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156712_string(const char *str, char **endptr);
extern int string_to_struct__156712(const char *str, void *pValue, char **endptr);
extern int is_struct__156712_allow_double_conversion();
extern int struct__156712_to_double(const void *pValue, double *nValue);
extern int get_struct__156712_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156712(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156712_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156712_Utils;

/****************************************************************
 ** struct__156751 
 ****************************************************************/
extern int struct__156751_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156751_string(const char *str, char **endptr);
extern int string_to_struct__156751(const char *str, void *pValue, char **endptr);
extern int is_struct__156751_allow_double_conversion();
extern int struct__156751_to_double(const void *pValue, double *nValue);
extern int get_struct__156751_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156751(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156751_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156751_Utils;

/****************************************************************
 ** array__156762 
 ****************************************************************/
extern int array__156762_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156762_string(const char *str, char **endptr);
extern int string_to_array__156762(const char *str, void *pValue, char **endptr);
extern int is_array__156762_allow_double_conversion();
extern int array__156762_to_double(const void *pValue, double *nValue);
extern int get_array__156762_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156762(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156762_default_value(void *pValue);
extern SimTypeUtils _Type_array__156762_Utils;

/****************************************************************
 ** struct__156765 
 ****************************************************************/
extern int struct__156765_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156765_string(const char *str, char **endptr);
extern int string_to_struct__156765(const char *str, void *pValue, char **endptr);
extern int is_struct__156765_allow_double_conversion();
extern int struct__156765_to_double(const void *pValue, double *nValue);
extern int get_struct__156765_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156765(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156765_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156765_Utils;

/****************************************************************
 ** struct__156774 
 ****************************************************************/
extern int struct__156774_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156774_string(const char *str, char **endptr);
extern int string_to_struct__156774(const char *str, void *pValue, char **endptr);
extern int is_struct__156774_allow_double_conversion();
extern int struct__156774_to_double(const void *pValue, double *nValue);
extern int get_struct__156774_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156774(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156774_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156774_Utils;

/****************************************************************
 ** struct__156780 
 ****************************************************************/
extern int struct__156780_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156780_string(const char *str, char **endptr);
extern int string_to_struct__156780(const char *str, void *pValue, char **endptr);
extern int is_struct__156780_allow_double_conversion();
extern int struct__156780_to_double(const void *pValue, double *nValue);
extern int get_struct__156780_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156780(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156780_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156780_Utils;

/****************************************************************
 ** struct__156789 
 ****************************************************************/
extern int struct__156789_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156789_string(const char *str, char **endptr);
extern int string_to_struct__156789(const char *str, void *pValue, char **endptr);
extern int is_struct__156789_allow_double_conversion();
extern int struct__156789_to_double(const void *pValue, double *nValue);
extern int get_struct__156789_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156789(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156789_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156789_Utils;

/****************************************************************
 ** array__156795 
 ****************************************************************/
extern int array__156795_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156795_string(const char *str, char **endptr);
extern int string_to_array__156795(const char *str, void *pValue, char **endptr);
extern int is_array__156795_allow_double_conversion();
extern int array__156795_to_double(const void *pValue, double *nValue);
extern int get_array__156795_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156795(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156795_default_value(void *pValue);
extern SimTypeUtils _Type_array__156795_Utils;

/****************************************************************
 ** struct__156798 
 ****************************************************************/
extern int struct__156798_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156798_string(const char *str, char **endptr);
extern int string_to_struct__156798(const char *str, void *pValue, char **endptr);
extern int is_struct__156798_allow_double_conversion();
extern int struct__156798_to_double(const void *pValue, double *nValue);
extern int get_struct__156798_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156798(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156798_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156798_Utils;

/****************************************************************
 ** struct__156806 
 ****************************************************************/
extern int struct__156806_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156806_string(const char *str, char **endptr);
extern int string_to_struct__156806(const char *str, void *pValue, char **endptr);
extern int is_struct__156806_allow_double_conversion();
extern int struct__156806_to_double(const void *pValue, double *nValue);
extern int get_struct__156806_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156806(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156806_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156806_Utils;

/****************************************************************
 ** array__156811 
 ****************************************************************/
extern int array__156811_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156811_string(const char *str, char **endptr);
extern int string_to_array__156811(const char *str, void *pValue, char **endptr);
extern int is_array__156811_allow_double_conversion();
extern int array__156811_to_double(const void *pValue, double *nValue);
extern int get_array__156811_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156811(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156811_default_value(void *pValue);
extern SimTypeUtils _Type_array__156811_Utils;

/****************************************************************
 ** struct__156814 
 ****************************************************************/
extern int struct__156814_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156814_string(const char *str, char **endptr);
extern int string_to_struct__156814(const char *str, void *pValue, char **endptr);
extern int is_struct__156814_allow_double_conversion();
extern int struct__156814_to_double(const void *pValue, double *nValue);
extern int get_struct__156814_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156814(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156814_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156814_Utils;

/****************************************************************
 ** struct__156826 
 ****************************************************************/
extern int struct__156826_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156826_string(const char *str, char **endptr);
extern int string_to_struct__156826(const char *str, void *pValue, char **endptr);
extern int is_struct__156826_allow_double_conversion();
extern int struct__156826_to_double(const void *pValue, double *nValue);
extern int get_struct__156826_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156826(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156826_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156826_Utils;

/****************************************************************
 ** struct__156839 
 ****************************************************************/
extern int struct__156839_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156839_string(const char *str, char **endptr);
extern int string_to_struct__156839(const char *str, void *pValue, char **endptr);
extern int is_struct__156839_allow_double_conversion();
extern int struct__156839_to_double(const void *pValue, double *nValue);
extern int get_struct__156839_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156839(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156839_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156839_Utils;

/****************************************************************
 ** array__156848 
 ****************************************************************/
extern int array__156848_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156848_string(const char *str, char **endptr);
extern int string_to_array__156848(const char *str, void *pValue, char **endptr);
extern int is_array__156848_allow_double_conversion();
extern int array__156848_to_double(const void *pValue, double *nValue);
extern int get_array__156848_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156848(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156848_default_value(void *pValue);
extern SimTypeUtils _Type_array__156848_Utils;

/****************************************************************
 ** struct__156851 
 ****************************************************************/
extern int struct__156851_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156851_string(const char *str, char **endptr);
extern int string_to_struct__156851(const char *str, void *pValue, char **endptr);
extern int is_struct__156851_allow_double_conversion();
extern int struct__156851_to_double(const void *pValue, double *nValue);
extern int get_struct__156851_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156851(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156851_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156851_Utils;

/****************************************************************
 ** struct__156856 
 ****************************************************************/
extern int struct__156856_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156856_string(const char *str, char **endptr);
extern int string_to_struct__156856(const char *str, void *pValue, char **endptr);
extern int is_struct__156856_allow_double_conversion();
extern int struct__156856_to_double(const void *pValue, double *nValue);
extern int get_struct__156856_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156856(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156856_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156856_Utils;

/****************************************************************
 ** struct__156862 
 ****************************************************************/
extern int struct__156862_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156862_string(const char *str, char **endptr);
extern int string_to_struct__156862(const char *str, void *pValue, char **endptr);
extern int is_struct__156862_allow_double_conversion();
extern int struct__156862_to_double(const void *pValue, double *nValue);
extern int get_struct__156862_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156862(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156862_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156862_Utils;

/****************************************************************
 ** struct__156880 
 ****************************************************************/
extern int struct__156880_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156880_string(const char *str, char **endptr);
extern int string_to_struct__156880(const char *str, void *pValue, char **endptr);
extern int is_struct__156880_allow_double_conversion();
extern int struct__156880_to_double(const void *pValue, double *nValue);
extern int get_struct__156880_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156880(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156880_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156880_Utils;

/****************************************************************
 ** struct__156885 
 ****************************************************************/
extern int struct__156885_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156885_string(const char *str, char **endptr);
extern int string_to_struct__156885(const char *str, void *pValue, char **endptr);
extern int is_struct__156885_allow_double_conversion();
extern int struct__156885_to_double(const void *pValue, double *nValue);
extern int get_struct__156885_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156885(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156885_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156885_Utils;

/****************************************************************
 ** struct__156893 
 ****************************************************************/
extern int struct__156893_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156893_string(const char *str, char **endptr);
extern int string_to_struct__156893(const char *str, void *pValue, char **endptr);
extern int is_struct__156893_allow_double_conversion();
extern int struct__156893_to_double(const void *pValue, double *nValue);
extern int get_struct__156893_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156893(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156893_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156893_Utils;

/****************************************************************
 ** struct__156901 
 ****************************************************************/
extern int struct__156901_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156901_string(const char *str, char **endptr);
extern int string_to_struct__156901(const char *str, void *pValue, char **endptr);
extern int is_struct__156901_allow_double_conversion();
extern int struct__156901_to_double(const void *pValue, double *nValue);
extern int get_struct__156901_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156901(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156901_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156901_Utils;

/****************************************************************
 ** array_int_6 
 ****************************************************************/
extern int array_int_6_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_6_string(const char *str, char **endptr);
extern int string_to_array_int_6(const char *str, void *pValue, char **endptr);
extern int is_array_int_6_allow_double_conversion();
extern int array_int_6_to_double(const void *pValue, double *nValue);
extern int get_array_int_6_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_6(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_6_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_6_Utils;

/****************************************************************
 ** struct__156913 
 ****************************************************************/
extern int struct__156913_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156913_string(const char *str, char **endptr);
extern int string_to_struct__156913(const char *str, void *pValue, char **endptr);
extern int is_struct__156913_allow_double_conversion();
extern int struct__156913_to_double(const void *pValue, double *nValue);
extern int get_struct__156913_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156913(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156913_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156913_Utils;

/****************************************************************
 ** array__156921 
 ****************************************************************/
extern int array__156921_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156921_string(const char *str, char **endptr);
extern int string_to_array__156921(const char *str, void *pValue, char **endptr);
extern int is_array__156921_allow_double_conversion();
extern int array__156921_to_double(const void *pValue, double *nValue);
extern int get_array__156921_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156921(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156921_default_value(void *pValue);
extern SimTypeUtils _Type_array__156921_Utils;

/****************************************************************
 ** struct__156924 
 ****************************************************************/
extern int struct__156924_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156924_string(const char *str, char **endptr);
extern int string_to_struct__156924(const char *str, void *pValue, char **endptr);
extern int is_struct__156924_allow_double_conversion();
extern int struct__156924_to_double(const void *pValue, double *nValue);
extern int get_struct__156924_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156924(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156924_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156924_Utils;

/****************************************************************
 ** struct__156949 
 ****************************************************************/
extern int struct__156949_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156949_string(const char *str, char **endptr);
extern int string_to_struct__156949(const char *str, void *pValue, char **endptr);
extern int is_struct__156949_allow_double_conversion();
extern int struct__156949_to_double(const void *pValue, double *nValue);
extern int get_struct__156949_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156949(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156949_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156949_Utils;

/****************************************************************
 ** array__156957 
 ****************************************************************/
extern int array__156957_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156957_string(const char *str, char **endptr);
extern int string_to_array__156957(const char *str, void *pValue, char **endptr);
extern int is_array__156957_allow_double_conversion();
extern int array__156957_to_double(const void *pValue, double *nValue);
extern int get_array__156957_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156957(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156957_default_value(void *pValue);
extern SimTypeUtils _Type_array__156957_Utils;

/****************************************************************
 ** struct__156960 
 ****************************************************************/
extern int struct__156960_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156960_string(const char *str, char **endptr);
extern int string_to_struct__156960(const char *str, void *pValue, char **endptr);
extern int is_struct__156960_allow_double_conversion();
extern int struct__156960_to_double(const void *pValue, double *nValue);
extern int get_struct__156960_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156960(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156960_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156960_Utils;

/****************************************************************
 ** array__156967 
 ****************************************************************/
extern int array__156967_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156967_string(const char *str, char **endptr);
extern int string_to_array__156967(const char *str, void *pValue, char **endptr);
extern int is_array__156967_allow_double_conversion();
extern int array__156967_to_double(const void *pValue, double *nValue);
extern int get_array__156967_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156967(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156967_default_value(void *pValue);
extern SimTypeUtils _Type_array__156967_Utils;

/****************************************************************
 ** struct__156970 
 ****************************************************************/
extern int struct__156970_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156970_string(const char *str, char **endptr);
extern int string_to_struct__156970(const char *str, void *pValue, char **endptr);
extern int is_struct__156970_allow_double_conversion();
extern int struct__156970_to_double(const void *pValue, double *nValue);
extern int get_struct__156970_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156970(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156970_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156970_Utils;

/****************************************************************
 ** struct__156978 
 ****************************************************************/
extern int struct__156978_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156978_string(const char *str, char **endptr);
extern int string_to_struct__156978(const char *str, void *pValue, char **endptr);
extern int is_struct__156978_allow_double_conversion();
extern int struct__156978_to_double(const void *pValue, double *nValue);
extern int get_struct__156978_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156978(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156978_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156978_Utils;

/****************************************************************
 ** struct__156988 
 ****************************************************************/
extern int struct__156988_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156988_string(const char *str, char **endptr);
extern int string_to_struct__156988(const char *str, void *pValue, char **endptr);
extern int is_struct__156988_allow_double_conversion();
extern int struct__156988_to_double(const void *pValue, double *nValue);
extern int get_struct__156988_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156988(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156988_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156988_Utils;

/****************************************************************
 ** struct__156994 
 ****************************************************************/
extern int struct__156994_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__156994_string(const char *str, char **endptr);
extern int string_to_struct__156994(const char *str, void *pValue, char **endptr);
extern int is_struct__156994_allow_double_conversion();
extern int struct__156994_to_double(const void *pValue, double *nValue);
extern int get_struct__156994_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__156994(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__156994_default_value(void *pValue);
extern SimTypeUtils _Type_struct__156994_Utils;

/****************************************************************
 ** array__156999 
 ****************************************************************/
extern int array__156999_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__156999_string(const char *str, char **endptr);
extern int string_to_array__156999(const char *str, void *pValue, char **endptr);
extern int is_array__156999_allow_double_conversion();
extern int array__156999_to_double(const void *pValue, double *nValue);
extern int get_array__156999_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__156999(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__156999_default_value(void *pValue);
extern SimTypeUtils _Type_array__156999_Utils;

/****************************************************************
 ** struct__157002 
 ****************************************************************/
extern int struct__157002_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157002_string(const char *str, char **endptr);
extern int string_to_struct__157002(const char *str, void *pValue, char **endptr);
extern int is_struct__157002_allow_double_conversion();
extern int struct__157002_to_double(const void *pValue, double *nValue);
extern int get_struct__157002_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157002(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157002_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157002_Utils;

/****************************************************************
 ** struct__157007 
 ****************************************************************/
extern int struct__157007_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157007_string(const char *str, char **endptr);
extern int string_to_struct__157007(const char *str, void *pValue, char **endptr);
extern int is_struct__157007_allow_double_conversion();
extern int struct__157007_to_double(const void *pValue, double *nValue);
extern int get_struct__157007_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157007(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157007_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157007_Utils;

/****************************************************************
 ** array__157014 
 ****************************************************************/
extern int array__157014_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157014_string(const char *str, char **endptr);
extern int string_to_array__157014(const char *str, void *pValue, char **endptr);
extern int is_array__157014_allow_double_conversion();
extern int array__157014_to_double(const void *pValue, double *nValue);
extern int get_array__157014_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157014(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157014_default_value(void *pValue);
extern SimTypeUtils _Type_array__157014_Utils;

/****************************************************************
 ** struct__157017 
 ****************************************************************/
extern int struct__157017_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157017_string(const char *str, char **endptr);
extern int string_to_struct__157017(const char *str, void *pValue, char **endptr);
extern int is_struct__157017_allow_double_conversion();
extern int struct__157017_to_double(const void *pValue, double *nValue);
extern int get_struct__157017_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157017(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157017_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157017_Utils;

/****************************************************************
 ** struct__157022 
 ****************************************************************/
extern int struct__157022_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157022_string(const char *str, char **endptr);
extern int string_to_struct__157022(const char *str, void *pValue, char **endptr);
extern int is_struct__157022_allow_double_conversion();
extern int struct__157022_to_double(const void *pValue, double *nValue);
extern int get_struct__157022_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157022(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157022_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157022_Utils;

/****************************************************************
 ** array__157030 
 ****************************************************************/
extern int array__157030_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157030_string(const char *str, char **endptr);
extern int string_to_array__157030(const char *str, void *pValue, char **endptr);
extern int is_array__157030_allow_double_conversion();
extern int array__157030_to_double(const void *pValue, double *nValue);
extern int get_array__157030_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157030(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157030_default_value(void *pValue);
extern SimTypeUtils _Type_array__157030_Utils;

/****************************************************************
 ** struct__157033 
 ****************************************************************/
extern int struct__157033_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157033_string(const char *str, char **endptr);
extern int string_to_struct__157033(const char *str, void *pValue, char **endptr);
extern int is_struct__157033_allow_double_conversion();
extern int struct__157033_to_double(const void *pValue, double *nValue);
extern int get_struct__157033_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157033(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157033_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157033_Utils;

/****************************************************************
 ** struct__157038 
 ****************************************************************/
extern int struct__157038_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157038_string(const char *str, char **endptr);
extern int string_to_struct__157038(const char *str, void *pValue, char **endptr);
extern int is_struct__157038_allow_double_conversion();
extern int struct__157038_to_double(const void *pValue, double *nValue);
extern int get_struct__157038_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157038(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157038_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157038_Utils;

/****************************************************************
 ** array__157066 
 ****************************************************************/
extern int array__157066_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157066_string(const char *str, char **endptr);
extern int string_to_array__157066(const char *str, void *pValue, char **endptr);
extern int is_array__157066_allow_double_conversion();
extern int array__157066_to_double(const void *pValue, double *nValue);
extern int get_array__157066_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157066(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157066_default_value(void *pValue);
extern SimTypeUtils _Type_array__157066_Utils;

/****************************************************************
 ** struct__157069 
 ****************************************************************/
extern int struct__157069_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157069_string(const char *str, char **endptr);
extern int string_to_struct__157069(const char *str, void *pValue, char **endptr);
extern int is_struct__157069_allow_double_conversion();
extern int struct__157069_to_double(const void *pValue, double *nValue);
extern int get_struct__157069_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157069(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157069_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157069_Utils;

/****************************************************************
 ** array__157081 
 ****************************************************************/
extern int array__157081_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157081_string(const char *str, char **endptr);
extern int string_to_array__157081(const char *str, void *pValue, char **endptr);
extern int is_array__157081_allow_double_conversion();
extern int array__157081_to_double(const void *pValue, double *nValue);
extern int get_array__157081_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157081(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157081_default_value(void *pValue);
extern SimTypeUtils _Type_array__157081_Utils;

/****************************************************************
 ** struct__157084 
 ****************************************************************/
extern int struct__157084_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157084_string(const char *str, char **endptr);
extern int string_to_struct__157084(const char *str, void *pValue, char **endptr);
extern int is_struct__157084_allow_double_conversion();
extern int struct__157084_to_double(const void *pValue, double *nValue);
extern int get_struct__157084_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157084(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157084_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157084_Utils;

/****************************************************************
 ** array__157092 
 ****************************************************************/
extern int array__157092_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157092_string(const char *str, char **endptr);
extern int string_to_array__157092(const char *str, void *pValue, char **endptr);
extern int is_array__157092_allow_double_conversion();
extern int array__157092_to_double(const void *pValue, double *nValue);
extern int get_array__157092_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157092(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157092_default_value(void *pValue);
extern SimTypeUtils _Type_array__157092_Utils;

/****************************************************************
 ** struct__157095 
 ****************************************************************/
extern int struct__157095_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157095_string(const char *str, char **endptr);
extern int string_to_struct__157095(const char *str, void *pValue, char **endptr);
extern int is_struct__157095_allow_double_conversion();
extern int struct__157095_to_double(const void *pValue, double *nValue);
extern int get_struct__157095_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157095(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157095_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157095_Utils;

/****************************************************************
 ** array__157104 
 ****************************************************************/
extern int array__157104_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157104_string(const char *str, char **endptr);
extern int string_to_array__157104(const char *str, void *pValue, char **endptr);
extern int is_array__157104_allow_double_conversion();
extern int array__157104_to_double(const void *pValue, double *nValue);
extern int get_array__157104_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157104(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157104_default_value(void *pValue);
extern SimTypeUtils _Type_array__157104_Utils;

/****************************************************************
 ** struct__157107 
 ****************************************************************/
extern int struct__157107_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157107_string(const char *str, char **endptr);
extern int string_to_struct__157107(const char *str, void *pValue, char **endptr);
extern int is_struct__157107_allow_double_conversion();
extern int struct__157107_to_double(const void *pValue, double *nValue);
extern int get_struct__157107_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157107(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157107_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157107_Utils;

/****************************************************************
 ** struct__157115 
 ****************************************************************/
extern int struct__157115_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157115_string(const char *str, char **endptr);
extern int string_to_struct__157115(const char *str, void *pValue, char **endptr);
extern int is_struct__157115_allow_double_conversion();
extern int struct__157115_to_double(const void *pValue, double *nValue);
extern int get_struct__157115_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157115(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157115_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157115_Utils;

/****************************************************************
 ** array__157142 
 ****************************************************************/
extern int array__157142_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157142_string(const char *str, char **endptr);
extern int string_to_array__157142(const char *str, void *pValue, char **endptr);
extern int is_array__157142_allow_double_conversion();
extern int array__157142_to_double(const void *pValue, double *nValue);
extern int get_array__157142_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157142(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157142_default_value(void *pValue);
extern SimTypeUtils _Type_array__157142_Utils;

/****************************************************************
 ** struct__157145 
 ****************************************************************/
extern int struct__157145_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157145_string(const char *str, char **endptr);
extern int string_to_struct__157145(const char *str, void *pValue, char **endptr);
extern int is_struct__157145_allow_double_conversion();
extern int struct__157145_to_double(const void *pValue, double *nValue);
extern int get_struct__157145_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157145(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157145_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157145_Utils;

/****************************************************************
 ** struct__157153 
 ****************************************************************/
extern int struct__157153_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157153_string(const char *str, char **endptr);
extern int string_to_struct__157153(const char *str, void *pValue, char **endptr);
extern int is_struct__157153_allow_double_conversion();
extern int struct__157153_to_double(const void *pValue, double *nValue);
extern int get_struct__157153_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157153(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157153_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157153_Utils;

/****************************************************************
 ** struct__157159 
 ****************************************************************/
extern int struct__157159_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157159_string(const char *str, char **endptr);
extern int string_to_struct__157159(const char *str, void *pValue, char **endptr);
extern int is_struct__157159_allow_double_conversion();
extern int struct__157159_to_double(const void *pValue, double *nValue);
extern int get_struct__157159_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157159(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157159_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157159_Utils;

/****************************************************************
 ** array__157165 
 ****************************************************************/
extern int array__157165_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157165_string(const char *str, char **endptr);
extern int string_to_array__157165(const char *str, void *pValue, char **endptr);
extern int is_array__157165_allow_double_conversion();
extern int array__157165_to_double(const void *pValue, double *nValue);
extern int get_array__157165_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157165(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157165_default_value(void *pValue);
extern SimTypeUtils _Type_array__157165_Utils;

/****************************************************************
 ** struct__157168 
 ****************************************************************/
extern int struct__157168_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157168_string(const char *str, char **endptr);
extern int string_to_struct__157168(const char *str, void *pValue, char **endptr);
extern int is_struct__157168_allow_double_conversion();
extern int struct__157168_to_double(const void *pValue, double *nValue);
extern int get_struct__157168_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157168(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157168_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157168_Utils;

/****************************************************************
 ** array__157177 
 ****************************************************************/
extern int array__157177_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157177_string(const char *str, char **endptr);
extern int string_to_array__157177(const char *str, void *pValue, char **endptr);
extern int is_array__157177_allow_double_conversion();
extern int array__157177_to_double(const void *pValue, double *nValue);
extern int get_array__157177_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157177(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157177_default_value(void *pValue);
extern SimTypeUtils _Type_array__157177_Utils;

/****************************************************************
 ** struct__157180 
 ****************************************************************/
extern int struct__157180_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157180_string(const char *str, char **endptr);
extern int string_to_struct__157180(const char *str, void *pValue, char **endptr);
extern int is_struct__157180_allow_double_conversion();
extern int struct__157180_to_double(const void *pValue, double *nValue);
extern int get_struct__157180_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157180(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157180_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157180_Utils;

/****************************************************************
 ** struct__157187 
 ****************************************************************/
extern int struct__157187_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157187_string(const char *str, char **endptr);
extern int string_to_struct__157187(const char *str, void *pValue, char **endptr);
extern int is_struct__157187_allow_double_conversion();
extern int struct__157187_to_double(const void *pValue, double *nValue);
extern int get_struct__157187_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157187(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157187_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157187_Utils;

/****************************************************************
 ** array__157195 
 ****************************************************************/
extern int array__157195_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157195_string(const char *str, char **endptr);
extern int string_to_array__157195(const char *str, void *pValue, char **endptr);
extern int is_array__157195_allow_double_conversion();
extern int array__157195_to_double(const void *pValue, double *nValue);
extern int get_array__157195_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157195(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157195_default_value(void *pValue);
extern SimTypeUtils _Type_array__157195_Utils;

/****************************************************************
 ** struct__157198 
 ****************************************************************/
extern int struct__157198_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157198_string(const char *str, char **endptr);
extern int string_to_struct__157198(const char *str, void *pValue, char **endptr);
extern int is_struct__157198_allow_double_conversion();
extern int struct__157198_to_double(const void *pValue, double *nValue);
extern int get_struct__157198_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157198(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157198_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157198_Utils;

/****************************************************************
 ** array__157206 
 ****************************************************************/
extern int array__157206_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157206_string(const char *str, char **endptr);
extern int string_to_array__157206(const char *str, void *pValue, char **endptr);
extern int is_array__157206_allow_double_conversion();
extern int array__157206_to_double(const void *pValue, double *nValue);
extern int get_array__157206_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157206(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157206_default_value(void *pValue);
extern SimTypeUtils _Type_array__157206_Utils;

/****************************************************************
 ** struct__157209 
 ****************************************************************/
extern int struct__157209_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157209_string(const char *str, char **endptr);
extern int string_to_struct__157209(const char *str, void *pValue, char **endptr);
extern int is_struct__157209_allow_double_conversion();
extern int struct__157209_to_double(const void *pValue, double *nValue);
extern int get_struct__157209_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157209(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157209_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157209_Utils;

/****************************************************************
 ** struct__157220 
 ****************************************************************/
extern int struct__157220_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157220_string(const char *str, char **endptr);
extern int string_to_struct__157220(const char *str, void *pValue, char **endptr);
extern int is_struct__157220_allow_double_conversion();
extern int struct__157220_to_double(const void *pValue, double *nValue);
extern int get_struct__157220_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157220(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157220_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157220_Utils;

/****************************************************************
 ** struct__157226 
 ****************************************************************/
extern int struct__157226_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157226_string(const char *str, char **endptr);
extern int string_to_struct__157226(const char *str, void *pValue, char **endptr);
extern int is_struct__157226_allow_double_conversion();
extern int struct__157226_to_double(const void *pValue, double *nValue);
extern int get_struct__157226_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157226(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157226_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157226_Utils;

/****************************************************************
 ** array__157236 
 ****************************************************************/
extern int array__157236_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157236_string(const char *str, char **endptr);
extern int string_to_array__157236(const char *str, void *pValue, char **endptr);
extern int is_array__157236_allow_double_conversion();
extern int array__157236_to_double(const void *pValue, double *nValue);
extern int get_array__157236_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157236(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157236_default_value(void *pValue);
extern SimTypeUtils _Type_array__157236_Utils;

/****************************************************************
 ** struct__157239 
 ****************************************************************/
extern int struct__157239_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157239_string(const char *str, char **endptr);
extern int string_to_struct__157239(const char *str, void *pValue, char **endptr);
extern int is_struct__157239_allow_double_conversion();
extern int struct__157239_to_double(const void *pValue, double *nValue);
extern int get_struct__157239_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157239(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157239_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157239_Utils;

/****************************************************************
 ** array__157246 
 ****************************************************************/
extern int array__157246_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157246_string(const char *str, char **endptr);
extern int string_to_array__157246(const char *str, void *pValue, char **endptr);
extern int is_array__157246_allow_double_conversion();
extern int array__157246_to_double(const void *pValue, double *nValue);
extern int get_array__157246_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157246(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157246_default_value(void *pValue);
extern SimTypeUtils _Type_array__157246_Utils;

/****************************************************************
 ** struct__157249 
 ****************************************************************/
extern int struct__157249_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157249_string(const char *str, char **endptr);
extern int string_to_struct__157249(const char *str, void *pValue, char **endptr);
extern int is_struct__157249_allow_double_conversion();
extern int struct__157249_to_double(const void *pValue, double *nValue);
extern int get_struct__157249_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157249(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157249_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157249_Utils;

/****************************************************************
 ** struct__157258 
 ****************************************************************/
extern int struct__157258_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157258_string(const char *str, char **endptr);
extern int string_to_struct__157258(const char *str, void *pValue, char **endptr);
extern int is_struct__157258_allow_double_conversion();
extern int struct__157258_to_double(const void *pValue, double *nValue);
extern int get_struct__157258_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157258(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157258_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157258_Utils;

/****************************************************************
 ** array__157265 
 ****************************************************************/
extern int array__157265_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157265_string(const char *str, char **endptr);
extern int string_to_array__157265(const char *str, void *pValue, char **endptr);
extern int is_array__157265_allow_double_conversion();
extern int array__157265_to_double(const void *pValue, double *nValue);
extern int get_array__157265_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157265(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157265_default_value(void *pValue);
extern SimTypeUtils _Type_array__157265_Utils;

/****************************************************************
 ** struct__157268 
 ****************************************************************/
extern int struct__157268_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157268_string(const char *str, char **endptr);
extern int string_to_struct__157268(const char *str, void *pValue, char **endptr);
extern int is_struct__157268_allow_double_conversion();
extern int struct__157268_to_double(const void *pValue, double *nValue);
extern int get_struct__157268_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157268(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157268_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157268_Utils;

/****************************************************************
 ** array__157274 
 ****************************************************************/
extern int array__157274_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157274_string(const char *str, char **endptr);
extern int string_to_array__157274(const char *str, void *pValue, char **endptr);
extern int is_array__157274_allow_double_conversion();
extern int array__157274_to_double(const void *pValue, double *nValue);
extern int get_array__157274_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157274(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157274_default_value(void *pValue);
extern SimTypeUtils _Type_array__157274_Utils;

/****************************************************************
 ** struct__157277 
 ****************************************************************/
extern int struct__157277_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157277_string(const char *str, char **endptr);
extern int string_to_struct__157277(const char *str, void *pValue, char **endptr);
extern int is_struct__157277_allow_double_conversion();
extern int struct__157277_to_double(const void *pValue, double *nValue);
extern int get_struct__157277_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157277(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157277_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157277_Utils;

/****************************************************************
 ** struct__157284 
 ****************************************************************/
extern int struct__157284_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157284_string(const char *str, char **endptr);
extern int string_to_struct__157284(const char *str, void *pValue, char **endptr);
extern int is_struct__157284_allow_double_conversion();
extern int struct__157284_to_double(const void *pValue, double *nValue);
extern int get_struct__157284_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157284(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157284_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157284_Utils;

/****************************************************************
 ** struct__157310 
 ****************************************************************/
extern int struct__157310_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157310_string(const char *str, char **endptr);
extern int string_to_struct__157310(const char *str, void *pValue, char **endptr);
extern int is_struct__157310_allow_double_conversion();
extern int struct__157310_to_double(const void *pValue, double *nValue);
extern int get_struct__157310_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157310(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157310_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157310_Utils;

/****************************************************************
 ** struct__157319 
 ****************************************************************/
extern int struct__157319_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157319_string(const char *str, char **endptr);
extern int string_to_struct__157319(const char *str, void *pValue, char **endptr);
extern int is_struct__157319_allow_double_conversion();
extern int struct__157319_to_double(const void *pValue, double *nValue);
extern int get_struct__157319_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157319(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157319_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157319_Utils;

/****************************************************************
 ** struct__157336 
 ****************************************************************/
extern int struct__157336_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157336_string(const char *str, char **endptr);
extern int string_to_struct__157336(const char *str, void *pValue, char **endptr);
extern int is_struct__157336_allow_double_conversion();
extern int struct__157336_to_double(const void *pValue, double *nValue);
extern int get_struct__157336_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157336(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157336_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157336_Utils;

/****************************************************************
 ** array__157343 
 ****************************************************************/
extern int array__157343_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157343_string(const char *str, char **endptr);
extern int string_to_array__157343(const char *str, void *pValue, char **endptr);
extern int is_array__157343_allow_double_conversion();
extern int array__157343_to_double(const void *pValue, double *nValue);
extern int get_array__157343_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157343(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157343_default_value(void *pValue);
extern SimTypeUtils _Type_array__157343_Utils;

/****************************************************************
 ** array__157346 
 ****************************************************************/
extern int array__157346_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157346_string(const char *str, char **endptr);
extern int string_to_array__157346(const char *str, void *pValue, char **endptr);
extern int is_array__157346_allow_double_conversion();
extern int array__157346_to_double(const void *pValue, double *nValue);
extern int get_array__157346_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157346(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157346_default_value(void *pValue);
extern SimTypeUtils _Type_array__157346_Utils;

/****************************************************************
 ** struct__157349 
 ****************************************************************/
extern int struct__157349_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157349_string(const char *str, char **endptr);
extern int string_to_struct__157349(const char *str, void *pValue, char **endptr);
extern int is_struct__157349_allow_double_conversion();
extern int struct__157349_to_double(const void *pValue, double *nValue);
extern int get_struct__157349_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157349(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157349_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157349_Utils;

/****************************************************************
 ** array_int_24 
 ****************************************************************/
extern int array_int_24_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_24_string(const char *str, char **endptr);
extern int string_to_array_int_24(const char *str, void *pValue, char **endptr);
extern int is_array_int_24_allow_double_conversion();
extern int array_int_24_to_double(const void *pValue, double *nValue);
extern int get_array_int_24_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_24(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_24_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_24_Utils;

/****************************************************************
 ** struct__157379 
 ****************************************************************/
extern int struct__157379_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157379_string(const char *str, char **endptr);
extern int string_to_struct__157379(const char *str, void *pValue, char **endptr);
extern int is_struct__157379_allow_double_conversion();
extern int struct__157379_to_double(const void *pValue, double *nValue);
extern int get_struct__157379_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157379(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157379_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157379_Utils;

/****************************************************************
 ** array__157384 
 ****************************************************************/
extern int array__157384_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157384_string(const char *str, char **endptr);
extern int string_to_array__157384(const char *str, void *pValue, char **endptr);
extern int is_array__157384_allow_double_conversion();
extern int array__157384_to_double(const void *pValue, double *nValue);
extern int get_array__157384_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157384(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157384_default_value(void *pValue);
extern SimTypeUtils _Type_array__157384_Utils;

/****************************************************************
 ** array__157387 
 ****************************************************************/
extern int array__157387_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157387_string(const char *str, char **endptr);
extern int string_to_array__157387(const char *str, void *pValue, char **endptr);
extern int is_array__157387_allow_double_conversion();
extern int array__157387_to_double(const void *pValue, double *nValue);
extern int get_array__157387_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157387(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157387_default_value(void *pValue);
extern SimTypeUtils _Type_array__157387_Utils;

/****************************************************************
 ** struct__157390 
 ****************************************************************/
extern int struct__157390_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157390_string(const char *str, char **endptr);
extern int string_to_struct__157390(const char *str, void *pValue, char **endptr);
extern int is_struct__157390_allow_double_conversion();
extern int struct__157390_to_double(const void *pValue, double *nValue);
extern int get_struct__157390_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157390(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157390_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157390_Utils;

/****************************************************************
 ** struct__157395 
 ****************************************************************/
extern int struct__157395_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157395_string(const char *str, char **endptr);
extern int string_to_struct__157395(const char *str, void *pValue, char **endptr);
extern int is_struct__157395_allow_double_conversion();
extern int struct__157395_to_double(const void *pValue, double *nValue);
extern int get_struct__157395_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157395(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157395_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157395_Utils;

/****************************************************************
 ** struct__157450 
 ****************************************************************/
extern int struct__157450_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157450_string(const char *str, char **endptr);
extern int string_to_struct__157450(const char *str, void *pValue, char **endptr);
extern int is_struct__157450_allow_double_conversion();
extern int struct__157450_to_double(const void *pValue, double *nValue);
extern int get_struct__157450_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157450(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157450_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157450_Utils;

/****************************************************************
 ** struct__157459 
 ****************************************************************/
extern int struct__157459_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157459_string(const char *str, char **endptr);
extern int string_to_struct__157459(const char *str, void *pValue, char **endptr);
extern int is_struct__157459_allow_double_conversion();
extern int struct__157459_to_double(const void *pValue, double *nValue);
extern int get_struct__157459_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157459(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157459_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157459_Utils;

/****************************************************************
 ** struct__157468 
 ****************************************************************/
extern int struct__157468_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157468_string(const char *str, char **endptr);
extern int string_to_struct__157468(const char *str, void *pValue, char **endptr);
extern int is_struct__157468_allow_double_conversion();
extern int struct__157468_to_double(const void *pValue, double *nValue);
extern int get_struct__157468_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157468(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157468_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157468_Utils;

/****************************************************************
 ** struct__157475 
 ****************************************************************/
extern int struct__157475_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157475_string(const char *str, char **endptr);
extern int string_to_struct__157475(const char *str, void *pValue, char **endptr);
extern int is_struct__157475_allow_double_conversion();
extern int struct__157475_to_double(const void *pValue, double *nValue);
extern int get_struct__157475_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157475(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157475_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157475_Utils;

/****************************************************************
 ** struct__157484 
 ****************************************************************/
extern int struct__157484_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157484_string(const char *str, char **endptr);
extern int string_to_struct__157484(const char *str, void *pValue, char **endptr);
extern int is_struct__157484_allow_double_conversion();
extern int struct__157484_to_double(const void *pValue, double *nValue);
extern int get_struct__157484_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157484(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157484_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157484_Utils;

/****************************************************************
 ** struct__157492 
 ****************************************************************/
extern int struct__157492_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157492_string(const char *str, char **endptr);
extern int string_to_struct__157492(const char *str, void *pValue, char **endptr);
extern int is_struct__157492_allow_double_conversion();
extern int struct__157492_to_double(const void *pValue, double *nValue);
extern int get_struct__157492_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157492(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157492_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157492_Utils;

/****************************************************************
 ** struct__157502 
 ****************************************************************/
extern int struct__157502_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157502_string(const char *str, char **endptr);
extern int string_to_struct__157502(const char *str, void *pValue, char **endptr);
extern int is_struct__157502_allow_double_conversion();
extern int struct__157502_to_double(const void *pValue, double *nValue);
extern int get_struct__157502_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157502(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157502_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157502_Utils;

/****************************************************************
 ** struct__157514 
 ****************************************************************/
extern int struct__157514_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157514_string(const char *str, char **endptr);
extern int string_to_struct__157514(const char *str, void *pValue, char **endptr);
extern int is_struct__157514_allow_double_conversion();
extern int struct__157514_to_double(const void *pValue, double *nValue);
extern int get_struct__157514_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157514(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157514_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157514_Utils;

/****************************************************************
 ** struct__157520 
 ****************************************************************/
extern int struct__157520_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157520_string(const char *str, char **endptr);
extern int string_to_struct__157520(const char *str, void *pValue, char **endptr);
extern int is_struct__157520_allow_double_conversion();
extern int struct__157520_to_double(const void *pValue, double *nValue);
extern int get_struct__157520_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157520(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157520_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157520_Utils;

/****************************************************************
 ** array_int_2_4 
 ****************************************************************/
extern int array_int_2_4_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_4_string(const char *str, char **endptr);
extern int string_to_array_int_2_4(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_4_allow_double_conversion();
extern int array_int_2_4_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_4_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2_4(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_4_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_4_Utils;

/****************************************************************
 ** struct__157532 
 ****************************************************************/
extern int struct__157532_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157532_string(const char *str, char **endptr);
extern int string_to_struct__157532(const char *str, void *pValue, char **endptr);
extern int is_struct__157532_allow_double_conversion();
extern int struct__157532_to_double(const void *pValue, double *nValue);
extern int get_struct__157532_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157532(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157532_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157532_Utils;

/****************************************************************
 ** struct__157538 
 ****************************************************************/
extern int struct__157538_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157538_string(const char *str, char **endptr);
extern int string_to_struct__157538(const char *str, void *pValue, char **endptr);
extern int is_struct__157538_allow_double_conversion();
extern int struct__157538_to_double(const void *pValue, double *nValue);
extern int get_struct__157538_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157538(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157538_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157538_Utils;

/****************************************************************
 ** array__157545 
 ****************************************************************/
extern int array__157545_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157545_string(const char *str, char **endptr);
extern int string_to_array__157545(const char *str, void *pValue, char **endptr);
extern int is_array__157545_allow_double_conversion();
extern int array__157545_to_double(const void *pValue, double *nValue);
extern int get_array__157545_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157545(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157545_default_value(void *pValue);
extern SimTypeUtils _Type_array__157545_Utils;

/****************************************************************
 ** array_int_1 
 ****************************************************************/
extern int array_int_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_1_string(const char *str, char **endptr);
extern int string_to_array_int_1(const char *str, void *pValue, char **endptr);
extern int is_array_int_1_allow_double_conversion();
extern int array_int_1_to_double(const void *pValue, double *nValue);
extern int get_array_int_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_1_Utils;

/****************************************************************
 ** struct__157551 
 ****************************************************************/
extern int struct__157551_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157551_string(const char *str, char **endptr);
extern int string_to_struct__157551(const char *str, void *pValue, char **endptr);
extern int is_struct__157551_allow_double_conversion();
extern int struct__157551_to_double(const void *pValue, double *nValue);
extern int get_struct__157551_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157551(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157551_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157551_Utils;

/****************************************************************
 ** struct__157559 
 ****************************************************************/
extern int struct__157559_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157559_string(const char *str, char **endptr);
extern int string_to_struct__157559(const char *str, void *pValue, char **endptr);
extern int is_struct__157559_allow_double_conversion();
extern int struct__157559_to_double(const void *pValue, double *nValue);
extern int get_struct__157559_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157559(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157559_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157559_Utils;

/****************************************************************
 ** struct__157564 
 ****************************************************************/
extern int struct__157564_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157564_string(const char *str, char **endptr);
extern int string_to_struct__157564(const char *str, void *pValue, char **endptr);
extern int is_struct__157564_allow_double_conversion();
extern int struct__157564_to_double(const void *pValue, double *nValue);
extern int get_struct__157564_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157564(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157564_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157564_Utils;

/****************************************************************
 ** struct__157570 
 ****************************************************************/
extern int struct__157570_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157570_string(const char *str, char **endptr);
extern int string_to_struct__157570(const char *str, void *pValue, char **endptr);
extern int is_struct__157570_allow_double_conversion();
extern int struct__157570_to_double(const void *pValue, double *nValue);
extern int get_struct__157570_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157570(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157570_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157570_Utils;

/****************************************************************
 ** struct__157575 
 ****************************************************************/
extern int struct__157575_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157575_string(const char *str, char **endptr);
extern int string_to_struct__157575(const char *str, void *pValue, char **endptr);
extern int is_struct__157575_allow_double_conversion();
extern int struct__157575_to_double(const void *pValue, double *nValue);
extern int get_struct__157575_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157575(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157575_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157575_Utils;

/****************************************************************
 ** array__157581 
 ****************************************************************/
extern int array__157581_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157581_string(const char *str, char **endptr);
extern int string_to_array__157581(const char *str, void *pValue, char **endptr);
extern int is_array__157581_allow_double_conversion();
extern int array__157581_to_double(const void *pValue, double *nValue);
extern int get_array__157581_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157581(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157581_default_value(void *pValue);
extern SimTypeUtils _Type_array__157581_Utils;

/****************************************************************
 ** struct__157584 
 ****************************************************************/
extern int struct__157584_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157584_string(const char *str, char **endptr);
extern int string_to_struct__157584(const char *str, void *pValue, char **endptr);
extern int is_struct__157584_allow_double_conversion();
extern int struct__157584_to_double(const void *pValue, double *nValue);
extern int get_struct__157584_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157584(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157584_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157584_Utils;

/****************************************************************
 ** struct__157588 
 ****************************************************************/
extern int struct__157588_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157588_string(const char *str, char **endptr);
extern int string_to_struct__157588(const char *str, void *pValue, char **endptr);
extern int is_struct__157588_allow_double_conversion();
extern int struct__157588_to_double(const void *pValue, double *nValue);
extern int get_struct__157588_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157588(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157588_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157588_Utils;

/****************************************************************
 ** array__157593 
 ****************************************************************/
extern int array__157593_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157593_string(const char *str, char **endptr);
extern int string_to_array__157593(const char *str, void *pValue, char **endptr);
extern int is_array__157593_allow_double_conversion();
extern int array__157593_to_double(const void *pValue, double *nValue);
extern int get_array__157593_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157593(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157593_default_value(void *pValue);
extern SimTypeUtils _Type_array__157593_Utils;

/****************************************************************
 ** struct__157596 
 ****************************************************************/
extern int struct__157596_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157596_string(const char *str, char **endptr);
extern int string_to_struct__157596(const char *str, void *pValue, char **endptr);
extern int is_struct__157596_allow_double_conversion();
extern int struct__157596_to_double(const void *pValue, double *nValue);
extern int get_struct__157596_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157596(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157596_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157596_Utils;

/****************************************************************
 ** struct__157609 
 ****************************************************************/
extern int struct__157609_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157609_string(const char *str, char **endptr);
extern int string_to_struct__157609(const char *str, void *pValue, char **endptr);
extern int is_struct__157609_allow_double_conversion();
extern int struct__157609_to_double(const void *pValue, double *nValue);
extern int get_struct__157609_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157609(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157609_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157609_Utils;

/****************************************************************
 ** array__157615 
 ****************************************************************/
extern int array__157615_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157615_string(const char *str, char **endptr);
extern int string_to_array__157615(const char *str, void *pValue, char **endptr);
extern int is_array__157615_allow_double_conversion();
extern int array__157615_to_double(const void *pValue, double *nValue);
extern int get_array__157615_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157615(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157615_default_value(void *pValue);
extern SimTypeUtils _Type_array__157615_Utils;

/****************************************************************
 ** struct__157618 
 ****************************************************************/
extern int struct__157618_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157618_string(const char *str, char **endptr);
extern int string_to_struct__157618(const char *str, void *pValue, char **endptr);
extern int is_struct__157618_allow_double_conversion();
extern int struct__157618_to_double(const void *pValue, double *nValue);
extern int get_struct__157618_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157618(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157618_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157618_Utils;

/****************************************************************
 ** struct__157629 
 ****************************************************************/
extern int struct__157629_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157629_string(const char *str, char **endptr);
extern int string_to_struct__157629(const char *str, void *pValue, char **endptr);
extern int is_struct__157629_allow_double_conversion();
extern int struct__157629_to_double(const void *pValue, double *nValue);
extern int get_struct__157629_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157629(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157629_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157629_Utils;

/****************************************************************
 ** struct__157641 
 ****************************************************************/
extern int struct__157641_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157641_string(const char *str, char **endptr);
extern int string_to_struct__157641(const char *str, void *pValue, char **endptr);
extern int is_struct__157641_allow_double_conversion();
extern int struct__157641_to_double(const void *pValue, double *nValue);
extern int get_struct__157641_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157641(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157641_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157641_Utils;

/****************************************************************
 ** struct__157648 
 ****************************************************************/
extern int struct__157648_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157648_string(const char *str, char **endptr);
extern int string_to_struct__157648(const char *str, void *pValue, char **endptr);
extern int is_struct__157648_allow_double_conversion();
extern int struct__157648_to_double(const void *pValue, double *nValue);
extern int get_struct__157648_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157648(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157648_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157648_Utils;

/****************************************************************
 ** struct__157659 
 ****************************************************************/
extern int struct__157659_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157659_string(const char *str, char **endptr);
extern int string_to_struct__157659(const char *str, void *pValue, char **endptr);
extern int is_struct__157659_allow_double_conversion();
extern int struct__157659_to_double(const void *pValue, double *nValue);
extern int get_struct__157659_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157659(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157659_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157659_Utils;

/****************************************************************
 ** struct__157670 
 ****************************************************************/
extern int struct__157670_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157670_string(const char *str, char **endptr);
extern int string_to_struct__157670(const char *str, void *pValue, char **endptr);
extern int is_struct__157670_allow_double_conversion();
extern int struct__157670_to_double(const void *pValue, double *nValue);
extern int get_struct__157670_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157670(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157670_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157670_Utils;

/****************************************************************
 ** array__157677 
 ****************************************************************/
extern int array__157677_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157677_string(const char *str, char **endptr);
extern int string_to_array__157677(const char *str, void *pValue, char **endptr);
extern int is_array__157677_allow_double_conversion();
extern int array__157677_to_double(const void *pValue, double *nValue);
extern int get_array__157677_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157677(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157677_default_value(void *pValue);
extern SimTypeUtils _Type_array__157677_Utils;

/****************************************************************
 ** array__157680 
 ****************************************************************/
extern int array__157680_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157680_string(const char *str, char **endptr);
extern int string_to_array__157680(const char *str, void *pValue, char **endptr);
extern int is_array__157680_allow_double_conversion();
extern int array__157680_to_double(const void *pValue, double *nValue);
extern int get_array__157680_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157680(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157680_default_value(void *pValue);
extern SimTypeUtils _Type_array__157680_Utils;

/****************************************************************
 ** array__157683 
 ****************************************************************/
extern int array__157683_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157683_string(const char *str, char **endptr);
extern int string_to_array__157683(const char *str, void *pValue, char **endptr);
extern int is_array__157683_allow_double_conversion();
extern int array__157683_to_double(const void *pValue, double *nValue);
extern int get_array__157683_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157683(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157683_default_value(void *pValue);
extern SimTypeUtils _Type_array__157683_Utils;

/****************************************************************
 ** array__157686 
 ****************************************************************/
extern int array__157686_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157686_string(const char *str, char **endptr);
extern int string_to_array__157686(const char *str, void *pValue, char **endptr);
extern int is_array__157686_allow_double_conversion();
extern int array__157686_to_double(const void *pValue, double *nValue);
extern int get_array__157686_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157686(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157686_default_value(void *pValue);
extern SimTypeUtils _Type_array__157686_Utils;

/****************************************************************
 ** array__157689 
 ****************************************************************/
extern int array__157689_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157689_string(const char *str, char **endptr);
extern int string_to_array__157689(const char *str, void *pValue, char **endptr);
extern int is_array__157689_allow_double_conversion();
extern int array__157689_to_double(const void *pValue, double *nValue);
extern int get_array__157689_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157689(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157689_default_value(void *pValue);
extern SimTypeUtils _Type_array__157689_Utils;

/****************************************************************
 ** array_bool_256 
 ****************************************************************/
extern int array_bool_256_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_256_string(const char *str, char **endptr);
extern int string_to_array_bool_256(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_allow_double_conversion();
extern int array_bool_256_to_double(const void *pValue, double *nValue);
extern int get_array_bool_256_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_256(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_256_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_256_Utils;

/****************************************************************
 ** array_bool_256_46 
 ****************************************************************/
extern int array_bool_256_46_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_256_46_string(const char *str, char **endptr);
extern int string_to_array_bool_256_46(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_46_allow_double_conversion();
extern int array_bool_256_46_to_double(const void *pValue, double *nValue);
extern int get_array_bool_256_46_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_256_46(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_256_46_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_256_46_Utils;

/****************************************************************
 ** struct__157698 
 ****************************************************************/
extern int struct__157698_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157698_string(const char *str, char **endptr);
extern int string_to_struct__157698(const char *str, void *pValue, char **endptr);
extern int is_struct__157698_allow_double_conversion();
extern int struct__157698_to_double(const void *pValue, double *nValue);
extern int get_struct__157698_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157698(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157698_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157698_Utils;

/****************************************************************
 ** struct__157707 
 ****************************************************************/
extern int struct__157707_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157707_string(const char *str, char **endptr);
extern int string_to_struct__157707(const char *str, void *pValue, char **endptr);
extern int is_struct__157707_allow_double_conversion();
extern int struct__157707_to_double(const void *pValue, double *nValue);
extern int get_struct__157707_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157707(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157707_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157707_Utils;

/****************************************************************
 ** array__157714 
 ****************************************************************/
extern int array__157714_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157714_string(const char *str, char **endptr);
extern int string_to_array__157714(const char *str, void *pValue, char **endptr);
extern int is_array__157714_allow_double_conversion();
extern int array__157714_to_double(const void *pValue, double *nValue);
extern int get_array__157714_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157714(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157714_default_value(void *pValue);
extern SimTypeUtils _Type_array__157714_Utils;

/****************************************************************
 ** struct__157717 
 ****************************************************************/
extern int struct__157717_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157717_string(const char *str, char **endptr);
extern int string_to_struct__157717(const char *str, void *pValue, char **endptr);
extern int is_struct__157717_allow_double_conversion();
extern int struct__157717_to_double(const void *pValue, double *nValue);
extern int get_struct__157717_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157717(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157717_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157717_Utils;

/****************************************************************
 ** struct__157724 
 ****************************************************************/
extern int struct__157724_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157724_string(const char *str, char **endptr);
extern int string_to_struct__157724(const char *str, void *pValue, char **endptr);
extern int is_struct__157724_allow_double_conversion();
extern int struct__157724_to_double(const void *pValue, double *nValue);
extern int get_struct__157724_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157724(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157724_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157724_Utils;

/****************************************************************
 ** struct__157732 
 ****************************************************************/
extern int struct__157732_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157732_string(const char *str, char **endptr);
extern int string_to_struct__157732(const char *str, void *pValue, char **endptr);
extern int is_struct__157732_allow_double_conversion();
extern int struct__157732_to_double(const void *pValue, double *nValue);
extern int get_struct__157732_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157732(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157732_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157732_Utils;

/****************************************************************
 ** struct__157743 
 ****************************************************************/
extern int struct__157743_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157743_string(const char *str, char **endptr);
extern int string_to_struct__157743(const char *str, void *pValue, char **endptr);
extern int is_struct__157743_allow_double_conversion();
extern int struct__157743_to_double(const void *pValue, double *nValue);
extern int get_struct__157743_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157743(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157743_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157743_Utils;

/****************************************************************
 ** struct__157749 
 ****************************************************************/
extern int struct__157749_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157749_string(const char *str, char **endptr);
extern int string_to_struct__157749(const char *str, void *pValue, char **endptr);
extern int is_struct__157749_allow_double_conversion();
extern int struct__157749_to_double(const void *pValue, double *nValue);
extern int get_struct__157749_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157749(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157749_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157749_Utils;

/****************************************************************
 ** struct__157755 
 ****************************************************************/
extern int struct__157755_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157755_string(const char *str, char **endptr);
extern int string_to_struct__157755(const char *str, void *pValue, char **endptr);
extern int is_struct__157755_allow_double_conversion();
extern int struct__157755_to_double(const void *pValue, double *nValue);
extern int get_struct__157755_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157755(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157755_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157755_Utils;

/****************************************************************
 ** struct__157763 
 ****************************************************************/
extern int struct__157763_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157763_string(const char *str, char **endptr);
extern int string_to_struct__157763(const char *str, void *pValue, char **endptr);
extern int is_struct__157763_allow_double_conversion();
extern int struct__157763_to_double(const void *pValue, double *nValue);
extern int get_struct__157763_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157763(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157763_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157763_Utils;

/****************************************************************
 ** struct__157769 
 ****************************************************************/
extern int struct__157769_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157769_string(const char *str, char **endptr);
extern int string_to_struct__157769(const char *str, void *pValue, char **endptr);
extern int is_struct__157769_allow_double_conversion();
extern int struct__157769_to_double(const void *pValue, double *nValue);
extern int get_struct__157769_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157769(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157769_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157769_Utils;

/****************************************************************
 ** struct__157776 
 ****************************************************************/
extern int struct__157776_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157776_string(const char *str, char **endptr);
extern int string_to_struct__157776(const char *str, void *pValue, char **endptr);
extern int is_struct__157776_allow_double_conversion();
extern int struct__157776_to_double(const void *pValue, double *nValue);
extern int get_struct__157776_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157776(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157776_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157776_Utils;

/****************************************************************
 ** struct__157786 
 ****************************************************************/
extern int struct__157786_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157786_string(const char *str, char **endptr);
extern int string_to_struct__157786(const char *str, void *pValue, char **endptr);
extern int is_struct__157786_allow_double_conversion();
extern int struct__157786_to_double(const void *pValue, double *nValue);
extern int get_struct__157786_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157786(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157786_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157786_Utils;

/****************************************************************
 ** array__157797 
 ****************************************************************/
extern int array__157797_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157797_string(const char *str, char **endptr);
extern int string_to_array__157797(const char *str, void *pValue, char **endptr);
extern int is_array__157797_allow_double_conversion();
extern int array__157797_to_double(const void *pValue, double *nValue);
extern int get_array__157797_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157797(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157797_default_value(void *pValue);
extern SimTypeUtils _Type_array__157797_Utils;

/****************************************************************
 ** struct__157800 
 ****************************************************************/
extern int struct__157800_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157800_string(const char *str, char **endptr);
extern int string_to_struct__157800(const char *str, void *pValue, char **endptr);
extern int is_struct__157800_allow_double_conversion();
extern int struct__157800_to_double(const void *pValue, double *nValue);
extern int get_struct__157800_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157800(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157800_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157800_Utils;

/****************************************************************
 ** struct__157806 
 ****************************************************************/
extern int struct__157806_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157806_string(const char *str, char **endptr);
extern int string_to_struct__157806(const char *str, void *pValue, char **endptr);
extern int is_struct__157806_allow_double_conversion();
extern int struct__157806_to_double(const void *pValue, double *nValue);
extern int get_struct__157806_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157806(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157806_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157806_Utils;

/****************************************************************
 ** struct__157813 
 ****************************************************************/
extern int struct__157813_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157813_string(const char *str, char **endptr);
extern int string_to_struct__157813(const char *str, void *pValue, char **endptr);
extern int is_struct__157813_allow_double_conversion();
extern int struct__157813_to_double(const void *pValue, double *nValue);
extern int get_struct__157813_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157813(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157813_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157813_Utils;

/****************************************************************
 ** struct__157820 
 ****************************************************************/
extern int struct__157820_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157820_string(const char *str, char **endptr);
extern int string_to_struct__157820(const char *str, void *pValue, char **endptr);
extern int is_struct__157820_allow_double_conversion();
extern int struct__157820_to_double(const void *pValue, double *nValue);
extern int get_struct__157820_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157820(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157820_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157820_Utils;

/****************************************************************
 ** array_char_255 
 ****************************************************************/
extern int array_char_255_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_char_255_string(const char *str, char **endptr);
extern int string_to_array_char_255(const char *str, void *pValue, char **endptr);
extern int is_array_char_255_allow_double_conversion();
extern int array_char_255_to_double(const void *pValue, double *nValue);
extern int get_array_char_255_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_char_255(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_char_255_default_value(void *pValue);
extern SimTypeUtils _Type_array_char_255_Utils;

/****************************************************************
 ** struct__157829 
 ****************************************************************/
extern int struct__157829_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157829_string(const char *str, char **endptr);
extern int string_to_struct__157829(const char *str, void *pValue, char **endptr);
extern int is_struct__157829_allow_double_conversion();
extern int struct__157829_to_double(const void *pValue, double *nValue);
extern int get_struct__157829_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157829(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157829_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157829_Utils;

/****************************************************************
 ** struct__157839 
 ****************************************************************/
extern int struct__157839_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157839_string(const char *str, char **endptr);
extern int string_to_struct__157839(const char *str, void *pValue, char **endptr);
extern int is_struct__157839_allow_double_conversion();
extern int struct__157839_to_double(const void *pValue, double *nValue);
extern int get_struct__157839_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157839(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157839_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157839_Utils;

/****************************************************************
 ** struct__157851 
 ****************************************************************/
extern int struct__157851_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157851_string(const char *str, char **endptr);
extern int string_to_struct__157851(const char *str, void *pValue, char **endptr);
extern int is_struct__157851_allow_double_conversion();
extern int struct__157851_to_double(const void *pValue, double *nValue);
extern int get_struct__157851_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157851(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157851_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157851_Utils;

/****************************************************************
 ** array_char_9 
 ****************************************************************/
extern int array_char_9_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_char_9_string(const char *str, char **endptr);
extern int string_to_array_char_9(const char *str, void *pValue, char **endptr);
extern int is_array_char_9_allow_double_conversion();
extern int array_char_9_to_double(const void *pValue, double *nValue);
extern int get_array_char_9_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_char_9(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_char_9_default_value(void *pValue);
extern SimTypeUtils _Type_array_char_9_Utils;

/****************************************************************
 ** struct__157860 
 ****************************************************************/
extern int struct__157860_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157860_string(const char *str, char **endptr);
extern int string_to_struct__157860(const char *str, void *pValue, char **endptr);
extern int is_struct__157860_allow_double_conversion();
extern int struct__157860_to_double(const void *pValue, double *nValue);
extern int get_struct__157860_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157860(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157860_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157860_Utils;

/****************************************************************
 ** struct__157866 
 ****************************************************************/
extern int struct__157866_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157866_string(const char *str, char **endptr);
extern int string_to_struct__157866(const char *str, void *pValue, char **endptr);
extern int is_struct__157866_allow_double_conversion();
extern int struct__157866_to_double(const void *pValue, double *nValue);
extern int get_struct__157866_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157866(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157866_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157866_Utils;

/****************************************************************
 ** struct__157871 
 ****************************************************************/
extern int struct__157871_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157871_string(const char *str, char **endptr);
extern int string_to_struct__157871(const char *str, void *pValue, char **endptr);
extern int is_struct__157871_allow_double_conversion();
extern int struct__157871_to_double(const void *pValue, double *nValue);
extern int get_struct__157871_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157871(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157871_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157871_Utils;

/****************************************************************
 ** struct__157878 
 ****************************************************************/
extern int struct__157878_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157878_string(const char *str, char **endptr);
extern int string_to_struct__157878(const char *str, void *pValue, char **endptr);
extern int is_struct__157878_allow_double_conversion();
extern int struct__157878_to_double(const void *pValue, double *nValue);
extern int get_struct__157878_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157878(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157878_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157878_Utils;

/****************************************************************
 ** array_int_255 
 ****************************************************************/
extern int array_int_255_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_255_string(const char *str, char **endptr);
extern int string_to_array_int_255(const char *str, void *pValue, char **endptr);
extern int is_array_int_255_allow_double_conversion();
extern int array_int_255_to_double(const void *pValue, double *nValue);
extern int get_array_int_255_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_255(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_255_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_255_Utils;

/****************************************************************
 ** array_int_261 
 ****************************************************************/
extern int array_int_261_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_261_string(const char *str, char **endptr);
extern int string_to_array_int_261(const char *str, void *pValue, char **endptr);
extern int is_array_int_261_allow_double_conversion();
extern int array_int_261_to_double(const void *pValue, double *nValue);
extern int get_array_int_261_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_261(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_261_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_261_Utils;

/****************************************************************
 ** struct__157900 
 ****************************************************************/
extern int struct__157900_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157900_string(const char *str, char **endptr);
extern int string_to_struct__157900(const char *str, void *pValue, char **endptr);
extern int is_struct__157900_allow_double_conversion();
extern int struct__157900_to_double(const void *pValue, double *nValue);
extern int get_struct__157900_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157900(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157900_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157900_Utils;

/****************************************************************
 ** struct__157907 
 ****************************************************************/
extern int struct__157907_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157907_string(const char *str, char **endptr);
extern int string_to_struct__157907(const char *str, void *pValue, char **endptr);
extern int is_struct__157907_allow_double_conversion();
extern int struct__157907_to_double(const void *pValue, double *nValue);
extern int get_struct__157907_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157907(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157907_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157907_Utils;

/****************************************************************
 ** array_bool_114 
 ****************************************************************/
extern int array_bool_114_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_114_string(const char *str, char **endptr);
extern int string_to_array_bool_114(const char *str, void *pValue, char **endptr);
extern int is_array_bool_114_allow_double_conversion();
extern int array_bool_114_to_double(const void *pValue, double *nValue);
extern int get_array_bool_114_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_114(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_114_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_114_Utils;

/****************************************************************
 ** array_real_114 
 ****************************************************************/
extern int array_real_114_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_114_string(const char *str, char **endptr);
extern int string_to_array_real_114(const char *str, void *pValue, char **endptr);
extern int is_array_real_114_allow_double_conversion();
extern int array_real_114_to_double(const void *pValue, double *nValue);
extern int get_array_real_114_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_114(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_114_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_114_Utils;

/****************************************************************
 ** struct__157940 
 ****************************************************************/
extern int struct__157940_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157940_string(const char *str, char **endptr);
extern int string_to_struct__157940(const char *str, void *pValue, char **endptr);
extern int is_struct__157940_allow_double_conversion();
extern int struct__157940_to_double(const void *pValue, double *nValue);
extern int get_struct__157940_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157940(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157940_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157940_Utils;

/****************************************************************
 ** array__157947 
 ****************************************************************/
extern int array__157947_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157947_string(const char *str, char **endptr);
extern int string_to_array__157947(const char *str, void *pValue, char **endptr);
extern int is_array__157947_allow_double_conversion();
extern int array__157947_to_double(const void *pValue, double *nValue);
extern int get_array__157947_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157947(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157947_default_value(void *pValue);
extern SimTypeUtils _Type_array__157947_Utils;

/****************************************************************
 ** struct__157950 
 ****************************************************************/
extern int struct__157950_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157950_string(const char *str, char **endptr);
extern int string_to_struct__157950(const char *str, void *pValue, char **endptr);
extern int is_struct__157950_allow_double_conversion();
extern int struct__157950_to_double(const void *pValue, double *nValue);
extern int get_struct__157950_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157950(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157950_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157950_Utils;

/****************************************************************
 ** struct__157958 
 ****************************************************************/
extern int struct__157958_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157958_string(const char *str, char **endptr);
extern int string_to_struct__157958(const char *str, void *pValue, char **endptr);
extern int is_struct__157958_allow_double_conversion();
extern int struct__157958_to_double(const void *pValue, double *nValue);
extern int get_struct__157958_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157958(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157958_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157958_Utils;

/****************************************************************
 ** array__157964 
 ****************************************************************/
extern int array__157964_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157964_string(const char *str, char **endptr);
extern int string_to_array__157964(const char *str, void *pValue, char **endptr);
extern int is_array__157964_allow_double_conversion();
extern int array__157964_to_double(const void *pValue, double *nValue);
extern int get_array__157964_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157964(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157964_default_value(void *pValue);
extern SimTypeUtils _Type_array__157964_Utils;

/****************************************************************
 ** struct__157967 
 ****************************************************************/
extern int struct__157967_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157967_string(const char *str, char **endptr);
extern int string_to_struct__157967(const char *str, void *pValue, char **endptr);
extern int is_struct__157967_allow_double_conversion();
extern int struct__157967_to_double(const void *pValue, double *nValue);
extern int get_struct__157967_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157967(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157967_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157967_Utils;

/****************************************************************
 ** struct__157974 
 ****************************************************************/
extern int struct__157974_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157974_string(const char *str, char **endptr);
extern int string_to_struct__157974(const char *str, void *pValue, char **endptr);
extern int is_struct__157974_allow_double_conversion();
extern int struct__157974_to_double(const void *pValue, double *nValue);
extern int get_struct__157974_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157974(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157974_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157974_Utils;

/****************************************************************
 ** struct__157980 
 ****************************************************************/
extern int struct__157980_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157980_string(const char *str, char **endptr);
extern int string_to_struct__157980(const char *str, void *pValue, char **endptr);
extern int is_struct__157980_allow_double_conversion();
extern int struct__157980_to_double(const void *pValue, double *nValue);
extern int get_struct__157980_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157980(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157980_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157980_Utils;

/****************************************************************
 ** array__157986 
 ****************************************************************/
extern int array__157986_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157986_string(const char *str, char **endptr);
extern int string_to_array__157986(const char *str, void *pValue, char **endptr);
extern int is_array__157986_allow_double_conversion();
extern int array__157986_to_double(const void *pValue, double *nValue);
extern int get_array__157986_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157986(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157986_default_value(void *pValue);
extern SimTypeUtils _Type_array__157986_Utils;

/****************************************************************
 ** array__157989 
 ****************************************************************/
extern int array__157989_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__157989_string(const char *str, char **endptr);
extern int string_to_array__157989(const char *str, void *pValue, char **endptr);
extern int is_array__157989_allow_double_conversion();
extern int array__157989_to_double(const void *pValue, double *nValue);
extern int get_array__157989_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__157989(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__157989_default_value(void *pValue);
extern SimTypeUtils _Type_array__157989_Utils;

/****************************************************************
 ** struct__157992 
 ****************************************************************/
extern int struct__157992_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__157992_string(const char *str, char **endptr);
extern int string_to_struct__157992(const char *str, void *pValue, char **endptr);
extern int is_struct__157992_allow_double_conversion();
extern int struct__157992_to_double(const void *pValue, double *nValue);
extern int get_struct__157992_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__157992(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__157992_default_value(void *pValue);
extern SimTypeUtils _Type_struct__157992_Utils;

/****************************************************************
 ** array__158000 
 ****************************************************************/
extern int array__158000_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158000_string(const char *str, char **endptr);
extern int string_to_array__158000(const char *str, void *pValue, char **endptr);
extern int is_array__158000_allow_double_conversion();
extern int array__158000_to_double(const void *pValue, double *nValue);
extern int get_array__158000_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158000(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158000_default_value(void *pValue);
extern SimTypeUtils _Type_array__158000_Utils;

/****************************************************************
 ** struct__158003 
 ****************************************************************/
extern int struct__158003_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158003_string(const char *str, char **endptr);
extern int string_to_struct__158003(const char *str, void *pValue, char **endptr);
extern int is_struct__158003_allow_double_conversion();
extern int struct__158003_to_double(const void *pValue, double *nValue);
extern int get_struct__158003_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158003(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158003_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158003_Utils;

/****************************************************************
 ** array_real_100 
 ****************************************************************/
extern int array_real_100_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_string(const char *str, char **endptr);
extern int string_to_array_real_100(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_allow_double_conversion();
extern int array_real_100_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_Utils;

/****************************************************************
 ** array_real_100_14 
 ****************************************************************/
extern int array_real_100_14_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_14_string(const char *str, char **endptr);
extern int string_to_array_real_100_14(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_14_allow_double_conversion();
extern int array_real_100_14_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_14_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_14(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_14_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_14_Utils;

/****************************************************************
 ** array_real_14 
 ****************************************************************/
extern int array_real_14_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_14_string(const char *str, char **endptr);
extern int string_to_array_real_14(const char *str, void *pValue, char **endptr);
extern int is_array_real_14_allow_double_conversion();
extern int array_real_14_to_double(const void *pValue, double *nValue);
extern int get_array_real_14_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_14(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_14_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_14_Utils;

/****************************************************************
 ** struct__158021 
 ****************************************************************/
extern int struct__158021_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158021_string(const char *str, char **endptr);
extern int string_to_struct__158021(const char *str, void *pValue, char **endptr);
extern int is_struct__158021_allow_double_conversion();
extern int struct__158021_to_double(const void *pValue, double *nValue);
extern int get_struct__158021_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158021(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158021_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158021_Utils;

/****************************************************************
 ** struct__158027 
 ****************************************************************/
extern int struct__158027_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158027_string(const char *str, char **endptr);
extern int string_to_struct__158027(const char *str, void *pValue, char **endptr);
extern int is_struct__158027_allow_double_conversion();
extern int struct__158027_to_double(const void *pValue, double *nValue);
extern int get_struct__158027_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158027(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158027_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158027_Utils;

/****************************************************************
 ** struct__158032 
 ****************************************************************/
extern int struct__158032_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158032_string(const char *str, char **endptr);
extern int string_to_struct__158032(const char *str, void *pValue, char **endptr);
extern int is_struct__158032_allow_double_conversion();
extern int struct__158032_to_double(const void *pValue, double *nValue);
extern int get_struct__158032_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158032(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158032_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158032_Utils;

/****************************************************************
 ** array_int_13 
 ****************************************************************/
extern int array_int_13_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_13_string(const char *str, char **endptr);
extern int string_to_array_int_13(const char *str, void *pValue, char **endptr);
extern int is_array_int_13_allow_double_conversion();
extern int array_int_13_to_double(const void *pValue, double *nValue);
extern int get_array_int_13_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_13(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_13_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_13_Utils;

/****************************************************************
 ** struct__158040 
 ****************************************************************/
extern int struct__158040_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158040_string(const char *str, char **endptr);
extern int string_to_struct__158040(const char *str, void *pValue, char **endptr);
extern int is_struct__158040_allow_double_conversion();
extern int struct__158040_to_double(const void *pValue, double *nValue);
extern int get_struct__158040_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158040(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158040_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158040_Utils;

/****************************************************************
 ** array_int_221 
 ****************************************************************/
extern int array_int_221_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_221_string(const char *str, char **endptr);
extern int string_to_array_int_221(const char *str, void *pValue, char **endptr);
extern int is_array_int_221_allow_double_conversion();
extern int array_int_221_to_double(const void *pValue, double *nValue);
extern int get_array_int_221_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_221(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_221_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_221_Utils;

/****************************************************************
 ** array_int_6_221 
 ****************************************************************/
extern int array_int_6_221_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_6_221_string(const char *str, char **endptr);
extern int string_to_array_int_6_221(const char *str, void *pValue, char **endptr);
extern int is_array_int_6_221_allow_double_conversion();
extern int array_int_6_221_to_double(const void *pValue, double *nValue);
extern int get_array_int_6_221_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_6_221(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_6_221_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_6_221_Utils;

/****************************************************************
 ** struct__158051 
 ****************************************************************/
extern int struct__158051_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158051_string(const char *str, char **endptr);
extern int string_to_struct__158051(const char *str, void *pValue, char **endptr);
extern int is_struct__158051_allow_double_conversion();
extern int struct__158051_to_double(const void *pValue, double *nValue);
extern int get_struct__158051_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158051(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158051_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158051_Utils;

/****************************************************************
 ** array_real_3 
 ****************************************************************/
extern int array_real_3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_3_string(const char *str, char **endptr);
extern int string_to_array_real_3(const char *str, void *pValue, char **endptr);
extern int is_array_real_3_allow_double_conversion();
extern int array_real_3_to_double(const void *pValue, double *nValue);
extern int get_array_real_3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_3_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_3_Utils;

/****************************************************************
 ** array_real_2 
 ****************************************************************/
extern int array_real_2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_2_string(const char *str, char **endptr);
extern int string_to_array_real_2(const char *str, void *pValue, char **endptr);
extern int is_array_real_2_allow_double_conversion();
extern int array_real_2_to_double(const void *pValue, double *nValue);
extern int get_array_real_2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_2_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_2_Utils;

/****************************************************************
 ** struct__158062 
 ****************************************************************/
extern int struct__158062_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158062_string(const char *str, char **endptr);
extern int string_to_struct__158062(const char *str, void *pValue, char **endptr);
extern int is_struct__158062_allow_double_conversion();
extern int struct__158062_to_double(const void *pValue, double *nValue);
extern int get_struct__158062_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158062(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158062_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158062_Utils;

/****************************************************************
 ** struct__158067 
 ****************************************************************/
extern int struct__158067_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158067_string(const char *str, char **endptr);
extern int string_to_struct__158067(const char *str, void *pValue, char **endptr);
extern int is_struct__158067_allow_double_conversion();
extern int struct__158067_to_double(const void *pValue, double *nValue);
extern int get_struct__158067_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158067(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158067_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158067_Utils;

/****************************************************************
 ** struct__158077 
 ****************************************************************/
extern int struct__158077_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158077_string(const char *str, char **endptr);
extern int string_to_struct__158077(const char *str, void *pValue, char **endptr);
extern int is_struct__158077_allow_double_conversion();
extern int struct__158077_to_double(const void *pValue, double *nValue);
extern int get_struct__158077_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158077(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158077_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158077_Utils;

/****************************************************************
 ** struct__158083 
 ****************************************************************/
extern int struct__158083_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158083_string(const char *str, char **endptr);
extern int string_to_struct__158083(const char *str, void *pValue, char **endptr);
extern int is_struct__158083_allow_double_conversion();
extern int struct__158083_to_double(const void *pValue, double *nValue);
extern int get_struct__158083_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158083(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158083_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158083_Utils;

/****************************************************************
 ** struct__158088 
 ****************************************************************/
extern int struct__158088_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158088_string(const char *str, char **endptr);
extern int string_to_struct__158088(const char *str, void *pValue, char **endptr);
extern int is_struct__158088_allow_double_conversion();
extern int struct__158088_to_double(const void *pValue, double *nValue);
extern int get_struct__158088_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158088(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158088_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158088_Utils;

/****************************************************************
 ** struct__158096 
 ****************************************************************/
extern int struct__158096_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158096_string(const char *str, char **endptr);
extern int string_to_struct__158096(const char *str, void *pValue, char **endptr);
extern int is_struct__158096_allow_double_conversion();
extern int struct__158096_to_double(const void *pValue, double *nValue);
extern int get_struct__158096_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158096(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158096_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158096_Utils;

/****************************************************************
 ** struct__158108 
 ****************************************************************/
extern int struct__158108_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158108_string(const char *str, char **endptr);
extern int string_to_struct__158108(const char *str, void *pValue, char **endptr);
extern int is_struct__158108_allow_double_conversion();
extern int struct__158108_to_double(const void *pValue, double *nValue);
extern int get_struct__158108_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158108(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158108_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158108_Utils;

/****************************************************************
 ** struct__158113 
 ****************************************************************/
extern int struct__158113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158113_string(const char *str, char **endptr);
extern int string_to_struct__158113(const char *str, void *pValue, char **endptr);
extern int is_struct__158113_allow_double_conversion();
extern int struct__158113_to_double(const void *pValue, double *nValue);
extern int get_struct__158113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158113_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158113_Utils;

/****************************************************************
 ** struct__158126 
 ****************************************************************/
extern int struct__158126_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158126_string(const char *str, char **endptr);
extern int string_to_struct__158126(const char *str, void *pValue, char **endptr);
extern int is_struct__158126_allow_double_conversion();
extern int struct__158126_to_double(const void *pValue, double *nValue);
extern int get_struct__158126_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158126(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158126_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158126_Utils;

/****************************************************************
 ** array__158132 
 ****************************************************************/
extern int array__158132_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158132_string(const char *str, char **endptr);
extern int string_to_array__158132(const char *str, void *pValue, char **endptr);
extern int is_array__158132_allow_double_conversion();
extern int array__158132_to_double(const void *pValue, double *nValue);
extern int get_array__158132_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158132(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158132_default_value(void *pValue);
extern SimTypeUtils _Type_array__158132_Utils;

/****************************************************************
 ** struct__158135 
 ****************************************************************/
extern int struct__158135_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158135_string(const char *str, char **endptr);
extern int string_to_struct__158135(const char *str, void *pValue, char **endptr);
extern int is_struct__158135_allow_double_conversion();
extern int struct__158135_to_double(const void *pValue, double *nValue);
extern int get_struct__158135_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158135(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158135_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158135_Utils;

/****************************************************************
 ** struct__158158 
 ****************************************************************/
extern int struct__158158_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158158_string(const char *str, char **endptr);
extern int string_to_struct__158158(const char *str, void *pValue, char **endptr);
extern int is_struct__158158_allow_double_conversion();
extern int struct__158158_to_double(const void *pValue, double *nValue);
extern int get_struct__158158_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158158(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158158_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158158_Utils;

/****************************************************************
 ** struct__158176 
 ****************************************************************/
extern int struct__158176_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158176_string(const char *str, char **endptr);
extern int string_to_struct__158176(const char *str, void *pValue, char **endptr);
extern int is_struct__158176_allow_double_conversion();
extern int struct__158176_to_double(const void *pValue, double *nValue);
extern int get_struct__158176_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158176(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158176_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158176_Utils;

/****************************************************************
 ** struct__158181 
 ****************************************************************/
extern int struct__158181_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158181_string(const char *str, char **endptr);
extern int string_to_struct__158181(const char *str, void *pValue, char **endptr);
extern int is_struct__158181_allow_double_conversion();
extern int struct__158181_to_double(const void *pValue, double *nValue);
extern int get_struct__158181_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158181(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158181_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158181_Utils;

/****************************************************************
 ** struct__158189 
 ****************************************************************/
extern int struct__158189_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158189_string(const char *str, char **endptr);
extern int string_to_struct__158189(const char *str, void *pValue, char **endptr);
extern int is_struct__158189_allow_double_conversion();
extern int struct__158189_to_double(const void *pValue, double *nValue);
extern int get_struct__158189_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158189(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158189_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158189_Utils;

/****************************************************************
 ** struct__158202 
 ****************************************************************/
extern int struct__158202_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158202_string(const char *str, char **endptr);
extern int string_to_struct__158202(const char *str, void *pValue, char **endptr);
extern int is_struct__158202_allow_double_conversion();
extern int struct__158202_to_double(const void *pValue, double *nValue);
extern int get_struct__158202_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158202(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158202_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158202_Utils;

/****************************************************************
 ** array_bool_14 
 ****************************************************************/
extern int array_bool_14_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_14_string(const char *str, char **endptr);
extern int string_to_array_bool_14(const char *str, void *pValue, char **endptr);
extern int is_array_bool_14_allow_double_conversion();
extern int array_bool_14_to_double(const void *pValue, double *nValue);
extern int get_array_bool_14_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_14(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_14_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_14_Utils;

/****************************************************************
 ** struct__158222 
 ****************************************************************/
extern int struct__158222_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158222_string(const char *str, char **endptr);
extern int string_to_struct__158222(const char *str, void *pValue, char **endptr);
extern int is_struct__158222_allow_double_conversion();
extern int struct__158222_to_double(const void *pValue, double *nValue);
extern int get_struct__158222_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158222(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158222_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158222_Utils;

/****************************************************************
 ** struct__158229 
 ****************************************************************/
extern int struct__158229_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158229_string(const char *str, char **endptr);
extern int string_to_struct__158229(const char *str, void *pValue, char **endptr);
extern int is_struct__158229_allow_double_conversion();
extern int struct__158229_to_double(const void *pValue, double *nValue);
extern int get_struct__158229_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158229(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158229_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158229_Utils;

/****************************************************************
 ** struct__158238 
 ****************************************************************/
extern int struct__158238_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158238_string(const char *str, char **endptr);
extern int string_to_struct__158238(const char *str, void *pValue, char **endptr);
extern int is_struct__158238_allow_double_conversion();
extern int struct__158238_to_double(const void *pValue, double *nValue);
extern int get_struct__158238_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158238(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158238_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158238_Utils;

/****************************************************************
 ** struct__158244 
 ****************************************************************/
extern int struct__158244_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158244_string(const char *str, char **endptr);
extern int string_to_struct__158244(const char *str, void *pValue, char **endptr);
extern int is_struct__158244_allow_double_conversion();
extern int struct__158244_to_double(const void *pValue, double *nValue);
extern int get_struct__158244_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158244(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158244_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158244_Utils;

/****************************************************************
 ** struct__158250 
 ****************************************************************/
extern int struct__158250_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158250_string(const char *str, char **endptr);
extern int string_to_struct__158250(const char *str, void *pValue, char **endptr);
extern int is_struct__158250_allow_double_conversion();
extern int struct__158250_to_double(const void *pValue, double *nValue);
extern int get_struct__158250_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158250(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158250_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158250_Utils;

/****************************************************************
 ** struct__158256 
 ****************************************************************/
extern int struct__158256_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158256_string(const char *str, char **endptr);
extern int string_to_struct__158256(const char *str, void *pValue, char **endptr);
extern int is_struct__158256_allow_double_conversion();
extern int struct__158256_to_double(const void *pValue, double *nValue);
extern int get_struct__158256_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158256(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158256_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158256_Utils;

/****************************************************************
 ** struct__158263 
 ****************************************************************/
extern int struct__158263_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158263_string(const char *str, char **endptr);
extern int string_to_struct__158263(const char *str, void *pValue, char **endptr);
extern int is_struct__158263_allow_double_conversion();
extern int struct__158263_to_double(const void *pValue, double *nValue);
extern int get_struct__158263_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158263(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158263_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158263_Utils;

/****************************************************************
 ** struct__158271 
 ****************************************************************/
extern int struct__158271_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158271_string(const char *str, char **endptr);
extern int string_to_struct__158271(const char *str, void *pValue, char **endptr);
extern int is_struct__158271_allow_double_conversion();
extern int struct__158271_to_double(const void *pValue, double *nValue);
extern int get_struct__158271_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158271(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158271_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158271_Utils;

/****************************************************************
 ** struct__158280 
 ****************************************************************/
extern int struct__158280_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158280_string(const char *str, char **endptr);
extern int string_to_struct__158280(const char *str, void *pValue, char **endptr);
extern int is_struct__158280_allow_double_conversion();
extern int struct__158280_to_double(const void *pValue, double *nValue);
extern int get_struct__158280_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158280(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158280_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158280_Utils;

/****************************************************************
 ** struct__158292 
 ****************************************************************/
extern int struct__158292_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158292_string(const char *str, char **endptr);
extern int string_to_struct__158292(const char *str, void *pValue, char **endptr);
extern int is_struct__158292_allow_double_conversion();
extern int struct__158292_to_double(const void *pValue, double *nValue);
extern int get_struct__158292_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158292(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158292_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158292_Utils;

/****************************************************************
 ** struct__158298 
 ****************************************************************/
extern int struct__158298_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158298_string(const char *str, char **endptr);
extern int string_to_struct__158298(const char *str, void *pValue, char **endptr);
extern int is_struct__158298_allow_double_conversion();
extern int struct__158298_to_double(const void *pValue, double *nValue);
extern int get_struct__158298_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158298(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158298_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158298_Utils;

/****************************************************************
 ** struct__158304 
 ****************************************************************/
extern int struct__158304_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158304_string(const char *str, char **endptr);
extern int string_to_struct__158304(const char *str, void *pValue, char **endptr);
extern int is_struct__158304_allow_double_conversion();
extern int struct__158304_to_double(const void *pValue, double *nValue);
extern int get_struct__158304_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158304(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158304_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158304_Utils;

/****************************************************************
 ** array_int_65 
 ****************************************************************/
extern int array_int_65_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_65_string(const char *str, char **endptr);
extern int string_to_array_int_65(const char *str, void *pValue, char **endptr);
extern int is_array_int_65_allow_double_conversion();
extern int array_int_65_to_double(const void *pValue, double *nValue);
extern int get_array_int_65_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_65(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_65_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_65_Utils;

/****************************************************************
 ** array_int_67 
 ****************************************************************/
extern int array_int_67_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_67_string(const char *str, char **endptr);
extern int string_to_array_int_67(const char *str, void *pValue, char **endptr);
extern int is_array_int_67_allow_double_conversion();
extern int array_int_67_to_double(const void *pValue, double *nValue);
extern int get_array_int_67_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_67(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_67_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_67_Utils;

/****************************************************************
 ** struct__158322 
 ****************************************************************/
extern int struct__158322_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158322_string(const char *str, char **endptr);
extern int string_to_struct__158322(const char *str, void *pValue, char **endptr);
extern int is_struct__158322_allow_double_conversion();
extern int struct__158322_to_double(const void *pValue, double *nValue);
extern int get_struct__158322_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158322(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158322_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158322_Utils;

/****************************************************************
 ** struct__158328 
 ****************************************************************/
extern int struct__158328_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158328_string(const char *str, char **endptr);
extern int string_to_struct__158328(const char *str, void *pValue, char **endptr);
extern int is_struct__158328_allow_double_conversion();
extern int struct__158328_to_double(const void *pValue, double *nValue);
extern int get_struct__158328_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158328(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158328_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158328_Utils;

/****************************************************************
 ** struct__158334 
 ****************************************************************/
extern int struct__158334_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158334_string(const char *str, char **endptr);
extern int string_to_struct__158334(const char *str, void *pValue, char **endptr);
extern int is_struct__158334_allow_double_conversion();
extern int struct__158334_to_double(const void *pValue, double *nValue);
extern int get_struct__158334_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158334(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158334_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158334_Utils;

/****************************************************************
 ** array_int_129 
 ****************************************************************/
extern int array_int_129_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_129_string(const char *str, char **endptr);
extern int string_to_array_int_129(const char *str, void *pValue, char **endptr);
extern int is_array_int_129_allow_double_conversion();
extern int array_int_129_to_double(const void *pValue, double *nValue);
extern int get_array_int_129_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_129(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_129_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_129_Utils;

/****************************************************************
 ** array__158347 
 ****************************************************************/
extern int array__158347_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158347_string(const char *str, char **endptr);
extern int string_to_array__158347(const char *str, void *pValue, char **endptr);
extern int is_array__158347_allow_double_conversion();
extern int array__158347_to_double(const void *pValue, double *nValue);
extern int get_array__158347_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158347(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158347_default_value(void *pValue);
extern SimTypeUtils _Type_array__158347_Utils;

/****************************************************************
 ** struct__158350 
 ****************************************************************/
extern int struct__158350_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158350_string(const char *str, char **endptr);
extern int string_to_struct__158350(const char *str, void *pValue, char **endptr);
extern int is_struct__158350_allow_double_conversion();
extern int struct__158350_to_double(const void *pValue, double *nValue);
extern int get_struct__158350_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158350(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158350_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158350_Utils;

/****************************************************************
 ** array__158355 
 ****************************************************************/
extern int array__158355_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158355_string(const char *str, char **endptr);
extern int string_to_array__158355(const char *str, void *pValue, char **endptr);
extern int is_array__158355_allow_double_conversion();
extern int array__158355_to_double(const void *pValue, double *nValue);
extern int get_array__158355_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158355(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158355_default_value(void *pValue);
extern SimTypeUtils _Type_array__158355_Utils;

/****************************************************************
 ** struct__158358 
 ****************************************************************/
extern int struct__158358_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158358_string(const char *str, char **endptr);
extern int string_to_struct__158358(const char *str, void *pValue, char **endptr);
extern int is_struct__158358_allow_double_conversion();
extern int struct__158358_to_double(const void *pValue, double *nValue);
extern int get_struct__158358_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158358(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158358_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158358_Utils;

/****************************************************************
 ** struct__158363 
 ****************************************************************/
extern int struct__158363_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158363_string(const char *str, char **endptr);
extern int string_to_struct__158363(const char *str, void *pValue, char **endptr);
extern int is_struct__158363_allow_double_conversion();
extern int struct__158363_to_double(const void *pValue, double *nValue);
extern int get_struct__158363_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158363(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158363_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158363_Utils;

/****************************************************************
 ** array__158368 
 ****************************************************************/
extern int array__158368_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158368_string(const char *str, char **endptr);
extern int string_to_array__158368(const char *str, void *pValue, char **endptr);
extern int is_array__158368_allow_double_conversion();
extern int array__158368_to_double(const void *pValue, double *nValue);
extern int get_array__158368_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158368(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158368_default_value(void *pValue);
extern SimTypeUtils _Type_array__158368_Utils;

/****************************************************************
 ** struct__158371 
 ****************************************************************/
extern int struct__158371_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158371_string(const char *str, char **endptr);
extern int string_to_struct__158371(const char *str, void *pValue, char **endptr);
extern int is_struct__158371_allow_double_conversion();
extern int struct__158371_to_double(const void *pValue, double *nValue);
extern int get_struct__158371_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158371(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158371_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158371_Utils;

/****************************************************************
 ** struct__158376 
 ****************************************************************/
extern int struct__158376_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158376_string(const char *str, char **endptr);
extern int string_to_struct__158376(const char *str, void *pValue, char **endptr);
extern int is_struct__158376_allow_double_conversion();
extern int struct__158376_to_double(const void *pValue, double *nValue);
extern int get_struct__158376_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158376(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158376_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158376_Utils;

/****************************************************************
 ** array_int_325 
 ****************************************************************/
extern int array_int_325_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_325_string(const char *str, char **endptr);
extern int string_to_array_int_325(const char *str, void *pValue, char **endptr);
extern int is_array_int_325_allow_double_conversion();
extern int array_int_325_to_double(const void *pValue, double *nValue);
extern int get_array_int_325_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_325(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_325_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_325_Utils;

/****************************************************************
 ** array_int_262 
 ****************************************************************/
extern int array_int_262_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_262_string(const char *str, char **endptr);
extern int string_to_array_int_262(const char *str, void *pValue, char **endptr);
extern int is_array_int_262_allow_double_conversion();
extern int array_int_262_to_double(const void *pValue, double *nValue);
extern int get_array_int_262_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_262(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_262_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_262_Utils;

/****************************************************************
 ** struct__158390 
 ****************************************************************/
extern int struct__158390_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158390_string(const char *str, char **endptr);
extern int string_to_struct__158390(const char *str, void *pValue, char **endptr);
extern int is_struct__158390_allow_double_conversion();
extern int struct__158390_to_double(const void *pValue, double *nValue);
extern int get_struct__158390_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158390(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158390_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158390_Utils;

/****************************************************************
 ** struct__158401 
 ****************************************************************/
extern int struct__158401_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158401_string(const char *str, char **endptr);
extern int string_to_struct__158401(const char *str, void *pValue, char **endptr);
extern int is_struct__158401_allow_double_conversion();
extern int struct__158401_to_double(const void *pValue, double *nValue);
extern int get_struct__158401_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158401(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158401_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158401_Utils;

/****************************************************************
 ** struct__158434 
 ****************************************************************/
extern int struct__158434_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158434_string(const char *str, char **endptr);
extern int string_to_struct__158434(const char *str, void *pValue, char **endptr);
extern int is_struct__158434_allow_double_conversion();
extern int struct__158434_to_double(const void *pValue, double *nValue);
extern int get_struct__158434_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158434(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158434_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158434_Utils;

/****************************************************************
 ** struct__158440 
 ****************************************************************/
extern int struct__158440_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158440_string(const char *str, char **endptr);
extern int string_to_struct__158440(const char *str, void *pValue, char **endptr);
extern int is_struct__158440_allow_double_conversion();
extern int struct__158440_to_double(const void *pValue, double *nValue);
extern int get_struct__158440_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158440(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158440_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158440_Utils;

/****************************************************************
 ** struct__158466 
 ****************************************************************/
extern int struct__158466_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158466_string(const char *str, char **endptr);
extern int string_to_struct__158466(const char *str, void *pValue, char **endptr);
extern int is_struct__158466_allow_double_conversion();
extern int struct__158466_to_double(const void *pValue, double *nValue);
extern int get_struct__158466_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158466(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158466_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158466_Utils;

/****************************************************************
 ** struct__158486 
 ****************************************************************/
extern int struct__158486_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158486_string(const char *str, char **endptr);
extern int string_to_struct__158486(const char *str, void *pValue, char **endptr);
extern int is_struct__158486_allow_double_conversion();
extern int struct__158486_to_double(const void *pValue, double *nValue);
extern int get_struct__158486_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158486(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158486_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158486_Utils;

/****************************************************************
 ** struct__158493 
 ****************************************************************/
extern int struct__158493_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158493_string(const char *str, char **endptr);
extern int string_to_struct__158493(const char *str, void *pValue, char **endptr);
extern int is_struct__158493_allow_double_conversion();
extern int struct__158493_to_double(const void *pValue, double *nValue);
extern int get_struct__158493_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158493(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158493_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158493_Utils;

/****************************************************************
 ** struct__158498 
 ****************************************************************/
extern int struct__158498_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158498_string(const char *str, char **endptr);
extern int string_to_struct__158498(const char *str, void *pValue, char **endptr);
extern int is_struct__158498_allow_double_conversion();
extern int struct__158498_to_double(const void *pValue, double *nValue);
extern int get_struct__158498_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158498(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158498_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158498_Utils;

/****************************************************************
 ** struct__158503 
 ****************************************************************/
extern int struct__158503_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158503_string(const char *str, char **endptr);
extern int string_to_struct__158503(const char *str, void *pValue, char **endptr);
extern int is_struct__158503_allow_double_conversion();
extern int struct__158503_to_double(const void *pValue, double *nValue);
extern int get_struct__158503_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158503(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158503_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158503_Utils;

/****************************************************************
 ** struct__158511 
 ****************************************************************/
extern int struct__158511_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158511_string(const char *str, char **endptr);
extern int string_to_struct__158511(const char *str, void *pValue, char **endptr);
extern int is_struct__158511_allow_double_conversion();
extern int struct__158511_to_double(const void *pValue, double *nValue);
extern int get_struct__158511_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158511(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158511_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158511_Utils;

/****************************************************************
 ** struct__158518 
 ****************************************************************/
extern int struct__158518_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158518_string(const char *str, char **endptr);
extern int string_to_struct__158518(const char *str, void *pValue, char **endptr);
extern int is_struct__158518_allow_double_conversion();
extern int struct__158518_to_double(const void *pValue, double *nValue);
extern int get_struct__158518_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158518(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158518_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158518_Utils;

/****************************************************************
 ** struct__158523 
 ****************************************************************/
extern int struct__158523_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158523_string(const char *str, char **endptr);
extern int string_to_struct__158523(const char *str, void *pValue, char **endptr);
extern int is_struct__158523_allow_double_conversion();
extern int struct__158523_to_double(const void *pValue, double *nValue);
extern int get_struct__158523_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158523(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158523_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158523_Utils;

/****************************************************************
 ** struct__158532 
 ****************************************************************/
extern int struct__158532_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158532_string(const char *str, char **endptr);
extern int string_to_struct__158532(const char *str, void *pValue, char **endptr);
extern int is_struct__158532_allow_double_conversion();
extern int struct__158532_to_double(const void *pValue, double *nValue);
extern int get_struct__158532_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158532(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158532_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158532_Utils;

/****************************************************************
 ** struct__158541 
 ****************************************************************/
extern int struct__158541_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158541_string(const char *str, char **endptr);
extern int string_to_struct__158541(const char *str, void *pValue, char **endptr);
extern int is_struct__158541_allow_double_conversion();
extern int struct__158541_to_double(const void *pValue, double *nValue);
extern int get_struct__158541_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158541(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158541_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158541_Utils;

/****************************************************************
 ** struct__158550 
 ****************************************************************/
extern int struct__158550_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158550_string(const char *str, char **endptr);
extern int string_to_struct__158550(const char *str, void *pValue, char **endptr);
extern int is_struct__158550_allow_double_conversion();
extern int struct__158550_to_double(const void *pValue, double *nValue);
extern int get_struct__158550_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158550(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158550_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158550_Utils;

/****************************************************************
 ** array__158556 
 ****************************************************************/
extern int array__158556_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158556_string(const char *str, char **endptr);
extern int string_to_array__158556(const char *str, void *pValue, char **endptr);
extern int is_array__158556_allow_double_conversion();
extern int array__158556_to_double(const void *pValue, double *nValue);
extern int get_array__158556_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158556(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158556_default_value(void *pValue);
extern SimTypeUtils _Type_array__158556_Utils;

/****************************************************************
 ** struct__158559 
 ****************************************************************/
extern int struct__158559_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158559_string(const char *str, char **endptr);
extern int string_to_struct__158559(const char *str, void *pValue, char **endptr);
extern int is_struct__158559_allow_double_conversion();
extern int struct__158559_to_double(const void *pValue, double *nValue);
extern int get_struct__158559_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158559(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158559_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158559_Utils;

/****************************************************************
 ** struct__158566 
 ****************************************************************/
extern int struct__158566_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158566_string(const char *str, char **endptr);
extern int string_to_struct__158566(const char *str, void *pValue, char **endptr);
extern int is_struct__158566_allow_double_conversion();
extern int struct__158566_to_double(const void *pValue, double *nValue);
extern int get_struct__158566_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158566(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158566_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158566_Utils;

/****************************************************************
 ** struct__158583 
 ****************************************************************/
extern int struct__158583_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158583_string(const char *str, char **endptr);
extern int string_to_struct__158583(const char *str, void *pValue, char **endptr);
extern int is_struct__158583_allow_double_conversion();
extern int struct__158583_to_double(const void *pValue, double *nValue);
extern int get_struct__158583_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158583(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158583_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158583_Utils;

/****************************************************************
 ** struct__158595 
 ****************************************************************/
extern int struct__158595_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158595_string(const char *str, char **endptr);
extern int string_to_struct__158595(const char *str, void *pValue, char **endptr);
extern int is_struct__158595_allow_double_conversion();
extern int struct__158595_to_double(const void *pValue, double *nValue);
extern int get_struct__158595_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158595(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158595_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158595_Utils;

/****************************************************************
 ** array__158603 
 ****************************************************************/
extern int array__158603_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158603_string(const char *str, char **endptr);
extern int string_to_array__158603(const char *str, void *pValue, char **endptr);
extern int is_array__158603_allow_double_conversion();
extern int array__158603_to_double(const void *pValue, double *nValue);
extern int get_array__158603_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158603(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158603_default_value(void *pValue);
extern SimTypeUtils _Type_array__158603_Utils;

/****************************************************************
 ** struct__158606 
 ****************************************************************/
extern int struct__158606_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158606_string(const char *str, char **endptr);
extern int string_to_struct__158606(const char *str, void *pValue, char **endptr);
extern int is_struct__158606_allow_double_conversion();
extern int struct__158606_to_double(const void *pValue, double *nValue);
extern int get_struct__158606_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158606(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158606_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158606_Utils;

/****************************************************************
 ** struct__158614 
 ****************************************************************/
extern int struct__158614_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158614_string(const char *str, char **endptr);
extern int string_to_struct__158614(const char *str, void *pValue, char **endptr);
extern int is_struct__158614_allow_double_conversion();
extern int struct__158614_to_double(const void *pValue, double *nValue);
extern int get_struct__158614_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158614(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158614_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158614_Utils;

/****************************************************************
 ** array_bool_30 
 ****************************************************************/
extern int array_bool_30_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_30_string(const char *str, char **endptr);
extern int string_to_array_bool_30(const char *str, void *pValue, char **endptr);
extern int is_array_bool_30_allow_double_conversion();
extern int array_bool_30_to_double(const void *pValue, double *nValue);
extern int get_array_bool_30_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_30(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_30_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_30_Utils;

/****************************************************************
 ** array_bool_4 
 ****************************************************************/
extern int array_bool_4_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_4_string(const char *str, char **endptr);
extern int string_to_array_bool_4(const char *str, void *pValue, char **endptr);
extern int is_array_bool_4_allow_double_conversion();
extern int array_bool_4_to_double(const void *pValue, double *nValue);
extern int get_array_bool_4_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_4(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_4_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_4_Utils;

/****************************************************************
 ** struct__158634 
 ****************************************************************/
extern int struct__158634_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158634_string(const char *str, char **endptr);
extern int string_to_struct__158634(const char *str, void *pValue, char **endptr);
extern int is_struct__158634_allow_double_conversion();
extern int struct__158634_to_double(const void *pValue, double *nValue);
extern int get_struct__158634_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158634(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158634_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158634_Utils;

/****************************************************************
 ** array_bool_1 
 ****************************************************************/
extern int array_bool_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_1_string(const char *str, char **endptr);
extern int string_to_array_bool_1(const char *str, void *pValue, char **endptr);
extern int is_array_bool_1_allow_double_conversion();
extern int array_bool_1_to_double(const void *pValue, double *nValue);
extern int get_array_bool_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_1_Utils;

/****************************************************************
 ** array_real_1 
 ****************************************************************/
extern int array_real_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_1_string(const char *str, char **endptr);
extern int string_to_array_real_1(const char *str, void *pValue, char **endptr);
extern int is_array_real_1_allow_double_conversion();
extern int array_real_1_to_double(const void *pValue, double *nValue);
extern int get_array_real_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_1_Utils;

/****************************************************************
 ** array__158645 
 ****************************************************************/
extern int array__158645_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158645_string(const char *str, char **endptr);
extern int string_to_array__158645(const char *str, void *pValue, char **endptr);
extern int is_array__158645_allow_double_conversion();
extern int array__158645_to_double(const void *pValue, double *nValue);
extern int get_array__158645_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158645(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158645_default_value(void *pValue);
extern SimTypeUtils _Type_array__158645_Utils;

/****************************************************************
 ** array_real_100_1 
 ****************************************************************/
extern int array_real_100_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_1_string(const char *str, char **endptr);
extern int string_to_array_real_100_1(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_1_allow_double_conversion();
extern int array_real_100_1_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_1_Utils;

/****************************************************************
 ** array_real_100_13 
 ****************************************************************/
extern int array_real_100_13_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_13_string(const char *str, char **endptr);
extern int string_to_array_real_100_13(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_13_allow_double_conversion();
extern int array_real_100_13_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_13_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_13(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_13_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_13_Utils;

/****************************************************************
 ** array_real_13 
 ****************************************************************/
extern int array_real_13_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_13_string(const char *str, char **endptr);
extern int string_to_array_real_13(const char *str, void *pValue, char **endptr);
extern int is_array_real_13_allow_double_conversion();
extern int array_real_13_to_double(const void *pValue, double *nValue);
extern int get_array_real_13_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_13(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_13_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_13_Utils;

/****************************************************************
 ** array_real_8 
 ****************************************************************/
extern int array_real_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_8_string(const char *str, char **endptr);
extern int string_to_array_real_8(const char *str, void *pValue, char **endptr);
extern int is_array_real_8_allow_double_conversion();
extern int array_real_8_to_double(const void *pValue, double *nValue);
extern int get_array_real_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_8_Utils;

/****************************************************************
 ** array_real_100_8 
 ****************************************************************/
extern int array_real_100_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_8_string(const char *str, char **endptr);
extern int string_to_array_real_100_8(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_8_allow_double_conversion();
extern int array_real_100_8_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_8_Utils;

/****************************************************************
 ** array_real_100_6 
 ****************************************************************/
extern int array_real_100_6_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_6_string(const char *str, char **endptr);
extern int string_to_array_real_100_6(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_6_allow_double_conversion();
extern int array_real_100_6_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_6_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_6(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_6_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_6_Utils;

/****************************************************************
 ** array_real_6 
 ****************************************************************/
extern int array_real_6_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_6_string(const char *str, char **endptr);
extern int string_to_array_real_6(const char *str, void *pValue, char **endptr);
extern int is_array_real_6_allow_double_conversion();
extern int array_real_6_to_double(const void *pValue, double *nValue);
extern int get_array_real_6_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_6(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_6_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_6_Utils;

/****************************************************************
 ** array_bool_8 
 ****************************************************************/
extern int array_bool_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_8_string(const char *str, char **endptr);
extern int string_to_array_bool_8(const char *str, void *pValue, char **endptr);
extern int is_array_bool_8_allow_double_conversion();
extern int array_bool_8_to_double(const void *pValue, double *nValue);
extern int get_array_bool_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_8_Utils;

/****************************************************************
 ** array__158672 
 ****************************************************************/
extern int array__158672_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158672_string(const char *str, char **endptr);
extern int string_to_array__158672(const char *str, void *pValue, char **endptr);
extern int is_array__158672_allow_double_conversion();
extern int array__158672_to_double(const void *pValue, double *nValue);
extern int get_array__158672_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158672(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158672_default_value(void *pValue);
extern SimTypeUtils _Type_array__158672_Utils;

/****************************************************************
 ** array__158675 
 ****************************************************************/
extern int array__158675_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158675_string(const char *str, char **endptr);
extern int string_to_array__158675(const char *str, void *pValue, char **endptr);
extern int is_array__158675_allow_double_conversion();
extern int array__158675_to_double(const void *pValue, double *nValue);
extern int get_array__158675_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158675(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158675_default_value(void *pValue);
extern SimTypeUtils _Type_array__158675_Utils;

/****************************************************************
 ** array__158678 
 ****************************************************************/
extern int array__158678_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158678_string(const char *str, char **endptr);
extern int string_to_array__158678(const char *str, void *pValue, char **endptr);
extern int is_array__158678_allow_double_conversion();
extern int array__158678_to_double(const void *pValue, double *nValue);
extern int get_array__158678_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158678(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158678_default_value(void *pValue);
extern SimTypeUtils _Type_array__158678_Utils;

/****************************************************************
 ** array_int_33 
 ****************************************************************/
extern int array_int_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_33_string(const char *str, char **endptr);
extern int string_to_array_int_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_33_allow_double_conversion();
extern int array_int_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_33_Utils;

/****************************************************************
 ** array_int_30 
 ****************************************************************/
extern int array_int_30_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_30_string(const char *str, char **endptr);
extern int string_to_array_int_30(const char *str, void *pValue, char **endptr);
extern int is_array_int_30_allow_double_conversion();
extern int array_int_30_to_double(const void *pValue, double *nValue);
extern int get_array_int_30_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_30(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_30_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_30_Utils;

/****************************************************************
 ** array__158687 
 ****************************************************************/
extern int array__158687_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158687_string(const char *str, char **endptr);
extern int string_to_array__158687(const char *str, void *pValue, char **endptr);
extern int is_array__158687_allow_double_conversion();
extern int array__158687_to_double(const void *pValue, double *nValue);
extern int get_array__158687_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158687(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158687_default_value(void *pValue);
extern SimTypeUtils _Type_array__158687_Utils;

/****************************************************************
 ** array__158690 
 ****************************************************************/
extern int array__158690_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158690_string(const char *str, char **endptr);
extern int string_to_array__158690(const char *str, void *pValue, char **endptr);
extern int is_array__158690_allow_double_conversion();
extern int array__158690_to_double(const void *pValue, double *nValue);
extern int get_array__158690_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158690(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158690_default_value(void *pValue);
extern SimTypeUtils _Type_array__158690_Utils;

/****************************************************************
 ** array_int_42 
 ****************************************************************/
extern int array_int_42_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_42_string(const char *str, char **endptr);
extern int string_to_array_int_42(const char *str, void *pValue, char **endptr);
extern int is_array_int_42_allow_double_conversion();
extern int array_int_42_to_double(const void *pValue, double *nValue);
extern int get_array_int_42_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_42(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_42_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_42_Utils;

/****************************************************************
 ** array__158696 
 ****************************************************************/
extern int array__158696_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158696_string(const char *str, char **endptr);
extern int string_to_array__158696(const char *str, void *pValue, char **endptr);
extern int is_array__158696_allow_double_conversion();
extern int array__158696_to_double(const void *pValue, double *nValue);
extern int get_array__158696_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158696(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158696_default_value(void *pValue);
extern SimTypeUtils _Type_array__158696_Utils;

/****************************************************************
 ** array_bool_5 
 ****************************************************************/
extern int array_bool_5_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_5_string(const char *str, char **endptr);
extern int string_to_array_bool_5(const char *str, void *pValue, char **endptr);
extern int is_array_bool_5_allow_double_conversion();
extern int array_bool_5_to_double(const void *pValue, double *nValue);
extern int get_array_bool_5_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_5(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_5_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_5_Utils;

/****************************************************************
 ** struct__158702 
 ****************************************************************/
extern int struct__158702_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__158702_string(const char *str, char **endptr);
extern int string_to_struct__158702(const char *str, void *pValue, char **endptr);
extern int is_struct__158702_allow_double_conversion();
extern int struct__158702_to_double(const void *pValue, double *nValue);
extern int get_struct__158702_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__158702(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__158702_default_value(void *pValue);
extern SimTypeUtils _Type_struct__158702_Utils;

/****************************************************************
 ** array__158707 
 ****************************************************************/
extern int array__158707_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__158707_string(const char *str, char **endptr);
extern int string_to_array__158707(const char *str, void *pValue, char **endptr);
extern int is_array__158707_allow_double_conversion();
extern int array__158707_to_double(const void *pValue, double *nValue);
extern int get_array__158707_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__158707(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__158707_default_value(void *pValue);
extern SimTypeUtils _Type_array__158707_Utils;

/****************************************************************
 ** array_int_444 
 ****************************************************************/
extern int array_int_444_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_444_string(const char *str, char **endptr);
extern int string_to_array_int_444(const char *str, void *pValue, char **endptr);
extern int is_array_int_444_allow_double_conversion();
extern int array_int_444_to_double(const void *pValue, double *nValue);
extern int get_array_int_444_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_444(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_444_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_444_Utils;

/****************************************************************
 ** array_int_264 
 ****************************************************************/
extern int array_int_264_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_264_string(const char *str, char **endptr);
extern int string_to_array_int_264(const char *str, void *pValue, char **endptr);
extern int is_array_int_264_allow_double_conversion();
extern int array_int_264_to_double(const void *pValue, double *nValue);
extern int get_array_int_264_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_264(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_264_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_264_Utils;

/****************************************************************
 ** array_int_350 
 ****************************************************************/
extern int array_int_350_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_350_string(const char *str, char **endptr);
extern int string_to_array_int_350(const char *str, void *pValue, char **endptr);
extern int is_array_int_350_allow_double_conversion();
extern int array_int_350_to_double(const void *pValue, double *nValue);
extern int get_array_int_350_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_350(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_350_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_350_Utils;

/****************************************************************
 ** array_int_396 
 ****************************************************************/
extern int array_int_396_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_396_string(const char *str, char **endptr);
extern int string_to_array_int_396(const char *str, void *pValue, char **endptr);
extern int is_array_int_396_allow_double_conversion();
extern int array_int_396_to_double(const void *pValue, double *nValue);
extern int get_array_int_396_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_396(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_396_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_396_Utils;

/****************************************************************
 ** array_int_432 
 ****************************************************************/
extern int array_int_432_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_432_string(const char *str, char **endptr);
extern int string_to_array_int_432(const char *str, void *pValue, char **endptr);
extern int is_array_int_432_allow_double_conversion();
extern int array_int_432_to_double(const void *pValue, double *nValue);
extern int get_array_int_432_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_432(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_432_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_432_Utils;

/****************************************************************
 ** array_int_428 
 ****************************************************************/
extern int array_int_428_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_428_string(const char *str, char **endptr);
extern int string_to_array_int_428(const char *str, void *pValue, char **endptr);
extern int is_array_int_428_allow_double_conversion();
extern int array_int_428_to_double(const void *pValue, double *nValue);
extern int get_array_int_428_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_428(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_428_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_428_Utils;

/****************************************************************
 ** array_int_395 
 ****************************************************************/
extern int array_int_395_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_395_string(const char *str, char **endptr);
extern int string_to_array_int_395(const char *str, void *pValue, char **endptr);
extern int is_array_int_395_allow_double_conversion();
extern int array_int_395_to_double(const void *pValue, double *nValue);
extern int get_array_int_395_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_395(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_395_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_395_Utils;

/****************************************************************
 ** array_int_430 
 ****************************************************************/
extern int array_int_430_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_430_string(const char *str, char **endptr);
extern int string_to_array_int_430(const char *str, void *pValue, char **endptr);
extern int is_array_int_430_allow_double_conversion();
extern int array_int_430_to_double(const void *pValue, double *nValue);
extern int get_array_int_430_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_430(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_430_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_430_Utils;

/****************************************************************
 ** array_real_113 
 ****************************************************************/
extern int array_real_113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_113_string(const char *str, char **endptr);
extern int string_to_array_real_113(const char *str, void *pValue, char **endptr);
extern int is_array_real_113_allow_double_conversion();
extern int array_real_113_to_double(const void *pValue, double *nValue);
extern int get_array_real_113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_113_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_113_Utils;

/****************************************************************
 ** array_bool_113 
 ****************************************************************/
extern int array_bool_113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_113_string(const char *str, char **endptr);
extern int string_to_array_bool_113(const char *str, void *pValue, char **endptr);
extern int is_array_bool_113_allow_double_conversion();
extern int array_bool_113_to_double(const void *pValue, double *nValue);
extern int get_array_bool_113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_113_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_113_Utils;

/****************************************************************
 ** array__165285 
 ****************************************************************/
extern int array__165285_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__165285_string(const char *str, char **endptr);
extern int string_to_array__165285(const char *str, void *pValue, char **endptr);
extern int is_array__165285_allow_double_conversion();
extern int array__165285_to_double(const void *pValue, double *nValue);
extern int get_array__165285_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__165285(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__165285_default_value(void *pValue);
extern SimTypeUtils _Type_array__165285_Utils;

/****************************************************************
 ** array__165722 
 ****************************************************************/
extern int array__165722_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__165722_string(const char *str, char **endptr);
extern int string_to_array__165722(const char *str, void *pValue, char **endptr);
extern int is_array__165722_allow_double_conversion();
extern int array__165722_to_double(const void *pValue, double *nValue);
extern int get_array__165722_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__165722(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__165722_default_value(void *pValue);
extern SimTypeUtils _Type_array__165722_Utils;

/****************************************************************
 ** array__165961 
 ****************************************************************/
extern int array__165961_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__165961_string(const char *str, char **endptr);
extern int string_to_array__165961(const char *str, void *pValue, char **endptr);
extern int is_array__165961_allow_double_conversion();
extern int array__165961_to_double(const void *pValue, double *nValue);
extern int get_array__165961_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__165961(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__165961_default_value(void *pValue);
extern SimTypeUtils _Type_array__165961_Utils;

/****************************************************************
 ** array__166060 
 ****************************************************************/
extern int array__166060_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166060_string(const char *str, char **endptr);
extern int string_to_array__166060(const char *str, void *pValue, char **endptr);
extern int is_array__166060_allow_double_conversion();
extern int array__166060_to_double(const void *pValue, double *nValue);
extern int get_array__166060_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166060(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166060_default_value(void *pValue);
extern SimTypeUtils _Type_array__166060_Utils;

/****************************************************************
 ** array__166215 
 ****************************************************************/
extern int array__166215_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166215_string(const char *str, char **endptr);
extern int string_to_array__166215(const char *str, void *pValue, char **endptr);
extern int is_array__166215_allow_double_conversion();
extern int array__166215_to_double(const void *pValue, double *nValue);
extern int get_array__166215_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166215(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166215_default_value(void *pValue);
extern SimTypeUtils _Type_array__166215_Utils;

/****************************************************************
 ** array__166219 
 ****************************************************************/
extern int array__166219_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166219_string(const char *str, char **endptr);
extern int string_to_array__166219(const char *str, void *pValue, char **endptr);
extern int is_array__166219_allow_double_conversion();
extern int array__166219_to_double(const void *pValue, double *nValue);
extern int get_array__166219_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166219(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166219_default_value(void *pValue);
extern SimTypeUtils _Type_array__166219_Utils;

/****************************************************************
 ** array__166223 
 ****************************************************************/
extern int array__166223_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166223_string(const char *str, char **endptr);
extern int string_to_array__166223(const char *str, void *pValue, char **endptr);
extern int is_array__166223_allow_double_conversion();
extern int array__166223_to_double(const void *pValue, double *nValue);
extern int get_array__166223_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166223(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166223_default_value(void *pValue);
extern SimTypeUtils _Type_array__166223_Utils;

/****************************************************************
 ** array__166226 
 ****************************************************************/
extern int array__166226_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166226_string(const char *str, char **endptr);
extern int string_to_array__166226(const char *str, void *pValue, char **endptr);
extern int is_array__166226_allow_double_conversion();
extern int array__166226_to_double(const void *pValue, double *nValue);
extern int get_array__166226_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166226(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166226_default_value(void *pValue);
extern SimTypeUtils _Type_array__166226_Utils;

/****************************************************************
 ** array__166230 
 ****************************************************************/
extern int array__166230_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166230_string(const char *str, char **endptr);
extern int string_to_array__166230(const char *str, void *pValue, char **endptr);
extern int is_array__166230_allow_double_conversion();
extern int array__166230_to_double(const void *pValue, double *nValue);
extern int get_array__166230_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166230(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166230_default_value(void *pValue);
extern SimTypeUtils _Type_array__166230_Utils;

/****************************************************************
 ** array__166233 
 ****************************************************************/
extern int array__166233_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166233_string(const char *str, char **endptr);
extern int string_to_array__166233(const char *str, void *pValue, char **endptr);
extern int is_array__166233_allow_double_conversion();
extern int array__166233_to_double(const void *pValue, double *nValue);
extern int get_array__166233_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166233(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166233_default_value(void *pValue);
extern SimTypeUtils _Type_array__166233_Utils;

/****************************************************************
 ** array__166237 
 ****************************************************************/
extern int array__166237_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166237_string(const char *str, char **endptr);
extern int string_to_array__166237(const char *str, void *pValue, char **endptr);
extern int is_array__166237_allow_double_conversion();
extern int array__166237_to_double(const void *pValue, double *nValue);
extern int get_array__166237_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166237(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166237_default_value(void *pValue);
extern SimTypeUtils _Type_array__166237_Utils;

/****************************************************************
 ** array__166359 
 ****************************************************************/
extern int array__166359_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__166359_string(const char *str, char **endptr);
extern int string_to_array__166359(const char *str, void *pValue, char **endptr);
extern int is_array__166359_allow_double_conversion();
extern int array__166359_to_double(const void *pValue, double *nValue);
extern int get_array__166359_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__166359(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__166359_default_value(void *pValue);
extern SimTypeUtils _Type_array__166359_Utils;

/****************************************************************
 ** NID_MN 
 ****************************************************************/
extern int NID_MN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_MN_string(const char *str, char **endptr);
extern int string_to_NID_MN(const char *str, void *pValue, char **endptr);
extern int is_NID_MN_allow_double_conversion();
extern int NID_MN_to_double(const void *pValue, double *nValue);
extern int get_NID_MN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_MN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_MN_default_value(void *pValue);
extern SimTypeUtils _Type_NID_MN_Utils;

/****************************************************************
 ** M_MODE 
 ****************************************************************/
extern int M_MODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_MODE_string(const char *str, char **endptr);
extern int string_to_M_MODE(const char *str, void *pValue, char **endptr);
extern int is_M_MODE_allow_double_conversion();
extern int M_MODE_to_double(const void *pValue, double *nValue);
extern int get_M_MODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_MODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_MODE_default_value(void *pValue);
extern SimTypeUtils _Type_M_MODE_Utils;

/****************************************************************
 ** M_LEVEL 
 ****************************************************************/
extern int M_LEVEL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LEVEL_string(const char *str, char **endptr);
extern int string_to_M_LEVEL(const char *str, void *pValue, char **endptr);
extern int is_M_LEVEL_allow_double_conversion();
extern int M_LEVEL_to_double(const void *pValue, double *nValue);
extern int get_M_LEVEL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LEVEL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LEVEL_default_value(void *pValue);
extern SimTypeUtils _Type_M_LEVEL_Utils;

/****************************************************************
 ** L_TEXT 
 ****************************************************************/
extern int L_TEXT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TEXT_string(const char *str, char **endptr);
extern int string_to_L_TEXT(const char *str, void *pValue, char **endptr);
extern int is_L_TEXT_allow_double_conversion();
extern int L_TEXT_to_double(const void *pValue, double *nValue);
extern int get_L_TEXT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TEXT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TEXT_default_value(void *pValue);
extern SimTypeUtils _Type_L_TEXT_Utils;

/****************************************************************
 ** M_VERSION 
 ****************************************************************/
extern int M_VERSION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_VERSION_string(const char *str, char **endptr);
extern int string_to_M_VERSION(const char *str, void *pValue, char **endptr);
extern int is_M_VERSION_allow_double_conversion();
extern int M_VERSION_to_double(const void *pValue, double *nValue);
extern int get_M_VERSION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_VERSION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_VERSION_default_value(void *pValue);
extern SimTypeUtils _Type_M_VERSION_Utils;

/****************************************************************
 ** NID_C 
 ****************************************************************/
extern int NID_C_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_C_string(const char *str, char **endptr);
extern int string_to_NID_C(const char *str, void *pValue, char **endptr);
extern int is_NID_C_allow_double_conversion();
extern int NID_C_to_double(const void *pValue, double *nValue);
extern int get_NID_C_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_C(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_C_default_value(void *pValue);
extern SimTypeUtils _Type_NID_C_Utils;

/****************************************************************
 ** NID_RADIO 
 ****************************************************************/
extern int NID_RADIO_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_RADIO_string(const char *str, char **endptr);
extern int string_to_NID_RADIO(const char *str, void *pValue, char **endptr);
extern int is_NID_RADIO_allow_double_conversion();
extern int NID_RADIO_to_double(const void *pValue, double *nValue);
extern int get_NID_RADIO_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_RADIO(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_RADIO_default_value(void *pValue);
extern SimTypeUtils _Type_NID_RADIO_Utils;

/****************************************************************
 ** NID_RBC 
 ****************************************************************/
extern int NID_RBC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_RBC_string(const char *str, char **endptr);
extern int string_to_NID_RBC(const char *str, void *pValue, char **endptr);
extern int is_NID_RBC_allow_double_conversion();
extern int NID_RBC_to_double(const void *pValue, double *nValue);
extern int get_NID_RBC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_RBC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_RBC_default_value(void *pValue);
extern SimTypeUtils _Type_NID_RBC_Utils;

/****************************************************************
 ** NID_BG 
 ****************************************************************/
extern int NID_BG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_BG_string(const char *str, char **endptr);
extern int string_to_NID_BG(const char *str, void *pValue, char **endptr);
extern int is_NID_BG_allow_double_conversion();
extern int NID_BG_to_double(const void *pValue, double *nValue);
extern int get_NID_BG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_BG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_BG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_BG_Utils;

/****************************************************************
 ** Q_LINK 
 ****************************************************************/
extern int Q_LINK_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LINK_string(const char *str, char **endptr);
extern int string_to_Q_LINK(const char *str, void *pValue, char **endptr);
extern int is_Q_LINK_allow_double_conversion();
extern int Q_LINK_to_double(const void *pValue, double *nValue);
extern int get_Q_LINK_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LINK(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LINK_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LINK_Utils;

/****************************************************************
 ** NID_LRBG 
 ****************************************************************/
extern int NID_LRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_LRBG_string(const char *str, char **endptr);
extern int string_to_NID_LRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LRBG_allow_double_conversion();
extern int NID_LRBG_to_double(const void *pValue, double *nValue);
extern int get_NID_LRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_LRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_LRBG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_LRBG_Utils;

/****************************************************************
 ** Q_DIR 
 ****************************************************************/
extern int Q_DIR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIR_string(const char *str, char **endptr);
extern int string_to_Q_DIR(const char *str, void *pValue, char **endptr);
extern int is_Q_DIR_allow_double_conversion();
extern int Q_DIR_to_double(const void *pValue, double *nValue);
extern int get_Q_DIR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIR_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIR_Utils;

/****************************************************************
 ** Q_SCALE 
 ****************************************************************/
extern int Q_SCALE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SCALE_string(const char *str, char **endptr);
extern int string_to_Q_SCALE(const char *str, void *pValue, char **endptr);
extern int is_Q_SCALE_allow_double_conversion();
extern int Q_SCALE_to_double(const void *pValue, double *nValue);
extern int get_Q_SCALE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SCALE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SCALE_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SCALE_Utils;

/****************************************************************
 ** D_LINK 
 ****************************************************************/
extern int D_LINK_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LINK_string(const char *str, char **endptr);
extern int string_to_D_LINK(const char *str, void *pValue, char **endptr);
extern int is_D_LINK_allow_double_conversion();
extern int D_LINK_to_double(const void *pValue, double *nValue);
extern int get_D_LINK_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LINK(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LINK_default_value(void *pValue);
extern SimTypeUtils _Type_D_LINK_Utils;

/****************************************************************
 ** Q_NEWCOUNTRY 
 ****************************************************************/
extern int Q_NEWCOUNTRY_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NEWCOUNTRY_string(const char *str, char **endptr);
extern int string_to_Q_NEWCOUNTRY(const char *str, void *pValue, char **endptr);
extern int is_Q_NEWCOUNTRY_allow_double_conversion();
extern int Q_NEWCOUNTRY_to_double(const void *pValue, double *nValue);
extern int get_Q_NEWCOUNTRY_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NEWCOUNTRY(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NEWCOUNTRY_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NEWCOUNTRY_Utils;

/****************************************************************
 ** Q_LINKORIENTATION 
 ****************************************************************/
extern int Q_LINKORIENTATION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LINKORIENTATION_string(const char *str, char **endptr);
extern int string_to_Q_LINKORIENTATION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKORIENTATION_allow_double_conversion();
extern int Q_LINKORIENTATION_to_double(const void *pValue, double *nValue);
extern int get_Q_LINKORIENTATION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LINKORIENTATION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LINKORIENTATION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LINKORIENTATION_Utils;

/****************************************************************
 ** Q_LINKREACTION 
 ****************************************************************/
extern int Q_LINKREACTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LINKREACTION_string(const char *str, char **endptr);
extern int string_to_Q_LINKREACTION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKREACTION_allow_double_conversion();
extern int Q_LINKREACTION_to_double(const void *pValue, double *nValue);
extern int get_Q_LINKREACTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LINKREACTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LINKREACTION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LINKREACTION_Utils;

/****************************************************************
 ** Q_LOCACC 
 ****************************************************************/
extern int Q_LOCACC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LOCACC_string(const char *str, char **endptr);
extern int string_to_Q_LOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_LOCACC_allow_double_conversion();
extern int Q_LOCACC_to_double(const void *pValue, double *nValue);
extern int get_Q_LOCACC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LOCACC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LOCACC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LOCACC_Utils;

/****************************************************************
 ** Q_UPDOWN 
 ****************************************************************/
extern int Q_UPDOWN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_UPDOWN_string(const char *str, char **endptr);
extern int string_to_Q_UPDOWN(const char *str, void *pValue, char **endptr);
extern int is_Q_UPDOWN_allow_double_conversion();
extern int Q_UPDOWN_to_double(const void *pValue, double *nValue);
extern int get_Q_UPDOWN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_UPDOWN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_UPDOWN_default_value(void *pValue);
extern SimTypeUtils _Type_Q_UPDOWN_Utils;

/****************************************************************
 ** Q_MEDIA 
 ****************************************************************/
extern int Q_MEDIA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_MEDIA_string(const char *str, char **endptr);
extern int string_to_Q_MEDIA(const char *str, void *pValue, char **endptr);
extern int is_Q_MEDIA_allow_double_conversion();
extern int Q_MEDIA_to_double(const void *pValue, double *nValue);
extern int get_Q_MEDIA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_MEDIA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_MEDIA_default_value(void *pValue);
extern SimTypeUtils _Type_Q_MEDIA_Utils;

/****************************************************************
 ** N_TOTAL 
 ****************************************************************/
extern int N_TOTAL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_TOTAL_string(const char *str, char **endptr);
extern int string_to_N_TOTAL(const char *str, void *pValue, char **endptr);
extern int is_N_TOTAL_allow_double_conversion();
extern int N_TOTAL_to_double(const void *pValue, double *nValue);
extern int get_N_TOTAL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_TOTAL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_TOTAL_default_value(void *pValue);
extern SimTypeUtils _Type_N_TOTAL_Utils;

/****************************************************************
 ** M_MCOUNT 
 ****************************************************************/
extern int M_MCOUNT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_MCOUNT_string(const char *str, char **endptr);
extern int string_to_M_MCOUNT(const char *str, void *pValue, char **endptr);
extern int is_M_MCOUNT_allow_double_conversion();
extern int M_MCOUNT_to_double(const void *pValue, double *nValue);
extern int get_M_MCOUNT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_MCOUNT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_MCOUNT_default_value(void *pValue);
extern SimTypeUtils _Type_M_MCOUNT_Utils;

/****************************************************************
 ** Q_NVLOCACC 
 ****************************************************************/
extern int Q_NVLOCACC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVLOCACC_string(const char *str, char **endptr);
extern int string_to_Q_NVLOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_NVLOCACC_allow_double_conversion();
extern int Q_NVLOCACC_to_double(const void *pValue, double *nValue);
extern int get_Q_NVLOCACC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVLOCACC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVLOCACC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVLOCACC_Utils;

/****************************************************************
 ** Q_DIRLRBG 
 ****************************************************************/
extern int Q_DIRLRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIRLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DIRLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRLRBG_allow_double_conversion();
extern int Q_DIRLRBG_to_double(const void *pValue, double *nValue);
extern int get_Q_DIRLRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIRLRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIRLRBG_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIRLRBG_Utils;

/****************************************************************
 ** Q_DIRTRAIN 
 ****************************************************************/
extern int Q_DIRTRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIRTRAIN_string(const char *str, char **endptr);
extern int string_to_Q_DIRTRAIN(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRTRAIN_allow_double_conversion();
extern int Q_DIRTRAIN_to_double(const void *pValue, double *nValue);
extern int get_Q_DIRTRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIRTRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIRTRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIRTRAIN_Utils;

/****************************************************************
 ** Q_DLRBG 
 ****************************************************************/
extern int Q_DLRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DLRBG_allow_double_conversion();
extern int Q_DLRBG_to_double(const void *pValue, double *nValue);
extern int get_Q_DLRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DLRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DLRBG_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DLRBG_Utils;

/****************************************************************
 ** NID_NTC 
 ****************************************************************/
extern int NID_NTC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_NTC_string(const char *str, char **endptr);
extern int string_to_NID_NTC(const char *str, void *pValue, char **endptr);
extern int is_NID_NTC_allow_double_conversion();
extern int NID_NTC_to_double(const void *pValue, double *nValue);
extern int get_NID_NTC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_NTC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_NTC_default_value(void *pValue);
extern SimTypeUtils _Type_NID_NTC_Utils;

/****************************************************************
 ** M_AXLELOADCAT 
 ****************************************************************/
extern int M_AXLELOADCAT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_AXLELOADCAT_string(const char *str, char **endptr);
extern int string_to_M_AXLELOADCAT(const char *str, void *pValue, char **endptr);
extern int is_M_AXLELOADCAT_allow_double_conversion();
extern int M_AXLELOADCAT_to_double(const void *pValue, double *nValue);
extern int get_M_AXLELOADCAT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_AXLELOADCAT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_AXLELOADCAT_default_value(void *pValue);
extern SimTypeUtils _Type_M_AXLELOADCAT_Utils;

/****************************************************************
 ** Q_TEXTCLASS 
 ****************************************************************/
extern int Q_TEXTCLASS_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_TEXTCLASS_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCLASS(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCLASS_allow_double_conversion();
extern int Q_TEXTCLASS_to_double(const void *pValue, double *nValue);
extern int get_Q_TEXTCLASS_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_TEXTCLASS(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_TEXTCLASS_default_value(void *pValue);
extern SimTypeUtils _Type_Q_TEXTCLASS_Utils;

/****************************************************************
 ** Q_TEXTCONFIRM 
 ****************************************************************/
extern int Q_TEXTCONFIRM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_TEXTCONFIRM_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCONFIRM(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCONFIRM_allow_double_conversion();
extern int Q_TEXTCONFIRM_to_double(const void *pValue, double *nValue);
extern int get_Q_TEXTCONFIRM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_TEXTCONFIRM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_TEXTCONFIRM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_TEXTCONFIRM_Utils;

/****************************************************************
 ** D_TRACKCOND 
 ****************************************************************/
extern int D_TRACKCOND_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_D_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_D_TRACKCOND_allow_double_conversion();
extern int D_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int get_D_TRACKCOND_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_TRACKCOND_default_value(void *pValue);
extern SimTypeUtils _Type_D_TRACKCOND_Utils;

/****************************************************************
 ** M_TRACKCOND 
 ****************************************************************/
extern int M_TRACKCOND_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_M_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_M_TRACKCOND_allow_double_conversion();
extern int M_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int get_M_TRACKCOND_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TRACKCOND_default_value(void *pValue);
extern SimTypeUtils _Type_M_TRACKCOND_Utils;

/****************************************************************
 ** NID_OPERATIONAL 
 ****************************************************************/
extern int NID_OPERATIONAL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_OPERATIONAL_string(const char *str, char **endptr);
extern int string_to_NID_OPERATIONAL(const char *str, void *pValue, char **endptr);
extern int is_NID_OPERATIONAL_allow_double_conversion();
extern int NID_OPERATIONAL_to_double(const void *pValue, double *nValue);
extern int get_NID_OPERATIONAL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_OPERATIONAL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_OPERATIONAL_default_value(void *pValue);
extern SimTypeUtils _Type_NID_OPERATIONAL_Utils;

/****************************************************************
 ** NC_TRAIN 
 ****************************************************************/
extern int NC_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_TRAIN_string(const char *str, char **endptr);
extern int string_to_NC_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_TRAIN_allow_double_conversion();
extern int NC_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_NC_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_NC_TRAIN_Utils;

/****************************************************************
 ** M_AIRTIGHT 
 ****************************************************************/
extern int M_AIRTIGHT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_AIRTIGHT_string(const char *str, char **endptr);
extern int string_to_M_AIRTIGHT(const char *str, void *pValue, char **endptr);
extern int is_M_AIRTIGHT_allow_double_conversion();
extern int M_AIRTIGHT_to_double(const void *pValue, double *nValue);
extern int get_M_AIRTIGHT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_AIRTIGHT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_AIRTIGHT_default_value(void *pValue);
extern SimTypeUtils _Type_M_AIRTIGHT_Utils;

/****************************************************************
 ** M_LOADINGGAUGE 
 ****************************************************************/
extern int M_LOADINGGAUGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LOADINGGAUGE_string(const char *str, char **endptr);
extern int string_to_M_LOADINGGAUGE(const char *str, void *pValue, char **endptr);
extern int is_M_LOADINGGAUGE_allow_double_conversion();
extern int M_LOADINGGAUGE_to_double(const void *pValue, double *nValue);
extern int get_M_LOADINGGAUGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LOADINGGAUGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LOADINGGAUGE_default_value(void *pValue);
extern SimTypeUtils _Type_M_LOADINGGAUGE_Utils;

/****************************************************************
 ** M_ADHESION 
 ****************************************************************/
extern int M_ADHESION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_ADHESION_string(const char *str, char **endptr);
extern int string_to_M_ADHESION(const char *str, void *pValue, char **endptr);
extern int is_M_ADHESION_allow_double_conversion();
extern int M_ADHESION_to_double(const void *pValue, double *nValue);
extern int get_M_ADHESION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_ADHESION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_ADHESION_default_value(void *pValue);
extern SimTypeUtils _Type_M_ADHESION_Utils;

/****************************************************************
 ** NC_CDTRAIN 
 ****************************************************************/
extern int NC_CDTRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_CDTRAIN_string(const char *str, char **endptr);
extern int string_to_NC_CDTRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_CDTRAIN_allow_double_conversion();
extern int NC_CDTRAIN_to_double(const void *pValue, double *nValue);
extern int get_NC_CDTRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_CDTRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_CDTRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_NC_CDTRAIN_Utils;

/****************************************************************
 ** M_VOLTAGE 
 ****************************************************************/
extern int M_VOLTAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_VOLTAGE_string(const char *str, char **endptr);
extern int string_to_M_VOLTAGE(const char *str, void *pValue, char **endptr);
extern int is_M_VOLTAGE_allow_double_conversion();
extern int M_VOLTAGE_to_double(const void *pValue, double *nValue);
extern int get_M_VOLTAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_VOLTAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_VOLTAGE_default_value(void *pValue);
extern SimTypeUtils _Type_M_VOLTAGE_Utils;

/****************************************************************
 ** NID_CTRACTION 
 ****************************************************************/
extern int NID_CTRACTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_CTRACTION_string(const char *str, char **endptr);
extern int string_to_NID_CTRACTION(const char *str, void *pValue, char **endptr);
extern int is_NID_CTRACTION_allow_double_conversion();
extern int NID_CTRACTION_to_double(const void *pValue, double *nValue);
extern int get_NID_CTRACTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_CTRACTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_CTRACTION_default_value(void *pValue);
extern SimTypeUtils _Type_NID_CTRACTION_Utils;

/****************************************************************
 ** Q_TEXTREPORT 
 ****************************************************************/
extern int Q_TEXTREPORT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_TEXTREPORT_string(const char *str, char **endptr);
extern int string_to_Q_TEXTREPORT(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTREPORT_allow_double_conversion();
extern int Q_TEXTREPORT_to_double(const void *pValue, double *nValue);
extern int get_Q_TEXTREPORT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_TEXTREPORT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_TEXTREPORT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_TEXTREPORT_Utils;

/****************************************************************
 ** NID_TEXTMESSAGE 
 ****************************************************************/
extern int NID_TEXTMESSAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_TEXTMESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_TEXTMESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_TEXTMESSAGE_allow_double_conversion();
extern int NID_TEXTMESSAGE_to_double(const void *pValue, double *nValue);
extern int get_NID_TEXTMESSAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_TEXTMESSAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_TEXTMESSAGE_default_value(void *pValue);
extern SimTypeUtils _Type_NID_TEXTMESSAGE_Utils;

/****************************************************************
 ** M_POSITION 
 ****************************************************************/
extern int M_POSITION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_POSITION_string(const char *str, char **endptr);
extern int string_to_M_POSITION(const char *str, void *pValue, char **endptr);
extern int is_M_POSITION_allow_double_conversion();
extern int M_POSITION_to_double(const void *pValue, double *nValue);
extern int get_M_POSITION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_POSITION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_POSITION_default_value(void *pValue);
extern SimTypeUtils _Type_M_POSITION_Utils;

/****************************************************************
 ** DMI_trackCondition_int_array_T 
 ****************************************************************/
extern int DMI_trackCondition_int_array_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackCondition_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_int_array_T_allow_double_conversion();
extern int DMI_trackCondition_int_array_T_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackCondition_int_array_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackCondition_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackCondition_int_array_T_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackCondition_int_array_T_Utils;

/****************************************************************
 ** DMI_gradientProfile_int_arrayT 
 ****************************************************************/
extern int DMI_gradientProfile_int_arrayT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfile_int_arrayT_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_int_arrayT(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_int_arrayT_allow_double_conversion();
extern int DMI_gradientProfile_int_arrayT_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfile_int_arrayT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfile_int_arrayT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfile_int_arrayT_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfile_int_arrayT_Utils;

/****************************************************************
 ** DMI_Track_Description_int_array_T 
 ****************************************************************/
extern int DMI_Track_Description_int_array_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Track_Description_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_int_array_T_allow_double_conversion();
extern int DMI_Track_Description_int_array_T_to_double(const void *pValue, double *nValue);
extern int get_DMI_Track_Description_int_array_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Track_Description_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Track_Description_int_array_T_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Track_Description_int_array_T_Utils;

/****************************************************************
 ** NID_MESSAGE 
 ****************************************************************/
extern int NID_MESSAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_MESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_MESSAGE_allow_double_conversion();
extern int NID_MESSAGE_to_double(const void *pValue, double *nValue);
extern int get_NID_MESSAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_MESSAGE_default_value(void *pValue);
extern SimTypeUtils _Type_NID_MESSAGE_Utils;

/****************************************************************
 ** T_TRAIN 
 ****************************************************************/
extern int T_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_TRAIN_string(const char *str, char **endptr);
extern int string_to_T_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_T_TRAIN_allow_double_conversion();
extern int T_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_T_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_T_TRAIN_Utils;

/****************************************************************
 ** M_ACK 
 ****************************************************************/
extern int M_ACK_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_ACK_string(const char *str, char **endptr);
extern int string_to_M_ACK(const char *str, void *pValue, char **endptr);
extern int is_M_ACK_allow_double_conversion();
extern int M_ACK_to_double(const void *pValue, double *nValue);
extern int get_M_ACK_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_ACK(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_ACK_default_value(void *pValue);
extern SimTypeUtils _Type_M_ACK_Utils;

/****************************************************************
 ** NID_EM 
 ****************************************************************/
extern int NID_EM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_string(const char *str, char **endptr);
extern int string_to_NID_EM(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_allow_double_conversion();
extern int NID_EM_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_Utils;

/****************************************************************
 ** D_SR 
 ****************************************************************/
extern int D_SR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_SR_string(const char *str, char **endptr);
extern int string_to_D_SR(const char *str, void *pValue, char **endptr);
extern int is_D_SR_allow_double_conversion();
extern int D_SR_to_double(const void *pValue, double *nValue);
extern int get_D_SR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_SR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_SR_default_value(void *pValue);
extern SimTypeUtils _Type_D_SR_Utils;

/****************************************************************
 ** D_REF 
 ****************************************************************/
extern int D_REF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_REF_string(const char *str, char **endptr);
extern int string_to_D_REF(const char *str, void *pValue, char **endptr);
extern int is_D_REF_allow_double_conversion();
extern int D_REF_to_double(const void *pValue, double *nValue);
extern int get_D_REF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_REF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_REF_default_value(void *pValue);
extern SimTypeUtils _Type_D_REF_Utils;

/****************************************************************
 ** D_EMERGENCYSTOP 
 ****************************************************************/
extern int D_EMERGENCYSTOP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_D_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_D_EMERGENCYSTOP_allow_double_conversion();
extern int D_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int get_D_EMERGENCYSTOP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_EMERGENCYSTOP_default_value(void *pValue);
extern SimTypeUtils _Type_D_EMERGENCYSTOP_Utils;

/****************************************************************
 ** Q_RBC 
 ****************************************************************/
extern int Q_RBC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_RBC_string(const char *str, char **endptr);
extern int string_to_Q_RBC(const char *str, void *pValue, char **endptr);
extern int is_Q_RBC_allow_double_conversion();
extern int Q_RBC_to_double(const void *pValue, double *nValue);
extern int get_Q_RBC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_RBC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_RBC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_RBC_Utils;

/****************************************************************
 ** Q_SLEEPSESSION 
 ****************************************************************/
extern int Q_SLEEPSESSION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SLEEPSESSION_string(const char *str, char **endptr);
extern int string_to_Q_SLEEPSESSION(const char *str, void *pValue, char **endptr);
extern int is_Q_SLEEPSESSION_allow_double_conversion();
extern int Q_SLEEPSESSION_to_double(const void *pValue, double *nValue);
extern int get_Q_SLEEPSESSION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SLEEPSESSION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SLEEPSESSION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SLEEPSESSION_Utils;

/****************************************************************
 ** Q_NVEMRRLS 
 ****************************************************************/
extern int Q_NVEMRRLS_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVEMRRLS_string(const char *str, char **endptr);
extern int string_to_Q_NVEMRRLS(const char *str, void *pValue, char **endptr);
extern int is_Q_NVEMRRLS_allow_double_conversion();
extern int Q_NVEMRRLS_to_double(const void *pValue, double *nValue);
extern int get_Q_NVEMRRLS_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVEMRRLS(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVEMRRLS_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVEMRRLS_Utils;

/****************************************************************
 ** Q_NVSBTSMPERM 
 ****************************************************************/
extern int Q_NVSBTSMPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVSBTSMPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBTSMPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBTSMPERM_allow_double_conversion();
extern int Q_NVSBTSMPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVSBTSMPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVSBTSMPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVSBTSMPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVSBTSMPERM_Utils;

/****************************************************************
 ** D_VALIDNV 
 ****************************************************************/
extern int D_VALIDNV_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_VALIDNV_string(const char *str, char **endptr);
extern int string_to_D_VALIDNV(const char *str, void *pValue, char **endptr);
extern int is_D_VALIDNV_allow_double_conversion();
extern int D_VALIDNV_to_double(const void *pValue, double *nValue);
extern int get_D_VALIDNV_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_VALIDNV(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_VALIDNV_default_value(void *pValue);
extern SimTypeUtils _Type_D_VALIDNV_Utils;

/****************************************************************
 ** V_NVSHUNT 
 ****************************************************************/
extern int V_NVSHUNT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVSHUNT_string(const char *str, char **endptr);
extern int string_to_V_NVSHUNT(const char *str, void *pValue, char **endptr);
extern int is_V_NVSHUNT_allow_double_conversion();
extern int V_NVSHUNT_to_double(const void *pValue, double *nValue);
extern int get_V_NVSHUNT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVSHUNT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVSHUNT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVSHUNT_Utils;

/****************************************************************
 ** V_NVSTFF 
 ****************************************************************/
extern int V_NVSTFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVSTFF_string(const char *str, char **endptr);
extern int string_to_V_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_V_NVSTFF_allow_double_conversion();
extern int V_NVSTFF_to_double(const void *pValue, double *nValue);
extern int get_V_NVSTFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVSTFF_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVSTFF_Utils;

/****************************************************************
 ** V_NVONSIGHT 
 ****************************************************************/
extern int V_NVONSIGHT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVONSIGHT_string(const char *str, char **endptr);
extern int string_to_V_NVONSIGHT(const char *str, void *pValue, char **endptr);
extern int is_V_NVONSIGHT_allow_double_conversion();
extern int V_NVONSIGHT_to_double(const void *pValue, double *nValue);
extern int get_V_NVONSIGHT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVONSIGHT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVONSIGHT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVONSIGHT_Utils;

/****************************************************************
 ** V_NVLIMSUPERV 
 ****************************************************************/
extern int V_NVLIMSUPERV_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVLIMSUPERV_string(const char *str, char **endptr);
extern int string_to_V_NVLIMSUPERV(const char *str, void *pValue, char **endptr);
extern int is_V_NVLIMSUPERV_allow_double_conversion();
extern int V_NVLIMSUPERV_to_double(const void *pValue, double *nValue);
extern int get_V_NVLIMSUPERV_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVLIMSUPERV(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVLIMSUPERV_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVLIMSUPERV_Utils;

/****************************************************************
 ** V_NVUNFIT 
 ****************************************************************/
extern int V_NVUNFIT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVUNFIT_string(const char *str, char **endptr);
extern int string_to_V_NVUNFIT(const char *str, void *pValue, char **endptr);
extern int is_V_NVUNFIT_allow_double_conversion();
extern int V_NVUNFIT_to_double(const void *pValue, double *nValue);
extern int get_V_NVUNFIT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVUNFIT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVUNFIT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVUNFIT_Utils;

/****************************************************************
 ** V_NVREL 
 ****************************************************************/
extern int V_NVREL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVREL_string(const char *str, char **endptr);
extern int string_to_V_NVREL(const char *str, void *pValue, char **endptr);
extern int is_V_NVREL_allow_double_conversion();
extern int V_NVREL_to_double(const void *pValue, double *nValue);
extern int get_V_NVREL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVREL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVREL_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVREL_Utils;

/****************************************************************
 ** D_NVROLL 
 ****************************************************************/
extern int D_NVROLL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVROLL_string(const char *str, char **endptr);
extern int string_to_D_NVROLL(const char *str, void *pValue, char **endptr);
extern int is_D_NVROLL_allow_double_conversion();
extern int D_NVROLL_to_double(const void *pValue, double *nValue);
extern int get_D_NVROLL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVROLL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVROLL_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVROLL_Utils;

/****************************************************************
 ** Q_NVGUIPERM 
 ****************************************************************/
extern int Q_NVGUIPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVGUIPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVGUIPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVGUIPERM_allow_double_conversion();
extern int Q_NVGUIPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVGUIPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVGUIPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVGUIPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVGUIPERM_Utils;

/****************************************************************
 ** Q_NVSBFBPERM 
 ****************************************************************/
extern int Q_NVSBFBPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVSBFBPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBFBPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBFBPERM_allow_double_conversion();
extern int Q_NVSBFBPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVSBFBPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVSBFBPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVSBFBPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVSBFBPERM_Utils;

/****************************************************************
 ** Q_NVINHSMICPERM 
 ****************************************************************/
extern int Q_NVINHSMICPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVINHSMICPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVINHSMICPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVINHSMICPERM_allow_double_conversion();
extern int Q_NVINHSMICPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVINHSMICPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVINHSMICPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVINHSMICPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVINHSMICPERM_Utils;

/****************************************************************
 ** V_NVALLOWOVTRP 
 ****************************************************************/
extern int V_NVALLOWOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVALLOWOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVALLOWOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVALLOWOVTRP_allow_double_conversion();
extern int V_NVALLOWOVTRP_to_double(const void *pValue, double *nValue);
extern int get_V_NVALLOWOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVALLOWOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVALLOWOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVALLOWOVTRP_Utils;

/****************************************************************
 ** V_NVSUPOVTRP 
 ****************************************************************/
extern int V_NVSUPOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVSUPOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVSUPOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVSUPOVTRP_allow_double_conversion();
extern int V_NVSUPOVTRP_to_double(const void *pValue, double *nValue);
extern int get_V_NVSUPOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVSUPOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVSUPOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVSUPOVTRP_Utils;

/****************************************************************
 ** D_NVOVTRP 
 ****************************************************************/
extern int D_NVOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_D_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVOVTRP_allow_double_conversion();
extern int D_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int get_D_NVOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVOVTRP_Utils;

/****************************************************************
 ** T_NVOVTRP 
 ****************************************************************/
extern int T_NVOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_T_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_T_NVOVTRP_allow_double_conversion();
extern int T_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int get_T_NVOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_NVOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_T_NVOVTRP_Utils;

/****************************************************************
 ** D_NVPOTRP 
 ****************************************************************/
extern int D_NVPOTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVPOTRP_string(const char *str, char **endptr);
extern int string_to_D_NVPOTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVPOTRP_allow_double_conversion();
extern int D_NVPOTRP_to_double(const void *pValue, double *nValue);
extern int get_D_NVPOTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVPOTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVPOTRP_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVPOTRP_Utils;

/****************************************************************
 ** M_NVCONTACT 
 ****************************************************************/
extern int M_NVCONTACT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_M_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_M_NVCONTACT_allow_double_conversion();
extern int M_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int get_M_NVCONTACT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVCONTACT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVCONTACT_Utils;

/****************************************************************
 ** T_NVCONTACT 
 ****************************************************************/
extern int T_NVCONTACT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_T_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_T_NVCONTACT_allow_double_conversion();
extern int T_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int get_T_NVCONTACT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_NVCONTACT_default_value(void *pValue);
extern SimTypeUtils _Type_T_NVCONTACT_Utils;

/****************************************************************
 ** M_NVDERUN 
 ****************************************************************/
extern int M_NVDERUN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVDERUN_string(const char *str, char **endptr);
extern int string_to_M_NVDERUN(const char *str, void *pValue, char **endptr);
extern int is_M_NVDERUN_allow_double_conversion();
extern int M_NVDERUN_to_double(const void *pValue, double *nValue);
extern int get_M_NVDERUN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVDERUN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVDERUN_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVDERUN_Utils;

/****************************************************************
 ** D_NVSTFF 
 ****************************************************************/
extern int D_NVSTFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVSTFF_string(const char *str, char **endptr);
extern int string_to_D_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_D_NVSTFF_allow_double_conversion();
extern int D_NVSTFF_to_double(const void *pValue, double *nValue);
extern int get_D_NVSTFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVSTFF_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVSTFF_Utils;

/****************************************************************
 ** Q_NVDRIVER_ADHES 
 ****************************************************************/
extern int Q_NVDRIVER_ADHES_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVDRIVER_ADHES_string(const char *str, char **endptr);
extern int string_to_Q_NVDRIVER_ADHES(const char *str, void *pValue, char **endptr);
extern int is_Q_NVDRIVER_ADHES_allow_double_conversion();
extern int Q_NVDRIVER_ADHES_to_double(const void *pValue, double *nValue);
extern int get_Q_NVDRIVER_ADHES_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVDRIVER_ADHES(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVDRIVER_ADHES_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVDRIVER_ADHES_Utils;

/****************************************************************
 ** A_NVMAXREDADH1 
 ****************************************************************/
extern int A_NVMAXREDADH1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVMAXREDADH1_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH1(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH1_allow_double_conversion();
extern int A_NVMAXREDADH1_to_double(const void *pValue, double *nValue);
extern int get_A_NVMAXREDADH1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVMAXREDADH1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVMAXREDADH1_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVMAXREDADH1_Utils;

/****************************************************************
 ** A_NVMAXREDADH2 
 ****************************************************************/
extern int A_NVMAXREDADH2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVMAXREDADH2_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH2(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH2_allow_double_conversion();
extern int A_NVMAXREDADH2_to_double(const void *pValue, double *nValue);
extern int get_A_NVMAXREDADH2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVMAXREDADH2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVMAXREDADH2_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVMAXREDADH2_Utils;

/****************************************************************
 ** A_NVMAXREDADH3 
 ****************************************************************/
extern int A_NVMAXREDADH3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVMAXREDADH3_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH3(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH3_allow_double_conversion();
extern int A_NVMAXREDADH3_to_double(const void *pValue, double *nValue);
extern int get_A_NVMAXREDADH3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVMAXREDADH3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVMAXREDADH3_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVMAXREDADH3_Utils;

/****************************************************************
 ** M_NVAVADH 
 ****************************************************************/
extern int M_NVAVADH_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVAVADH_string(const char *str, char **endptr);
extern int string_to_M_NVAVADH(const char *str, void *pValue, char **endptr);
extern int is_M_NVAVADH_allow_double_conversion();
extern int M_NVAVADH_to_double(const void *pValue, double *nValue);
extern int get_M_NVAVADH_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVAVADH(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVAVADH_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVAVADH_Utils;

/****************************************************************
 ** M_NVEBCL 
 ****************************************************************/
extern int M_NVEBCL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVEBCL_string(const char *str, char **endptr);
extern int string_to_M_NVEBCL(const char *str, void *pValue, char **endptr);
extern int is_M_NVEBCL_allow_double_conversion();
extern int M_NVEBCL_to_double(const void *pValue, double *nValue);
extern int get_M_NVEBCL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVEBCL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVEBCL_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVEBCL_Utils;

/****************************************************************
 ** Q_NVKINT 
 ****************************************************************/
extern int Q_NVKINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVKINT_string(const char *str, char **endptr);
extern int string_to_Q_NVKINT(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKINT_allow_double_conversion();
extern int Q_NVKINT_to_double(const void *pValue, double *nValue);
extern int get_Q_NVKINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVKINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVKINT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVKINT_Utils;

/****************************************************************
 ** Q_NVKVINTSET 
 ****************************************************************/
extern int Q_NVKVINTSET_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVKVINTSET_string(const char *str, char **endptr);
extern int string_to_Q_NVKVINTSET(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKVINTSET_allow_double_conversion();
extern int Q_NVKVINTSET_to_double(const void *pValue, double *nValue);
extern int get_Q_NVKVINTSET_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVKVINTSET(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVKVINTSET_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVKVINTSET_Utils;

/****************************************************************
 ** A_NVP12 
 ****************************************************************/
extern int A_NVP12_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVP12_string(const char *str, char **endptr);
extern int string_to_A_NVP12(const char *str, void *pValue, char **endptr);
extern int is_A_NVP12_allow_double_conversion();
extern int A_NVP12_to_double(const void *pValue, double *nValue);
extern int get_A_NVP12_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVP12(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVP12_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVP12_Utils;

/****************************************************************
 ** A_NVP23 
 ****************************************************************/
extern int A_NVP23_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVP23_string(const char *str, char **endptr);
extern int string_to_A_NVP23(const char *str, void *pValue, char **endptr);
extern int is_A_NVP23_allow_double_conversion();
extern int A_NVP23_to_double(const void *pValue, double *nValue);
extern int get_A_NVP23_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVP23(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVP23_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVP23_Utils;

/****************************************************************
 ** V_NVKVINT 
 ****************************************************************/
extern int V_NVKVINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVKVINT_string(const char *str, char **endptr);
extern int string_to_V_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_V_NVKVINT_allow_double_conversion();
extern int V_NVKVINT_to_double(const void *pValue, double *nValue);
extern int get_V_NVKVINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVKVINT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVKVINT_Utils;

/****************************************************************
 ** M_NVKVINT 
 ****************************************************************/
extern int M_NVKVINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVKVINT_string(const char *str, char **endptr);
extern int string_to_M_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKVINT_allow_double_conversion();
extern int M_NVKVINT_to_double(const void *pValue, double *nValue);
extern int get_M_NVKVINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVKVINT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVKVINT_Utils;

/****************************************************************
 ** L_NVKRINT 
 ****************************************************************/
extern int L_NVKRINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_NVKRINT_string(const char *str, char **endptr);
extern int string_to_L_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_L_NVKRINT_allow_double_conversion();
extern int L_NVKRINT_to_double(const void *pValue, double *nValue);
extern int get_L_NVKRINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_NVKRINT_default_value(void *pValue);
extern SimTypeUtils _Type_L_NVKRINT_Utils;

/****************************************************************
 ** M_NVKRINT 
 ****************************************************************/
extern int M_NVKRINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVKRINT_string(const char *str, char **endptr);
extern int string_to_M_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKRINT_allow_double_conversion();
extern int M_NVKRINT_to_double(const void *pValue, double *nValue);
extern int get_M_NVKRINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVKRINT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVKRINT_Utils;

/****************************************************************
 ** M_NVKTINT 
 ****************************************************************/
extern int M_NVKTINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVKTINT_string(const char *str, char **endptr);
extern int string_to_M_NVKTINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKTINT_allow_double_conversion();
extern int M_NVKTINT_to_double(const void *pValue, double *nValue);
extern int get_M_NVKTINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVKTINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVKTINT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVKTINT_Utils;

/****************************************************************
 ** N_ITER 
 ****************************************************************/
extern int N_ITER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_ITER_string(const char *str, char **endptr);
extern int string_to_N_ITER(const char *str, void *pValue, char **endptr);
extern int is_N_ITER_allow_double_conversion();
extern int N_ITER_to_double(const void *pValue, double *nValue);
extern int get_N_ITER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_ITER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_ITER_default_value(void *pValue);
extern SimTypeUtils _Type_N_ITER_Utils;

/****************************************************************
 ** NID_ENGINE 
 ****************************************************************/
extern int NID_ENGINE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_ENGINE_string(const char *str, char **endptr);
extern int string_to_NID_ENGINE(const char *str, void *pValue, char **endptr);
extern int is_NID_ENGINE_allow_double_conversion();
extern int NID_ENGINE_to_double(const void *pValue, double *nValue);
extern int get_NID_ENGINE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_ENGINE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_ENGINE_default_value(void *pValue);
extern SimTypeUtils _Type_NID_ENGINE_Utils;

/****************************************************************
 ** L_TRAIN 
 ****************************************************************/
extern int L_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TRAIN_string(const char *str, char **endptr);
extern int string_to_L_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_L_TRAIN_allow_double_conversion();
extern int L_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_L_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_L_TRAIN_Utils;

/****************************************************************
 ** N_PIG 
 ****************************************************************/
extern int N_PIG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_PIG_string(const char *str, char **endptr);
extern int string_to_N_PIG(const char *str, void *pValue, char **endptr);
extern int is_N_PIG_allow_double_conversion();
extern int N_PIG_to_double(const void *pValue, double *nValue);
extern int get_N_PIG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_PIG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_PIG_default_value(void *pValue);
extern SimTypeUtils _Type_N_PIG_Utils;

/****************************************************************
 ** M_DUP 
 ****************************************************************/
extern int M_DUP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_DUP_string(const char *str, char **endptr);
extern int string_to_M_DUP(const char *str, void *pValue, char **endptr);
extern int is_M_DUP_allow_double_conversion();
extern int M_DUP_to_double(const void *pValue, double *nValue);
extern int get_M_DUP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_DUP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_DUP_default_value(void *pValue);
extern SimTypeUtils _Type_M_DUP_Utils;

/****************************************************************
 ** NID_PACKET 
 ****************************************************************/
extern int NID_PACKET_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_PACKET_string(const char *str, char **endptr);
extern int string_to_NID_PACKET(const char *str, void *pValue, char **endptr);
extern int is_NID_PACKET_allow_double_conversion();
extern int NID_PACKET_to_double(const void *pValue, double *nValue);
extern int get_NID_PACKET_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_PACKET(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_PACKET_default_value(void *pValue);
extern SimTypeUtils _Type_NID_PACKET_Utils;

/****************************************************************
 ** D_LEVELTR 
 ****************************************************************/
extern int D_LEVELTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LEVELTR_string(const char *str, char **endptr);
extern int string_to_D_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_D_LEVELTR_allow_double_conversion();
extern int D_LEVELTR_to_double(const void *pValue, double *nValue);
extern int get_D_LEVELTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LEVELTR_default_value(void *pValue);
extern SimTypeUtils _Type_D_LEVELTR_Utils;

/****************************************************************
 ** M_LEVELTR 
 ****************************************************************/
extern int M_LEVELTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LEVELTR_string(const char *str, char **endptr);
extern int string_to_M_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_M_LEVELTR_allow_double_conversion();
extern int M_LEVELTR_to_double(const void *pValue, double *nValue);
extern int get_M_LEVELTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LEVELTR_default_value(void *pValue);
extern SimTypeUtils _Type_M_LEVELTR_Utils;

/****************************************************************
 ** L_ACKLEVELTR 
 ****************************************************************/
extern int L_ACKLEVELTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_ACKLEVELTR_string(const char *str, char **endptr);
extern int string_to_L_ACKLEVELTR(const char *str, void *pValue, char **endptr);
extern int is_L_ACKLEVELTR_allow_double_conversion();
extern int L_ACKLEVELTR_to_double(const void *pValue, double *nValue);
extern int get_L_ACKLEVELTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_ACKLEVELTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_ACKLEVELTR_default_value(void *pValue);
extern SimTypeUtils _Type_L_ACKLEVELTR_Utils;

/****************************************************************
 ** D_DP 
 ****************************************************************/
extern int D_DP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_DP_string(const char *str, char **endptr);
extern int string_to_D_DP(const char *str, void *pValue, char **endptr);
extern int is_D_DP_allow_double_conversion();
extern int D_DP_to_double(const void *pValue, double *nValue);
extern int get_D_DP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_DP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_DP_default_value(void *pValue);
extern SimTypeUtils _Type_D_DP_Utils;

/****************************************************************
 ** D_OL 
 ****************************************************************/
extern int D_OL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_OL_string(const char *str, char **endptr);
extern int string_to_D_OL(const char *str, void *pValue, char **endptr);
extern int is_D_OL_allow_double_conversion();
extern int D_OL_to_double(const void *pValue, double *nValue);
extern int get_D_OL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_OL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_OL_default_value(void *pValue);
extern SimTypeUtils _Type_D_OL_Utils;

/****************************************************************
 ** V_LOA 
 ****************************************************************/
extern int V_LOA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_LOA_string(const char *str, char **endptr);
extern int string_to_V_LOA(const char *str, void *pValue, char **endptr);
extern int is_V_LOA_allow_double_conversion();
extern int V_LOA_to_double(const void *pValue, double *nValue);
extern int get_V_LOA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_LOA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_LOA_default_value(void *pValue);
extern SimTypeUtils _Type_V_LOA_Utils;

/****************************************************************
 ** T_ENDTIMER 
 ****************************************************************/
extern int T_ENDTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_T_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_ENDTIMER_allow_double_conversion();
extern int T_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int get_T_ENDTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_ENDTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_T_ENDTIMER_Utils;

/****************************************************************
 ** L_SECTION 
 ****************************************************************/
extern int L_SECTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_SECTION_string(const char *str, char **endptr);
extern int string_to_L_SECTION(const char *str, void *pValue, char **endptr);
extern int is_L_SECTION_allow_double_conversion();
extern int L_SECTION_to_double(const void *pValue, double *nValue);
extern int get_L_SECTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_SECTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_SECTION_default_value(void *pValue);
extern SimTypeUtils _Type_L_SECTION_Utils;

/****************************************************************
 ** Q_SECTIONTIMER 
 ****************************************************************/
extern int Q_SECTIONTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_Q_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_SECTIONTIMER_allow_double_conversion();
extern int Q_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int get_Q_SECTIONTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SECTIONTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SECTIONTIMER_Utils;

/****************************************************************
 ** T_SECTIONTIMER 
 ****************************************************************/
extern int T_SECTIONTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_T_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_SECTIONTIMER_allow_double_conversion();
extern int T_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int get_T_SECTIONTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_SECTIONTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_T_SECTIONTIMER_Utils;

/****************************************************************
 ** D_SECTIONTIMERSTOPLOC 
 ****************************************************************/
extern int D_SECTIONTIMERSTOPLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_SECTIONTIMERSTOPLOC_string(const char *str, char **endptr);
extern int string_to_D_SECTIONTIMERSTOPLOC(const char *str, void *pValue, char **endptr);
extern int is_D_SECTIONTIMERSTOPLOC_allow_double_conversion();
extern int D_SECTIONTIMERSTOPLOC_to_double(const void *pValue, double *nValue);
extern int get_D_SECTIONTIMERSTOPLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_SECTIONTIMERSTOPLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_SECTIONTIMERSTOPLOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_SECTIONTIMERSTOPLOC_Utils;

/****************************************************************
 ** Q_OVERLAP 
 ****************************************************************/
extern int Q_OVERLAP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_OVERLAP_string(const char *str, char **endptr);
extern int string_to_Q_OVERLAP(const char *str, void *pValue, char **endptr);
extern int is_Q_OVERLAP_allow_double_conversion();
extern int Q_OVERLAP_to_double(const void *pValue, double *nValue);
extern int get_Q_OVERLAP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_OVERLAP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_OVERLAP_default_value(void *pValue);
extern SimTypeUtils _Type_Q_OVERLAP_Utils;

/****************************************************************
 ** Q_DANGERPOINT 
 ****************************************************************/
extern int Q_DANGERPOINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DANGERPOINT_string(const char *str, char **endptr);
extern int string_to_Q_DANGERPOINT(const char *str, void *pValue, char **endptr);
extern int is_Q_DANGERPOINT_allow_double_conversion();
extern int Q_DANGERPOINT_to_double(const void *pValue, double *nValue);
extern int get_Q_DANGERPOINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DANGERPOINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DANGERPOINT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DANGERPOINT_Utils;

/****************************************************************
 ** T_LOA 
 ****************************************************************/
extern int T_LOA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LOA_string(const char *str, char **endptr);
extern int string_to_T_LOA(const char *str, void *pValue, char **endptr);
extern int is_T_LOA_allow_double_conversion();
extern int T_LOA_to_double(const void *pValue, double *nValue);
extern int get_T_LOA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LOA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LOA_default_value(void *pValue);
extern SimTypeUtils _Type_T_LOA_Utils;

/****************************************************************
 ** L_ENDSECTION 
 ****************************************************************/
extern int L_ENDSECTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_ENDSECTION_string(const char *str, char **endptr);
extern int string_to_L_ENDSECTION(const char *str, void *pValue, char **endptr);
extern int is_L_ENDSECTION_allow_double_conversion();
extern int L_ENDSECTION_to_double(const void *pValue, double *nValue);
extern int get_L_ENDSECTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_ENDSECTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_ENDSECTION_default_value(void *pValue);
extern SimTypeUtils _Type_L_ENDSECTION_Utils;

/****************************************************************
 ** Q_ENDTIMER 
 ****************************************************************/
extern int Q_ENDTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_Q_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_ENDTIMER_allow_double_conversion();
extern int Q_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int get_Q_ENDTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_ENDTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_Q_ENDTIMER_Utils;

/****************************************************************
 ** D_ENDTIMERSTARTLOC 
 ****************************************************************/
extern int D_ENDTIMERSTARTLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_ENDTIMERSTARTLOC_string(const char *str, char **endptr);
extern int string_to_D_ENDTIMERSTARTLOC(const char *str, void *pValue, char **endptr);
extern int is_D_ENDTIMERSTARTLOC_allow_double_conversion();
extern int D_ENDTIMERSTARTLOC_to_double(const void *pValue, double *nValue);
extern int get_D_ENDTIMERSTARTLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_ENDTIMERSTARTLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_ENDTIMERSTARTLOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_ENDTIMERSTARTLOC_Utils;

/****************************************************************
 ** V_RELEASEDP 
 ****************************************************************/
extern int V_RELEASEDP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_RELEASEDP_string(const char *str, char **endptr);
extern int string_to_V_RELEASEDP(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEDP_allow_double_conversion();
extern int V_RELEASEDP_to_double(const void *pValue, double *nValue);
extern int get_V_RELEASEDP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_RELEASEDP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_RELEASEDP_default_value(void *pValue);
extern SimTypeUtils _Type_V_RELEASEDP_Utils;

/****************************************************************
 ** D_STARTOL 
 ****************************************************************/
extern int D_STARTOL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_STARTOL_string(const char *str, char **endptr);
extern int string_to_D_STARTOL(const char *str, void *pValue, char **endptr);
extern int is_D_STARTOL_allow_double_conversion();
extern int D_STARTOL_to_double(const void *pValue, double *nValue);
extern int get_D_STARTOL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_STARTOL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_STARTOL_default_value(void *pValue);
extern SimTypeUtils _Type_D_STARTOL_Utils;

/****************************************************************
 ** T_OL 
 ****************************************************************/
extern int T_OL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_OL_string(const char *str, char **endptr);
extern int string_to_T_OL(const char *str, void *pValue, char **endptr);
extern int is_T_OL_allow_double_conversion();
extern int T_OL_to_double(const void *pValue, double *nValue);
extern int get_T_OL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_OL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_OL_default_value(void *pValue);
extern SimTypeUtils _Type_T_OL_Utils;

/****************************************************************
 ** V_RELEASEOL 
 ****************************************************************/
extern int V_RELEASEOL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_RELEASEOL_string(const char *str, char **endptr);
extern int string_to_V_RELEASEOL(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEOL_allow_double_conversion();
extern int V_RELEASEOL_to_double(const void *pValue, double *nValue);
extern int get_V_RELEASEOL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_RELEASEOL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_RELEASEOL_default_value(void *pValue);
extern SimTypeUtils _Type_V_RELEASEOL_Utils;

/****************************************************************
 ** D_GRADIENT 
 ****************************************************************/
extern int D_GRADIENT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_GRADIENT_string(const char *str, char **endptr);
extern int string_to_D_GRADIENT(const char *str, void *pValue, char **endptr);
extern int is_D_GRADIENT_allow_double_conversion();
extern int D_GRADIENT_to_double(const void *pValue, double *nValue);
extern int get_D_GRADIENT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_GRADIENT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_GRADIENT_default_value(void *pValue);
extern SimTypeUtils _Type_D_GRADIENT_Utils;

/****************************************************************
 ** Q_GDIR 
 ****************************************************************/
extern int Q_GDIR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_GDIR_string(const char *str, char **endptr);
extern int string_to_Q_GDIR(const char *str, void *pValue, char **endptr);
extern int is_Q_GDIR_allow_double_conversion();
extern int Q_GDIR_to_double(const void *pValue, double *nValue);
extern int get_Q_GDIR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_GDIR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_GDIR_default_value(void *pValue);
extern SimTypeUtils _Type_Q_GDIR_Utils;

/****************************************************************
 ** G_A 
 ****************************************************************/
extern int G_A_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_G_A_string(const char *str, char **endptr);
extern int string_to_G_A(const char *str, void *pValue, char **endptr);
extern int is_G_A_allow_double_conversion();
extern int G_A_to_double(const void *pValue, double *nValue);
extern int get_G_A_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_G_A(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_G_A_default_value(void *pValue);
extern SimTypeUtils _Type_G_A_Utils;

/****************************************************************
 ** D_STATIC 
 ****************************************************************/
extern int D_STATIC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_STATIC_string(const char *str, char **endptr);
extern int string_to_D_STATIC(const char *str, void *pValue, char **endptr);
extern int is_D_STATIC_allow_double_conversion();
extern int D_STATIC_to_double(const void *pValue, double *nValue);
extern int get_D_STATIC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_STATIC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_STATIC_default_value(void *pValue);
extern SimTypeUtils _Type_D_STATIC_Utils;

/****************************************************************
 ** V_STATIC 
 ****************************************************************/
extern int V_STATIC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_STATIC_string(const char *str, char **endptr);
extern int string_to_V_STATIC(const char *str, void *pValue, char **endptr);
extern int is_V_STATIC_allow_double_conversion();
extern int V_STATIC_to_double(const void *pValue, double *nValue);
extern int get_V_STATIC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_STATIC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_STATIC_default_value(void *pValue);
extern SimTypeUtils _Type_V_STATIC_Utils;

/****************************************************************
 ** Q_FRONT 
 ****************************************************************/
extern int Q_FRONT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_FRONT_string(const char *str, char **endptr);
extern int string_to_Q_FRONT(const char *str, void *pValue, char **endptr);
extern int is_Q_FRONT_allow_double_conversion();
extern int Q_FRONT_to_double(const void *pValue, double *nValue);
extern int get_Q_FRONT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_FRONT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_FRONT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_FRONT_Utils;

/****************************************************************
 ** NC_DIFF 
 ****************************************************************/
extern int NC_DIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_DIFF_string(const char *str, char **endptr);
extern int string_to_NC_DIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_DIFF_allow_double_conversion();
extern int NC_DIFF_to_double(const void *pValue, double *nValue);
extern int get_NC_DIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_DIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_DIFF_default_value(void *pValue);
extern SimTypeUtils _Type_NC_DIFF_Utils;

/****************************************************************
 ** V_DIFF 
 ****************************************************************/
extern int V_DIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_DIFF_string(const char *str, char **endptr);
extern int string_to_V_DIFF(const char *str, void *pValue, char **endptr);
extern int is_V_DIFF_allow_double_conversion();
extern int V_DIFF_to_double(const void *pValue, double *nValue);
extern int get_V_DIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_DIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_DIFF_default_value(void *pValue);
extern SimTypeUtils _Type_V_DIFF_Utils;

/****************************************************************
 ** Q_DIFF 
 ****************************************************************/
extern int Q_DIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIFF_string(const char *str, char **endptr);
extern int string_to_Q_DIFF(const char *str, void *pValue, char **endptr);
extern int is_Q_DIFF_allow_double_conversion();
extern int Q_DIFF_to_double(const void *pValue, double *nValue);
extern int get_Q_DIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIFF_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIFF_Utils;

/****************************************************************
 ** NC_CDDIFF 
 ****************************************************************/
extern int NC_CDDIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_CDDIFF_string(const char *str, char **endptr);
extern int string_to_NC_CDDIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_CDDIFF_allow_double_conversion();
extern int NC_CDDIFF_to_double(const void *pValue, double *nValue);
extern int get_NC_CDDIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_CDDIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_CDDIFF_default_value(void *pValue);
extern SimTypeUtils _Type_NC_CDDIFF_Utils;

/****************************************************************
 ** V_MAIN 
 ****************************************************************/
extern int V_MAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_MAIN_string(const char *str, char **endptr);
extern int string_to_V_MAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAIN_allow_double_conversion();
extern int V_MAIN_to_double(const void *pValue, double *nValue);
extern int get_V_MAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_MAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_MAIN_default_value(void *pValue);
extern SimTypeUtils _Type_V_MAIN_Utils;

/****************************************************************
 ** D_MAMODE 
 ****************************************************************/
extern int D_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_MAMODE_string(const char *str, char **endptr);
extern int string_to_D_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_D_MAMODE_allow_double_conversion();
extern int D_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_D_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_D_MAMODE_Utils;

/****************************************************************
 ** M_MAMODE 
 ****************************************************************/
extern int M_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_MAMODE_string(const char *str, char **endptr);
extern int string_to_M_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_M_MAMODE_allow_double_conversion();
extern int M_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_M_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_M_MAMODE_Utils;

/****************************************************************
 ** V_MAMODE 
 ****************************************************************/
extern int V_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_MAMODE_string(const char *str, char **endptr);
extern int string_to_V_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_V_MAMODE_allow_double_conversion();
extern int V_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_V_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_V_MAMODE_Utils;

/****************************************************************
 ** L_MAMODE 
 ****************************************************************/
extern int L_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_MAMODE_string(const char *str, char **endptr);
extern int string_to_L_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_MAMODE_allow_double_conversion();
extern int L_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_L_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_L_MAMODE_Utils;

/****************************************************************
 ** L_ACKMAMODE 
 ****************************************************************/
extern int L_ACKMAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_ACKMAMODE_string(const char *str, char **endptr);
extern int string_to_L_ACKMAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_ACKMAMODE_allow_double_conversion();
extern int L_ACKMAMODE_to_double(const void *pValue, double *nValue);
extern int get_L_ACKMAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_ACKMAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_ACKMAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_L_ACKMAMODE_Utils;

/****************************************************************
 ** Q_MAMODE 
 ****************************************************************/
extern int Q_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_MAMODE_string(const char *str, char **endptr);
extern int string_to_Q_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_Q_MAMODE_allow_double_conversion();
extern int Q_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_Q_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_Q_MAMODE_Utils;

/****************************************************************
 ** Q_SRSTOP 
 ****************************************************************/
extern int Q_SRSTOP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SRSTOP_string(const char *str, char **endptr);
extern int string_to_Q_SRSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_SRSTOP_allow_double_conversion();
extern int Q_SRSTOP_to_double(const void *pValue, double *nValue);
extern int get_Q_SRSTOP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SRSTOP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SRSTOP_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SRSTOP_Utils;

/****************************************************************
 ** D_STARTREVERSE 
 ****************************************************************/
extern int D_STARTREVERSE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_STARTREVERSE_string(const char *str, char **endptr);
extern int string_to_D_STARTREVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_STARTREVERSE_allow_double_conversion();
extern int D_STARTREVERSE_to_double(const void *pValue, double *nValue);
extern int get_D_STARTREVERSE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_STARTREVERSE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_STARTREVERSE_default_value(void *pValue);
extern SimTypeUtils _Type_D_STARTREVERSE_Utils;

/****************************************************************
 ** L_REVERSEAREA 
 ****************************************************************/
extern int L_REVERSEAREA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_REVERSEAREA_string(const char *str, char **endptr);
extern int string_to_L_REVERSEAREA(const char *str, void *pValue, char **endptr);
extern int is_L_REVERSEAREA_allow_double_conversion();
extern int L_REVERSEAREA_to_double(const void *pValue, double *nValue);
extern int get_L_REVERSEAREA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_REVERSEAREA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_REVERSEAREA_default_value(void *pValue);
extern SimTypeUtils _Type_L_REVERSEAREA_Utils;

/****************************************************************
 ** D_REVERSE 
 ****************************************************************/
extern int D_REVERSE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_REVERSE_string(const char *str, char **endptr);
extern int string_to_D_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_REVERSE_allow_double_conversion();
extern int D_REVERSE_to_double(const void *pValue, double *nValue);
extern int get_D_REVERSE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_REVERSE_default_value(void *pValue);
extern SimTypeUtils _Type_D_REVERSE_Utils;

/****************************************************************
 ** V_REVERSE 
 ****************************************************************/
extern int V_REVERSE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_REVERSE_string(const char *str, char **endptr);
extern int string_to_V_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_V_REVERSE_allow_double_conversion();
extern int V_REVERSE_to_double(const void *pValue, double *nValue);
extern int get_V_REVERSE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_REVERSE_default_value(void *pValue);
extern SimTypeUtils _Type_V_REVERSE_Utils;

/****************************************************************
 ** M_ERROR 
 ****************************************************************/
extern int M_ERROR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_ERROR_string(const char *str, char **endptr);
extern int string_to_M_ERROR(const char *str, void *pValue, char **endptr);
extern int is_M_ERROR_allow_double_conversion();
extern int M_ERROR_to_double(const void *pValue, double *nValue);
extern int get_M_ERROR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_ERROR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_ERROR_default_value(void *pValue);
extern SimTypeUtils _Type_M_ERROR_Utils;

/****************************************************************
 ** L_PACKET 
 ****************************************************************/
extern int L_PACKET_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_PACKET_string(const char *str, char **endptr);
extern int string_to_L_PACKET(const char *str, void *pValue, char **endptr);
extern int is_L_PACKET_allow_double_conversion();
extern int L_PACKET_to_double(const void *pValue, double *nValue);
extern int get_L_PACKET_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_PACKET(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_PACKET_default_value(void *pValue);
extern SimTypeUtils _Type_L_PACKET_Utils;

/****************************************************************
 ** T_CYCLOC 
 ****************************************************************/
extern int T_CYCLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_CYCLOC_string(const char *str, char **endptr);
extern int string_to_T_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_T_CYCLOC_allow_double_conversion();
extern int T_CYCLOC_to_double(const void *pValue, double *nValue);
extern int get_T_CYCLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_CYCLOC_default_value(void *pValue);
extern SimTypeUtils _Type_T_CYCLOC_Utils;

/****************************************************************
 ** D_CYCLOC 
 ****************************************************************/
extern int D_CYCLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_CYCLOC_string(const char *str, char **endptr);
extern int string_to_D_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_D_CYCLOC_allow_double_conversion();
extern int D_CYCLOC_to_double(const void *pValue, double *nValue);
extern int get_D_CYCLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_CYCLOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_CYCLOC_Utils;

/****************************************************************
 ** M_LOC 
 ****************************************************************/
extern int M_LOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LOC_string(const char *str, char **endptr);
extern int string_to_M_LOC(const char *str, void *pValue, char **endptr);
extern int is_M_LOC_allow_double_conversion();
extern int M_LOC_to_double(const void *pValue, double *nValue);
extern int get_M_LOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LOC_default_value(void *pValue);
extern SimTypeUtils _Type_M_LOC_Utils;

/****************************************************************
 ** D_LOC 
 ****************************************************************/
extern int D_LOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LOC_string(const char *str, char **endptr);
extern int string_to_D_LOC(const char *str, void *pValue, char **endptr);
extern int is_D_LOC_allow_double_conversion();
extern int D_LOC_to_double(const void *pValue, double *nValue);
extern int get_D_LOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_LOC_Utils;

/****************************************************************
 ** Q_LGTLOC 
 ****************************************************************/
extern int Q_LGTLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LGTLOC_string(const char *str, char **endptr);
extern int string_to_Q_LGTLOC(const char *str, void *pValue, char **endptr);
extern int is_Q_LGTLOC_allow_double_conversion();
extern int Q_LGTLOC_to_double(const void *pValue, double *nValue);
extern int get_Q_LGTLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LGTLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LGTLOC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LGTLOC_Utils;

/****************************************************************
 ** Q_MARQSTREASON 
 ****************************************************************/
extern int Q_MARQSTREASON_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_MARQSTREASON_string(const char *str, char **endptr);
extern int string_to_Q_MARQSTREASON(const char *str, void *pValue, char **endptr);
extern int is_Q_MARQSTREASON_allow_double_conversion();
extern int Q_MARQSTREASON_to_double(const void *pValue, double *nValue);
extern int get_Q_MARQSTREASON_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_MARQSTREASON(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_MARQSTREASON_default_value(void *pValue);
extern SimTypeUtils _Type_Q_MARQSTREASON_Utils;

/****************************************************************
 ** Q_EMERGENCYSTOP 
 ****************************************************************/
extern int Q_EMERGENCYSTOP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_Q_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_EMERGENCYSTOP_allow_double_conversion();
extern int Q_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int get_Q_EMERGENCYSTOP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_EMERGENCYSTOP_default_value(void *pValue);
extern SimTypeUtils _Type_Q_EMERGENCYSTOP_Utils;

/****************************************************************
 ** Q_LENGTH 
 ****************************************************************/
extern int Q_LENGTH_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LENGTH_string(const char *str, char **endptr);
extern int string_to_Q_LENGTH(const char *str, void *pValue, char **endptr);
extern int is_Q_LENGTH_allow_double_conversion();
extern int Q_LENGTH_to_double(const void *pValue, double *nValue);
extern int get_Q_LENGTH_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LENGTH(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LENGTH_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LENGTH_Utils;

/****************************************************************
 ** NID_LTRBG 
 ****************************************************************/
extern int NID_LTRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_LTRBG_string(const char *str, char **endptr);
extern int string_to_NID_LTRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LTRBG_allow_double_conversion();
extern int NID_LTRBG_to_double(const void *pValue, double *nValue);
extern int get_NID_LTRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_LTRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_LTRBG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_LTRBG_Utils;

/****************************************************************
 ** N_AXLE 
 ****************************************************************/
extern int N_AXLE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_AXLE_string(const char *str, char **endptr);
extern int string_to_N_AXLE(const char *str, void *pValue, char **endptr);
extern int is_N_AXLE_allow_double_conversion();
extern int N_AXLE_to_double(const void *pValue, double *nValue);
extern int get_N_AXLE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_AXLE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_AXLE_default_value(void *pValue);
extern SimTypeUtils _Type_N_AXLE_Utils;

/****************************************************************
 ** L_DOUBTOVER 
 ****************************************************************/
extern int L_DOUBTOVER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_DOUBTOVER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTOVER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTOVER_allow_double_conversion();
extern int L_DOUBTOVER_to_double(const void *pValue, double *nValue);
extern int get_L_DOUBTOVER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_DOUBTOVER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_DOUBTOVER_default_value(void *pValue);
extern SimTypeUtils _Type_L_DOUBTOVER_Utils;

/****************************************************************
 ** L_TRAININT 
 ****************************************************************/
extern int L_TRAININT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TRAININT_string(const char *str, char **endptr);
extern int string_to_L_TRAININT(const char *str, void *pValue, char **endptr);
extern int is_L_TRAININT_allow_double_conversion();
extern int L_TRAININT_to_double(const void *pValue, double *nValue);
extern int get_L_TRAININT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TRAININT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TRAININT_default_value(void *pValue);
extern SimTypeUtils _Type_L_TRAININT_Utils;

/****************************************************************
 ** L_DOUBTUNDER 
 ****************************************************************/
extern int L_DOUBTUNDER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_DOUBTUNDER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTUNDER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTUNDER_allow_double_conversion();
extern int L_DOUBTUNDER_to_double(const void *pValue, double *nValue);
extern int get_L_DOUBTUNDER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_DOUBTUNDER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_DOUBTUNDER_default_value(void *pValue);
extern SimTypeUtils _Type_L_DOUBTUNDER_Utils;

/****************************************************************
 ** NID_XUSER 
 ****************************************************************/
extern int NID_XUSER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_XUSER_string(const char *str, char **endptr);
extern int string_to_NID_XUSER(const char *str, void *pValue, char **endptr);
extern int is_NID_XUSER_allow_double_conversion();
extern int NID_XUSER_to_double(const void *pValue, double *nValue);
extern int get_NID_XUSER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_XUSER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_XUSER_default_value(void *pValue);
extern SimTypeUtils _Type_NID_XUSER_Utils;

/****************************************************************
 ** NID_PRVLRBG 
 ****************************************************************/
extern int NID_PRVLRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_PRVLRBG_string(const char *str, char **endptr);
extern int string_to_NID_PRVLRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_PRVLRBG_allow_double_conversion();
extern int NID_PRVLRBG_to_double(const void *pValue, double *nValue);
extern int get_NID_PRVLRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_PRVLRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_PRVLRBG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_PRVLRBG_Utils;

/****************************************************************
 ** D_LRBG 
 ****************************************************************/
extern int D_LRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LRBG_string(const char *str, char **endptr);
extern int string_to_D_LRBG(const char *str, void *pValue, char **endptr);
extern int is_D_LRBG_allow_double_conversion();
extern int D_LRBG_to_double(const void *pValue, double *nValue);
extern int get_D_LRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LRBG_default_value(void *pValue);
extern SimTypeUtils _Type_D_LRBG_Utils;

/****************************************************************
 ** V_TRAIN 
 ****************************************************************/
extern int V_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_TRAIN_string(const char *str, char **endptr);
extern int string_to_V_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_TRAIN_allow_double_conversion();
extern int V_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_V_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_V_TRAIN_Utils;

/****************************************************************
 ** L_MESSAGE 
 ****************************************************************/
extern int L_MESSAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_MESSAGE_string(const char *str, char **endptr);
extern int string_to_L_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_L_MESSAGE_allow_double_conversion();
extern int L_MESSAGE_to_double(const void *pValue, double *nValue);
extern int get_L_MESSAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_MESSAGE_default_value(void *pValue);
extern SimTypeUtils _Type_L_MESSAGE_Utils;

/****************************************************************
 ** V_MAXTRAIN 
 ****************************************************************/
extern int V_MAXTRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_MAXTRAIN_string(const char *str, char **endptr);
extern int string_to_V_MAXTRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAXTRAIN_allow_double_conversion();
extern int V_MAXTRAIN_to_double(const void *pValue, double *nValue);
extern int get_V_MAXTRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_MAXTRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_MAXTRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_V_MAXTRAIN_Utils;

/****************************************************************
 ** T_MAR 
 ****************************************************************/
extern int T_MAR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_MAR_string(const char *str, char **endptr);
extern int string_to_T_MAR(const char *str, void *pValue, char **endptr);
extern int is_T_MAR_allow_double_conversion();
extern int T_MAR_to_double(const void *pValue, double *nValue);
extern int get_T_MAR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_MAR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_MAR_default_value(void *pValue);
extern SimTypeUtils _Type_T_MAR_Utils;

/****************************************************************
 ** T_TIMEOUTRQST 
 ****************************************************************/
extern int T_TIMEOUTRQST_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_TIMEOUTRQST_string(const char *str, char **endptr);
extern int string_to_T_TIMEOUTRQST(const char *str, void *pValue, char **endptr);
extern int is_T_TIMEOUTRQST_allow_double_conversion();
extern int T_TIMEOUTRQST_to_double(const void *pValue, double *nValue);
extern int get_T_TIMEOUTRQST_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_TIMEOUTRQST(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_TIMEOUTRQST_default_value(void *pValue);
extern SimTypeUtils _Type_T_TIMEOUTRQST_Utils;

/****************************************************************
 ** T_CYCRQST 
 ****************************************************************/
extern int T_CYCRQST_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_CYCRQST_string(const char *str, char **endptr);
extern int string_to_T_CYCRQST(const char *str, void *pValue, char **endptr);
extern int is_T_CYCRQST_allow_double_conversion();
extern int T_CYCRQST_to_double(const void *pValue, double *nValue);
extern int get_T_CYCRQST_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_CYCRQST(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_CYCRQST_default_value(void *pValue);
extern SimTypeUtils _Type_T_CYCRQST_Utils;

/****************************************************************
 ** D_RBCTR 
 ****************************************************************/
extern int D_RBCTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_RBCTR_string(const char *str, char **endptr);
extern int string_to_D_RBCTR(const char *str, void *pValue, char **endptr);
extern int is_D_RBCTR_allow_double_conversion();
extern int D_RBCTR_to_double(const void *pValue, double *nValue);
extern int get_D_RBCTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_RBCTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_RBCTR_default_value(void *pValue);
extern SimTypeUtils _Type_D_RBCTR_Utils;

/****************************************************************
 ** SessionManagement_T 
 ****************************************************************/
extern int SessionManagement_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SessionManagement_T_string(const char *str, char **endptr);
extern int string_to_SessionManagement_T(const char *str, void *pValue, char **endptr);
extern int is_SessionManagement_T_allow_double_conversion();
extern int SessionManagement_T_to_double(const void *pValue, double *nValue);
extern int get_SessionManagement_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SessionManagement_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SessionManagement_T_default_value(void *pValue);
extern SimTypeUtils _Type_SessionManagement_T_Utils;

/****************************************************************
 ** TrainData_T 
 ****************************************************************/
extern int TrainData_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainData_T_string(const char *str, char **endptr);
extern int string_to_TrainData_T(const char *str, void *pValue, char **endptr);
extern int is_TrainData_T_allow_double_conversion();
extern int TrainData_T_to_double(const void *pValue, double *nValue);
extern int get_TrainData_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainData_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainData_T_default_value(void *pValue);
extern SimTypeUtils _Type_TrainData_T_Utils;

/****************************************************************
 ** PosData_T 
 ****************************************************************/
extern int PosData_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PosData_T_string(const char *str, char **endptr);
extern int string_to_PosData_T(const char *str, void *pValue, char **endptr);
extern int is_PosData_T_allow_double_conversion();
extern int PosData_T_to_double(const void *pValue, double *nValue);
extern int get_PosData_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PosData_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PosData_T_default_value(void *pValue);
extern SimTypeUtils _Type_PosData_T_Utils;

/****************************************************************
 ** Clock_T 
 ****************************************************************/
extern int Clock_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Clock_T_string(const char *str, char **endptr);
extern int string_to_Clock_T(const char *str, void *pValue, char **endptr);
extern int is_Clock_T_allow_double_conversion();
extern int Clock_T_to_double(const void *pValue, double *nValue);
extern int get_Clock_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Clock_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Clock_T_default_value(void *pValue);
extern SimTypeUtils _Type_Clock_T_Utils;

/****************************************************************
 ** DynamicConfig_T 
 ****************************************************************/
extern int DynamicConfig_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DynamicConfig_T_string(const char *str, char **endptr);
extern int string_to_DynamicConfig_T(const char *str, void *pValue, char **endptr);
extern int is_DynamicConfig_T_allow_double_conversion();
extern int DynamicConfig_T_to_double(const void *pValue, double *nValue);
extern int get_DynamicConfig_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DynamicConfig_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DynamicConfig_T_default_value(void *pValue);
extern SimTypeUtils _Type_DynamicConfig_T_Utils;

/****************************************************************
 ** NationalParams_T 
 ****************************************************************/
extern int NationalParams_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NationalParams_T_string(const char *str, char **endptr);
extern int string_to_NationalParams_T(const char *str, void *pValue, char **endptr);
extern int is_NationalParams_T_allow_double_conversion();
extern int NationalParams_T_to_double(const void *pValue, double *nValue);
extern int get_NationalParams_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NationalParams_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NationalParams_T_default_value(void *pValue);
extern SimTypeUtils _Type_NationalParams_T_Utils;

/****************************************************************
 ** MAReqParams_T 
 ****************************************************************/
extern int MAReqParams_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MAReqParams_T_string(const char *str, char **endptr);
extern int string_to_MAReqParams_T(const char *str, void *pValue, char **endptr);
extern int is_MAReqParams_T_allow_double_conversion();
extern int MAReqParams_T_to_double(const void *pValue, double *nValue);
extern int get_MAReqParams_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MAReqParams_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MAReqParams_T_default_value(void *pValue);
extern SimTypeUtils _Type_MAReqParams_T_Utils;

/****************************************************************
 ** PosRepParams_T 
 ****************************************************************/
extern int PosRepParams_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PosRepParams_T_string(const char *str, char **endptr);
extern int string_to_PosRepParams_T(const char *str, void *pValue, char **endptr);
extern int is_PosRepParams_T_allow_double_conversion();
extern int PosRepParams_T_to_double(const void *pValue, double *nValue);
extern int get_PosRepParams_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PosRepParams_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PosRepParams_T_default_value(void *pValue);
extern SimTypeUtils _Type_PosRepParams_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueue_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueue_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioTrackTrainMessageQueue_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueue_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueue_T_allow_double_conversion();
extern int RadioTrackTrainMessageQueue_T_to_double(const void *pValue, double *nValue);
extern int get_RadioTrackTrainMessageQueue_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioTrackTrainMessageQueue_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioTrackTrainMessageQueue_T_default_value(void *pValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueue_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueueEntries_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueueEntries_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioTrackTrainMessageQueueEntries_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueueEntries_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueueEntries_T_allow_double_conversion();
extern int RadioTrackTrainMessageQueueEntries_T_to_double(const void *pValue, double *nValue);
extern int get_RadioTrackTrainMessageQueueEntries_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioTrackTrainMessageQueueEntries_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioTrackTrainMessageQueueEntries_T_default_value(void *pValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueueEntries_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueueEntry_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueueEntry_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioTrackTrainMessageQueueEntry_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueueEntry_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueueEntry_T_allow_double_conversion();
extern int RadioTrackTrainMessageQueueEntry_T_to_double(const void *pValue, double *nValue);
extern int get_RadioTrackTrainMessageQueueEntry_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioTrackTrainMessageQueueEntry_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioTrackTrainMessageQueueEntry_T_default_value(void *pValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueueEntry_T_Utils;

/****************************************************************
 ** Q_ORIENTATION 
 ****************************************************************/
extern int Q_ORIENTATION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_ORIENTATION_string(const char *str, char **endptr);
extern int string_to_Q_ORIENTATION(const char *str, void *pValue, char **endptr);
extern int is_Q_ORIENTATION_allow_double_conversion();
extern int Q_ORIENTATION_to_double(const void *pValue, double *nValue);
extern int get_Q_ORIENTATION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_ORIENTATION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_ORIENTATION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_ORIENTATION_Utils;

/****************************************************************
 ** D_TAFDISPLAY 
 ****************************************************************/
extern int D_TAFDISPLAY_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_TAFDISPLAY_string(const char *str, char **endptr);
extern int string_to_D_TAFDISPLAY(const char *str, void *pValue, char **endptr);
extern int is_D_TAFDISPLAY_allow_double_conversion();
extern int D_TAFDISPLAY_to_double(const void *pValue, double *nValue);
extern int get_D_TAFDISPLAY_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_TAFDISPLAY(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_TAFDISPLAY_default_value(void *pValue);
extern SimTypeUtils _Type_D_TAFDISPLAY_Utils;

/****************************************************************
 ** L_TAFDISPLAY 
 ****************************************************************/
extern int L_TAFDISPLAY_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TAFDISPLAY_string(const char *str, char **endptr);
extern int string_to_L_TAFDISPLAY(const char *str, void *pValue, char **endptr);
extern int is_L_TAFDISPLAY_allow_double_conversion();
extern int L_TAFDISPLAY_to_double(const void *pValue, double *nValue);
extern int get_L_TAFDISPLAY_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TAFDISPLAY(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TAFDISPLAY_default_value(void *pValue);
extern SimTypeUtils _Type_L_TAFDISPLAY_Utils;

/****************************************************************
 ** M_TrainTrack_Message_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_Message_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrack_Message_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_Message_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_Message_T_TM_radio_messages_allow_double_conversion();
extern int M_TrainTrack_Message_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrack_Message_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrack_Message_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrack_Message_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrack_Message_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_MessageHd_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrack_MessageHd_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_MessageHd_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_MessageHd_T_TM_radio_messages_allow_double_conversion();
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrack_MessageHd_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrack_MessageHd_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrack_MessageHd_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrack_MessageHd_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_compressed_packets_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrack_compressed_packets_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_compressed_packets_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_compressed_packets_T_TM_radio_messages_allow_double_conversion();
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrack_compressed_packets_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrack_compressed_packets_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrack_compressed_packets_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrack_compressed_packets_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_136_T_TM_radio_messages 
 ****************************************************************/
extern int M_136_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_136_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_136_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_136_T_TM_radio_messages_allow_double_conversion();
extern int M_136_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_136_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_136_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_136_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_136_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_129_T_TM_radio_messages 
 ****************************************************************/
extern int M_129_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_129_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_129_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_129_T_TM_radio_messages_allow_double_conversion();
extern int M_129_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_129_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_129_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_129_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_129_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_146_T_TM_radio_messages 
 ****************************************************************/
extern int M_146_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_146_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_146_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_146_T_TM_radio_messages_allow_double_conversion();
extern int M_146_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_146_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_146_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_146_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_146_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_147_T_TM_radio_messages 
 ****************************************************************/
extern int M_147_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_147_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_147_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_147_T_TM_radio_messages_allow_double_conversion();
extern int M_147_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_147_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_147_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_147_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_147_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_132_T_TM_radio_messages 
 ****************************************************************/
extern int M_132_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_132_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_132_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_132_T_TM_radio_messages_allow_double_conversion();
extern int M_132_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_132_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_132_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_132_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_132_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_154_T_TM_radio_messages 
 ****************************************************************/
extern int M_154_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_154_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_154_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_154_T_TM_radio_messages_allow_double_conversion();
extern int M_154_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_154_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_154_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_154_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_154_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_159_T_TM_radio_messages 
 ****************************************************************/
extern int M_159_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_159_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_159_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_159_T_TM_radio_messages_allow_double_conversion();
extern int M_159_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_159_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_159_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_159_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_159_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_156_T_TM_radio_messages 
 ****************************************************************/
extern int M_156_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_156_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_156_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_156_T_TM_radio_messages_allow_double_conversion();
extern int M_156_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_156_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_156_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_156_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_156_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_155_T_TM_radio_messages 
 ****************************************************************/
extern int M_155_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_155_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_155_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_155_T_TM_radio_messages_allow_double_conversion();
extern int M_155_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_155_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_155_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_155_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_155_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_003_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_003_int_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_003_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_003_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_003_int_T_TM_radio_messages_allow_double_conversion();
extern int M_003_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_003_int_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_003_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_003_int_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_003_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrackTrain_Radio_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrackTrain_Radio_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrackTrain_Radio_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrackTrain_Radio_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrackTrain_Radio_T_TM_radio_messages_allow_double_conversion();
extern int M_TrackTrain_Radio_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrackTrain_Radio_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrackTrain_Radio_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrackTrain_Radio_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrackTrain_Radio_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_015_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_015_int_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_015_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_015_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_015_int_T_TM_radio_messages_allow_double_conversion();
extern int M_015_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_015_int_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_015_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_015_int_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_015_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_027_T_TM_radio_messages 
 ****************************************************************/
extern int M_027_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_027_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_027_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_027_T_TM_radio_messages_allow_double_conversion();
extern int M_027_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_027_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_027_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_027_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_027_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_024_T_TM_radio_messages 
 ****************************************************************/
extern int M_024_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_024_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_024_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_024_T_TM_radio_messages_allow_double_conversion();
extern int M_024_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_024_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_024_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_024_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_024_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_018_T_TM_radio_messages 
 ****************************************************************/
extern int M_018_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_018_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_018_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_018_T_TM_radio_messages_allow_double_conversion();
extern int M_018_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_018_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_018_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_018_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_018_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_016_T_TM_radio_messages 
 ****************************************************************/
extern int M_016_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_016_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_016_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_016_T_TM_radio_messages_allow_double_conversion();
extern int M_016_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_016_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_016_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_016_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_016_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_015_T_TM_radio_messages 
 ****************************************************************/
extern int M_015_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_015_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_015_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_015_T_TM_radio_messages_allow_double_conversion();
extern int M_015_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_015_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_015_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_015_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_015_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_009_T_TM_radio_messages 
 ****************************************************************/
extern int M_009_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_009_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_009_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_009_T_TM_radio_messages_allow_double_conversion();
extern int M_009_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_009_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_009_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_009_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_009_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_008_T_TM_radio_messages 
 ****************************************************************/
extern int M_008_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_008_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_008_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_008_T_TM_radio_messages_allow_double_conversion();
extern int M_008_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_008_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_008_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_008_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_008_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_006_T_TM_radio_messages 
 ****************************************************************/
extern int M_006_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_006_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_006_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_006_T_TM_radio_messages_allow_double_conversion();
extern int M_006_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_006_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_006_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_006_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_006_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_003_T_TM_radio_messages 
 ****************************************************************/
extern int M_003_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_003_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_003_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_003_T_TM_radio_messages_allow_double_conversion();
extern int M_003_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_003_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_003_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_003_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_003_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_002_T_TM_radio_messages 
 ****************************************************************/
extern int M_002_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_002_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_002_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_002_T_TM_radio_messages_allow_double_conversion();
extern int M_002_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_002_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_002_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_002_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_002_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_045_T_TM_radio_messages 
 ****************************************************************/
extern int M_045_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_045_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_045_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_045_T_TM_radio_messages_allow_double_conversion();
extern int M_045_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_045_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_045_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_045_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_045_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_043_T_TM_radio_messages 
 ****************************************************************/
extern int M_043_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_043_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_043_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_043_T_TM_radio_messages_allow_double_conversion();
extern int M_043_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_043_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_043_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_043_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_043_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_041_T_TM_radio_messages 
 ****************************************************************/
extern int M_041_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_041_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_041_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_041_T_TM_radio_messages_allow_double_conversion();
extern int M_041_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_041_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_041_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_041_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_041_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_040_T_TM_radio_messages 
 ****************************************************************/
extern int M_040_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_040_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_040_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_040_T_TM_radio_messages_allow_double_conversion();
extern int M_040_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_040_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_040_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_040_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_040_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_039_T_TM_radio_messages 
 ****************************************************************/
extern int M_039_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_039_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_039_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_039_T_TM_radio_messages_allow_double_conversion();
extern int M_039_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_039_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_039_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_039_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_039_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_038_T_TM_radio_messages 
 ****************************************************************/
extern int M_038_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_038_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_038_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_038_T_TM_radio_messages_allow_double_conversion();
extern int M_038_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_038_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_038_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_038_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_038_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_034_T_TM_radio_messages 
 ****************************************************************/
extern int M_034_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_034_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_034_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_034_T_TM_radio_messages_allow_double_conversion();
extern int M_034_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_034_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_034_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_034_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_034_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_033_T_TM_radio_messages 
 ****************************************************************/
extern int M_033_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_033_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_033_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_033_T_TM_radio_messages_allow_double_conversion();
extern int M_033_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_033_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_033_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_033_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_033_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_032_T_TM_radio_messages 
 ****************************************************************/
extern int M_032_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_032_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_032_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_032_T_TM_radio_messages_allow_double_conversion();
extern int M_032_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_032_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_032_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_032_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_032_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_028_T_TM_radio_messages 
 ****************************************************************/
extern int M_028_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_028_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_028_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_028_T_TM_radio_messages_allow_double_conversion();
extern int M_028_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_028_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_028_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_028_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_028_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_032_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_032_int_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_032_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_032_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_032_int_T_TM_radio_messages_allow_double_conversion();
extern int M_032_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_032_int_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_032_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_032_int_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_032_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_008_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_008_int_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_008_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_008_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_008_int_T_TM_radio_messages_allow_double_conversion();
extern int M_008_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_008_int_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_008_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_008_int_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_008_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_024_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_024_int_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_024_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_024_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_024_int_T_TM_radio_messages_allow_double_conversion();
extern int M_024_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_024_int_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_024_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_024_int_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_024_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** RadioManagement_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioManagement_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioManagement_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioManagement_T_API_RadioCommunication_Pkg_allow_double_conversion();
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RadioManagement_T_API_RadioCommunication_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioManagement_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioManagement_T_API_RadioCommunication_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RadioManagement_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** cmdRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_cmdRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_cmdRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cmdRadioUnit_T_API_RadioCommunication_Pkg_allow_double_conversion();
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int get_cmdRadioUnit_T_API_RadioCommunication_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_cmdRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_cmdRadioUnit_T_API_RadioCommunication_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_cmdRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_allow_double_conversion();
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int get_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EVC_to_DMI_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_int_T_API_DMI_Pkg_allow_double_conversion();
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_EVC_to_DMI_Message_int_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EVC_to_DMI_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EVC_to_DMI_Message_int_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EVC_to_DMI_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_T_API_DMI_Pkg_allow_double_conversion();
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_EVC_to_DMI_Message_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EVC_to_DMI_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EVC_to_DMI_Message_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_to_EVC_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_T_API_DMI_Pkg_allow_double_conversion();
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_to_EVC_Message_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_to_EVC_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_to_EVC_Message_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_to_EVC_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_int_T_API_DMI_Pkg_allow_double_conversion();
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_to_EVC_Message_int_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_to_EVC_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_to_EVC_Message_int_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** TIU_Output_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Output_msg_API_TIU_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_Output_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Output_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Output_msg_API_TIU_Pkg_allow_double_conversion();
extern int TIU_Output_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_Output_msg_API_TIU_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_Output_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_Output_msg_API_TIU_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_Output_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** TIU_Input_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Input_msg_API_TIU_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_Input_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Input_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Input_msg_API_TIU_Pkg_allow_double_conversion();
extern int TIU_Input_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_Input_msg_API_TIU_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_Input_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_Input_msg_API_TIU_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_Input_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** Message_EVC_to_Train_Interface_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_allow_double_conversion();
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Isolation_Status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Isolation_Status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Isolation_Status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Isolation_Status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Isolation_Status_T_TIU_Types_Pkg_allow_double_conversion();
extern int Isolation_Status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Isolation_Status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Isolation_Status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Isolation_Status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Isolation_Status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_Isolation_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_Isolation_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_Isolation_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_Isolation_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_Isolation_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_Isolation_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_Isolation_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_Isolation_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_Isolation_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_Isolation_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_signal_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_brake_signal_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_signal_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_signal_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_brake_signal_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_brake_signal_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_brake_signal_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_brake_signal_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_inhibition_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_inhibition_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_inhibition_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_inhibition_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_inhibition_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_inhibition_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_inhibition_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_inhibition_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_inhibit_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_brake_inhibit_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_inhibit_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_inhibit_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_brake_inhibit_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_brake_inhibit_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_brake_inhibit_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_brake_inhibit_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_eddy_current_brake_inhibition_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Type_I_train_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Type_I_train_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_commands_T_TIU_Types_Pkg_allow_double_conversion();
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Type_I_train_commands_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Type_I_train_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Type_I_train_commands_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Type_I_train_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_pantograph_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_pantograph_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_pantograph_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_pantograph_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_pantograph_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_pantograph_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_pantograph_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_pantograph_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_pantograph_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_pantograph_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_airtightness_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_airtightness_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_airtightness_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_airtightness_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_airtightness_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_airtightness_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_airtightness_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_airtightness_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_airtightness_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_airtightness_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_mainpowerswitch_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_mainpowerswitch_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_mainpowerswitch_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_mainpowerswitch_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_mainpowerswitch_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_mainpowerswitch_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_mainpowerswitch_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_mainpowerswitch_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_cutoff_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_traction_cutoff_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_cutoff_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_cutoff_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_traction_cutoff_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_traction_cutoff_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_traction_cutoff_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_traction_cutoff_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Change_traction_system_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_traction_system_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Change_traction_system_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_traction_system_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_traction_system_T_TIU_Types_Pkg_allow_double_conversion();
extern int Change_traction_system_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Change_traction_system_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Change_traction_system_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Change_traction_system_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Change_traction_system_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_traction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_traction_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_traction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_traction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_traction_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_traction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_traction_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_traction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_traction_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_traction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_distance_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_distance_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_distance_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_distance_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_distance_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_distance_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_distance_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_distance_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_distance_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_distance_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_voltage_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_voltage_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_voltage_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_voltage_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_voltage_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_voltage_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_voltage_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_voltage_types_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_types_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_voltage_types_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_types_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_types_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_voltage_types_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_voltage_types_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_voltage_types_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_voltage_types_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_voltage_types_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** NID_ctraction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int NID_ctraction_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_ctraction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ctraction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ctraction_T_TIU_Types_Pkg_allow_double_conversion();
extern int NID_ctraction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_NID_ctraction_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_ctraction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_ctraction_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_NID_ctraction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Passenger_door_control_info_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Passenger_door_control_info_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Passenger_door_control_info_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Passenger_door_control_info_T_TIU_Types_Pkg_allow_double_conversion();
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Passenger_door_control_info_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Passenger_door_control_info_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Passenger_door_control_info_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Passenger_door_control_info_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Change_of_allowed_current_consumption_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_allow_double_conversion();
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_current_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_current_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_current_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_current_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_current_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_current_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TIU_commandStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_commandStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_commandStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_commandStatus_T_TIU_Types_Pkg_allow_double_conversion();
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_commandStatus_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_commandStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_commandStatus_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_commandStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TIU_trainStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_trainStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_trainStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_trainStatus_T_TIU_Types_Pkg_allow_double_conversion();
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_trainStatus_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_trainStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_trainStatus_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_trainStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** cab_ID_T_TIU_Types_Pkg 
 ****************************************************************/
extern int cab_ID_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_cab_ID_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_cab_ID_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cab_ID_T_TIU_Types_Pkg_allow_double_conversion();
extern int cab_ID_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_cab_ID_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_cab_ID_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_cab_ID_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_cab_ID_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** trainData_T_TIU_Types_Pkg 
 ****************************************************************/
extern int trainData_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_T_TIU_Types_Pkg_allow_double_conversion();
extern int trainData_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_cab_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_cab_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_cab_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_cab_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_cab_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_cab_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_cab_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_cab_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Message_Train_Interface_to_EVC_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_allow_double_conversion();
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Mode_control_and_train_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Mode_control_and_train_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Mode_control_and_train_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Mode_control_and_train_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Mode_control_and_train_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Mode_control_and_train_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Mode_control_and_train_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Mode_control_and_train_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_sleeping_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_sleeping_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_sleeping_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_sleeping_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_sleeping_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_sleeping_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_sleeping_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_sleeping_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_passiveshunting_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_passiveshunting_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_passiveshunting_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_passiveshunting_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_passiveshunting_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_passiveshunting_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_passiveshunting_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_passiveshunting_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_nonleading_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_nonleading_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_nonleading_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_nonleading_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_nonleading_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_nonleading_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_nonleading_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_nonleading_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_directioncontroller_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_directioncontroller_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_directioncontroller_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_directioncontroller_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_directioncontroller_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_directioncontroller_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_directioncontroller_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_directioncontroller_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_trainintegrity_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_trainintegrity_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trainintegrity_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trainintegrity_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_trainintegrity_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_trainintegrity_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_trainintegrity_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_trainintegrity_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_traction_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_traction_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_traction_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_traction_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_traction_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_brake_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_brake_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_pressure_value_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_pressure_value_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_pressure_value_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_pressure_value_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_pressure_value_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_pressure_value_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_pressure_value_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_pressure_value_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_train_data_entry_type_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_train_data_entry_type_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_train_data_entry_type_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_train_data_entry_type_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_train_data_entry_type_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_train_data_entry_type_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_train_data_entry_type_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_train_data_entry_type_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_allow_double_conversion();
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** nothing_to_resume_profile_follow_T_TIU_Types_Pkg 
 ****************************************************************/
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_allow_double_conversion();
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackcond_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_trackcond_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_trackcond_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** L_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int L_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_test_trackcond_T_TIU_Types_Pkg_allow_double_conversion();
extern int L_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_L_test_trackcond_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_test_trackcond_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_L_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trackcond_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_trackcond_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_trackcond_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackinit_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackinit_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_trackinit_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackinit_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackinit_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_trackinit_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_trackinit_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_trackinit_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_trackinit_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_trackinit_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Level_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Level_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_AcknoledgementRequest_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_AnnouncedLevel_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LevelTransition_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_LevelTransition_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LevelTransition_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LevelTransition_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_LevelTransition_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTansitionInfo_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_TransitionType_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_TransitionType_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_TransitionType_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_TransitionType_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_TransitionType_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_TransitionType_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_TransitionType_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_TransitionType_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_MA_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_MA_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_MA_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_MA_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_MA_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_MA_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_MA_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_MA_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_MA_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_MA_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Profile_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Profile_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Profile_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Profile_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Profile_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Reversing_Data_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Reversing_Data_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Reversing_Data_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Reversing_Data_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Reversing_Data_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Reversing_Data_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Reversing_Data_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Reversing_Data_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Table_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_To_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_DMI_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_To_DMI_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_To_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_To_DMI_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_To_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_BG_Management_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Localisation_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_DMI_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_DMI_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_DMI_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_STM_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_STM_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_STM_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_STM_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_STM_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_STM_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_STM_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_STM_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_F2_functions_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_ERTMS_capabilities_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** dmiOutputs_T_manage_DMI_Output_Pkg 
 ****************************************************************/
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_dmiOutputs_T_manage_DMI_Output_Pkg_string(const char *str, char **endptr);
extern int string_to_dmiOutputs_T_manage_DMI_Output_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dmiOutputs_T_manage_DMI_Output_Pkg_allow_double_conversion();
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_double(const void *pValue, double *nValue);
extern int get_dmiOutputs_T_manage_DMI_Output_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_dmiOutputs_T_manage_DMI_Output_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_dmiOutputs_T_manage_DMI_Output_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_dmiOutputs_T_manage_DMI_Output_Pkg_Utils;

/****************************************************************
 ** T_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** V_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_V_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_V_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** L_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_L_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_L_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** LocWithInAcc_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LocWithInAcc_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_LocWithInAcc_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocWithInAcc_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LocWithInAcc_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LocWithInAcc_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LocWithInAcc_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LocWithInAcc_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Location_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Location_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Location_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Location_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Location_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int Location_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Location_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Location_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Location_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Location_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odometry_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odometry_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odometry_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odometry_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odometry_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int odometry_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_odometry_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odometry_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odometry_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_odometry_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometryLocations_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OdometryLocations_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometryLocations_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometryLocations_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_OdometryLocations_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OdometryLocations_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OdometryLocations_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_OdometryLocations_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometrySpeeds_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OdometrySpeeds_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometrySpeeds_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeeds_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_OdometrySpeeds_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OdometrySpeeds_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OdometrySpeeds_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_OdometrySpeeds_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** V_odometry_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_odometry_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_odometry_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_odometry_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_V_odometry_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_odometry_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_odometry_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_V_odometry_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** A_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_A_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_A_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionState_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odoMotionState_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionState_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionState_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_odoMotionState_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odoMotionState_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odoMotionState_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_odoMotionState_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionDirection_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odoMotionDirection_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionDirection_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionDirection_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_odoMotionDirection_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odoMotionDirection_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odoMotionDirection_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_odoMotionDirection_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** G_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_G_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_G_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_G_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_G_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_G_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_G_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_G_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** BCD_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int BCD_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BCD_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int BCD_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BCD_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BCD_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BCD_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BCD_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Speed_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Speed_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Speed_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Speed_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speed_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int Speed_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Speed_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Speed_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Speed_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Speed_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_status_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_status_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_status_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DMI_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_DMI_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DMI_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DMI_Identifier_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_DMI_Identifier_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_DMI_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_DMI_Identifier_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_DMI_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Cabin_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Cabin_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Cabin_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Cabin_Identifier_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Cabin_Identifier_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Cabin_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Cabin_Identifier_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Cabin_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TEXT_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TEXT_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_level_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_level_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_level_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_level_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_level_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_level_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_level_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** NID_STM_DMI_Types_Pkg 
 ****************************************************************/
extern int NID_STM_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_STM_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_STM_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_STM_DMI_Types_Pkg_allow_double_conversion();
extern int NID_STM_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_NID_STM_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_STM_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_STM_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_NID_STM_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_SupervisionDisplay_T_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SupervisionDisplay_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_T_DMI_Types_Pkg_allow_double_conversion();
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_SupervisionDisplay_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SupervisionDisplay_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SupervisionDisplay_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SUPERVISION_STATUS_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_DMI_Types_Pkg_allow_double_conversion();
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_SUPERVISION_STATUS_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SUPERVISION_STATUS_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SUPERVISION_STATUS_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_DMI_Types_Pkg_Utils;

/****************************************************************
 ** speedSupervisionForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_speedSupervisionForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_speedSupervisionForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_speedSupervisionForDMI_T_DMI_Types_Pkg_allow_double_conversion();
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_speedSupervisionForDMI_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_speedSupervisionForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_speedSupervisionForDMI_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_speedSupervisionForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** nationValuesForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nationValuesForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nationValuesForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nationValuesForDMI_T_DMI_Types_Pkg_allow_double_conversion();
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nationValuesForDMI_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nationValuesForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nationValuesForDMI_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nationValuesForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** movementAuthorityForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_movementAuthorityForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_movementAuthorityForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_movementAuthorityForDMI_T_DMI_Types_Pkg_allow_double_conversion();
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_movementAuthorityForDMI_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_movementAuthorityForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_movementAuthorityForDMI_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_movementAuthorityForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Available_Menu_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Available_Menu_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Available_Menu_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Available_Menu_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Available_Menu_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Available_Menu_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_List_Entry_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_List_Entry_Request_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_List_Entry_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_List_Entry_Request_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_train_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_train_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_id_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_id_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** BCD_DMI_Types_Pkg 
 ****************************************************************/
extern int BCD_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BCD_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_DMI_Types_Pkg_allow_double_conversion();
extern int BCD_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BCD_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BCD_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BCD_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BCD_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_train_length_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_length_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_length_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_train_length_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_length_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_length_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_length_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_length_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_brakeModel_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_brakeModel_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_brakeModel_id_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_brakeModel_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_brakeModel_id_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_vMax_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_vMax_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_vMax_id_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_vMax_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_vMax_id_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_vMax_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_airtightSystem_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_airtightSystem_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_airtightSystem_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_airtightSystem_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_airtightSystem_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_airtightSystem_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_loadingGauge_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_loadingGauge_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_loadingGauge_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_loadingGauge_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_loadingGauge_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_loadingGauge_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TextMessage_ID_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TextMessage_ID_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TextMessage_ID_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TextMessage_ID_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TextMessage_ID_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TextMessage_ID_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TextMessage_ID_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TextMessage_ID_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Q_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Q_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Q_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Q_TEXT_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Q_TEXT_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Q_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Q_TEXT_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Q_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_speedProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_speedProfile_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_speedProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_speedProfile_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_speedProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_SpeedProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_SpeedProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_SpeedProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_SpeedProfileArray_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_SpeedProfileArray_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_SpeedProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_SpeedProfileArray_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_SpeedProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_speedProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfileElement_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_speedProfileElement_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_speedProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_speedProfileElement_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_speedProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfile_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfile_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileArray_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfileArray_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfileArray_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileElement_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfileElement_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfileElement_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackCondition_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackCondition_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackCondition_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackCondition_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackCondition_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackCondition_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackConditionArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionArray_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackConditionArray_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackConditionArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackConditionArray_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackConditionArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackConditionElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionElement_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackConditionElement_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackConditionElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackConditionElement_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackConditionElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_LevelList_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_LevelList_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_LevelList_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_LevelList_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_LevelList_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_LevelList_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_LevelList_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_LevelList_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_level_array_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_array_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_level_array_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_array_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_array_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_level_array_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_level_array_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_level_array_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_level_array_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_level_array_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_BRAKEPERCT_DMI_Types_Pkg 
 ****************************************************************/
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_BRAKEPERCT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_BRAKEPERCT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_BRAKEPERCT_DMI_Types_Pkg_allow_double_conversion();
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_BRAKEPERCT_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_BRAKEPERCT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_BRAKEPERCT_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_BRAKEPERCT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Icon_control_flag_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_control_flag_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_control_flag_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_T_DMI_Types_Pkg_allow_double_conversion();
extern int Icon_control_flag_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Icon_control_flag_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_control_flag_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_control_flag_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_control_flag_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Icon_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_T_DMI_Types_Pkg_allow_double_conversion();
extern int Icon_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Icon_group_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_group_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Area_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Area_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Area_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Area_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Area_group_T_DMI_Types_Pkg_allow_double_conversion();
extern int Area_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Area_group_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Area_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Area_group_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Area_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSGList_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSG_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TXT_MSG_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSG_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSG_status_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TXT_MSG_status_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TXT_MSG_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TXT_MSG_status_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TXT_MSG_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_context_TXT_MSG_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_context_TXT_MSG_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_context_TXT_MSG_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_context_TXT_MSG_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_context_TXT_MSG_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_context_TXT_MSG_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_context_TXT_MSG_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_context_TXT_MSG_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Request_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Request_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Request_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_StatusSet_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_StatusSet_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_StatusSet_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_StatusSet_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_StatusSet_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_StatusSet_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_StatusSet_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_StatusSet_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_To_Modes_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_To_Modes_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_To_Modes_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_To_Modes_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_To_Modes_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_To_Modes_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_To_Modes_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_To_Modes_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DriverAck_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_DriverAck_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverAck_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverAck_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_DriverAck_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_DriverAck_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_DriverAck_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_DriverAck_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DriverRequest_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_DriverRequest_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverRequest_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverRequest_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_DriverRequest_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_DriverRequest_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_DriverRequest_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_DriverRequest_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** mobileConnectionStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnectionStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionStatus_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnectionStatus_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnectionStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnectionStatus_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnectionStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationContext_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationContext_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationContext_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileHealthStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileHealthStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileHealthStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileHealthStatus_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileHealthStatus_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileHealthStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileHealthStatus_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileHealthStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationStatus_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationStatus_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationStatus_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnectionContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionContext_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnectionContext_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnectionContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnectionContext_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnectionContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnetionAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnetionAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnetionAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnetionAction_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnetionAction_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnetionAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnetionAction_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnetionAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnectionCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionCmd_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnectionCmd_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnectionCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnectionCmd_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnectionCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationCmd_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationCmd_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationCmd_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationAction_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationAction_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationAction_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** morcStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morcStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_morcStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morcStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morcStatus_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int morcStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_morcStatus_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_morcStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_morcStatus_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_morcStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sessionStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionStatus_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sessionStatus_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sessionStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sessionStatus_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sessionStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionPhase_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sessionPhase_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionPhase_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionPhase_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sessionPhase_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sessionPhase_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sessionPhase_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sessionPhase_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionCmd_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sessionCmd_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionCmd_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionCmd_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sessionCmd_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sessionCmd_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sessionCmd_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sessionCmd_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** obuEventsAndPhases_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_obuEventsAndPhases_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_obuEventsAndPhases_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_obuEventsAndPhases_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_obuEventsAndPhases_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_obuEventsAndPhases_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_obuEventsAndPhases_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_obuEventsAndPhases_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** safeRadioConnectionIndication_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** morc_configData_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morc_configData_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_morc_configData_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morc_configData_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morc_configData_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int morc_configData_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_morc_configData_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_morc_configData_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_morc_configData_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_morc_configData_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** trainPosition_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPosition_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainPosition_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPosition_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPosition_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int trainPosition_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_trainPosition_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainPosition_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainPosition_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_trainPosition_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBG_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBG_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionedBG_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBG_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBG_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int positionedBG_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_positionedBG_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionedBG_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionedBG_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_positionedBG_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** infoFromLinking_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_infoFromLinking_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_infoFromLinking_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_infoFromLinking_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_infoFromLinking_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_infoFromLinking_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_infoFromLinking_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_infoFromLinking_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainProperties_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainProperties_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainProperties_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainProperties_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainProperties_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int trainProperties_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_trainProperties_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainProperties_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainProperties_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_trainProperties_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int positionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_positionedBGs_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionedBGs_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_positionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionErrors_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionErrors_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionErrors_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionErrors_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionErrors_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int positionErrors_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_positionErrors_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionErrors_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionErrors_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_positionErrors_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainPositionInfo_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainPositionInfo_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPositionInfo_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPositionInfo_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_trainPositionInfo_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainPositionInfo_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainPositionInfo_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_trainPositionInfo_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** LinkedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LinkedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBG_T_BG_Types_Pkg_allow_double_conversion();
extern int LinkedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LinkedBG_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LinkedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LinkedBG_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LinkedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** passedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int passedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_passedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_passedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_passedBG_T_BG_Types_Pkg_allow_double_conversion();
extern int passedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_passedBG_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_passedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_passedBG_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_passedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Header_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Header_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_Header_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Header_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Header_T_BG_Types_Pkg_allow_double_conversion();
extern int BG_Header_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_Header_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_Header_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_Header_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_Header_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** LinkedBGs_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBGs_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LinkedBGs_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBGs_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBGs_T_BG_Types_Pkg_allow_double_conversion();
extern int LinkedBGs_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LinkedBGs_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LinkedBGs_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LinkedBGs_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LinkedBGs_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** centerOfBalisePosition_T_BG_Types_Pkg 
 ****************************************************************/
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_centerOfBalisePosition_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_centerOfBalisePosition_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_centerOfBalisePosition_T_BG_Types_Pkg_allow_double_conversion();
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_centerOfBalisePosition_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_centerOfBalisePosition_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_centerOfBalisePosition_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_centerOfBalisePosition_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramArray_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramArray_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TelegramArray_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramArray_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramArray_T_BG_Types_Pkg_allow_double_conversion();
extern int TelegramArray_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TelegramArray_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TelegramArray_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TelegramArray_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TelegramArray_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** Telegram_T_BG_Types_Pkg 
 ****************************************************************/
extern int Telegram_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Telegram_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Telegram_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Telegram_T_BG_Types_Pkg_allow_double_conversion();
extern int Telegram_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Telegram_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Telegram_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Telegram_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Telegram_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramHeader_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramHeader_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TelegramHeader_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramHeader_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramHeader_T_BG_Types_Pkg_allow_double_conversion();
extern int TelegramHeader_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TelegramHeader_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TelegramHeader_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TelegramHeader_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TelegramHeader_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Message_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Message_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_Message_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Message_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Message_T_BG_Types_Pkg_allow_double_conversion();
extern int BG_Message_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_Message_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_Message_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_Message_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_Message_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** NID_ERRORBG_BG_Types_Pkg 
 ****************************************************************/
extern int NID_ERRORBG_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_ERRORBG_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ERRORBG_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ERRORBG_BG_Types_Pkg_allow_double_conversion();
extern int NID_ERRORBG_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_NID_ERRORBG_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_ERRORBG_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_ERRORBG_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_NID_ERRORBG_BG_Types_Pkg_Utils;

/****************************************************************
 ** TrainToTrackStatus_T_BG_Types_Pkg 
 ****************************************************************/
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainToTrackStatus_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainToTrackStatus_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainToTrackStatus_T_BG_Types_Pkg_allow_double_conversion();
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TrainToTrackStatus_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainToTrackStatus_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainToTrackStatus_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TrainToTrackStatus_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** driverIdentifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_driverIdentifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_driverIdentifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_driverIdentifier_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_driverIdentifier_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_driverIdentifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_driverIdentifier_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_driverIdentifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Level_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** aNID_NTC_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_aNID_NTC_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_NTC_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_NTC_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_aNID_NTC_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_aNID_NTC_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_aNID_NTC_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_aNID_NTC_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** aTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_aTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aTractionIdentity_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_aTractionIdentity_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_aTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_aTractionIdentity_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_aTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** sTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sTractionIdentity_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sTractionIdentity_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sTractionIdentity_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT4_ErrorReporting_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT5_TrainRunningNumber_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT0_PositionReport_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT0_PositionReport_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT0_PositionReport_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT0_PositionReport_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT0_PositionReport_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT0_PositionReport_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT0_PositionReport_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT0_PositionReport_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** aNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_aNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_RADIO_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_aNID_RADIO_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_aNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_aNID_RADIO_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_aNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** sNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sNID_RADIO_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sNID_RADIO_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sNID_RADIO_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** telephoneNumber_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_telephoneNumber_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_telephoneNumber_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_telephoneNumber_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_telephoneNumber_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_telephoneNumber_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_telephoneNumber_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_telephoneNumber_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** MRSP_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_section_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_section_t_TrackAtlasTypes_allow_double_conversion();
extern int MRSP_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MRSP_section_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_section_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_for_DMI_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_section_t_TrackAtlasTypes_allow_double_conversion();
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_for_DMI_section_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_for_DMI_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_for_DMI_section_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForDMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForDMI_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DataForDMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForDMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForDMI_t_TrackAtlasTypes_allow_double_conversion();
extern int DataForDMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DataForDMI_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DataForDMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DataForDMI_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DataForDMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_for_DMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_t_TrackAtlasTypes_allow_double_conversion();
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_for_DMI_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_for_DMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_for_DMI_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MRSP_Profile_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_Profile_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_Profile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_Profile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_Profile_t_TrackAtlasTypes_allow_double_conversion();
extern int MRSP_Profile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MRSP_Profile_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_Profile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_Profile_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_Profile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MA_Level_t_TrackAtlasTypes 
 ****************************************************************/
extern int MA_Level_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MA_Level_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MA_Level_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MA_Level_t_TrackAtlasTypes_allow_double_conversion();
extern int MA_Level_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MA_Level_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MA_Level_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MA_Level_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MA_Level_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthoritySection_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MovementAuthoritySection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySection_t_TrackAtlasTypes_allow_double_conversion();
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MovementAuthoritySection_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MovementAuthoritySection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MovementAuthoritySection_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MovementAuthoritySection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthority_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthority_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MovementAuthority_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthority_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthority_t_TrackAtlasTypes_allow_double_conversion();
extern int MovementAuthority_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MovementAuthority_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MovementAuthority_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MovementAuthority_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MovementAuthority_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthoritySectionlist_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MovementAuthoritySectionlist_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySectionlist_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySectionlist_t_TrackAtlasTypes_allow_double_conversion();
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MovementAuthoritySectionlist_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MovementAuthoritySectionlist_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MovementAuthoritySectionlist_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MovementAuthoritySectionlist_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DP_or_OL_t_TrackAtlasTypes 
 ****************************************************************/
extern int DP_or_OL_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DP_or_OL_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DP_or_OL_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DP_or_OL_t_TrackAtlasTypes_allow_double_conversion();
extern int DP_or_OL_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DP_or_OL_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DP_or_OL_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DP_or_OL_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DP_or_OL_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Endtimer_t_TrackAtlasTypes 
 ****************************************************************/
extern int Endtimer_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Endtimer_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Endtimer_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Endtimer_t_TrackAtlasTypes_allow_double_conversion();
extern int Endtimer_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_Endtimer_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Endtimer_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Endtimer_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_Endtimer_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForSupervision_nextGen_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DataForSupervision_nextGen_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForSupervision_nextGen_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForSupervision_nextGen_t_TrackAtlasTypes_allow_double_conversion();
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DataForSupervision_nextGen_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DataForSupervision_nextGen_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DataForSupervision_nextGen_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DataForSupervision_nextGen_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_t_TrackAtlasTypes_allow_double_conversion();
extern int GradientProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Gradient_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int Gradient_section_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Gradient_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Gradient_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_t_TrackAtlasTypes_allow_double_conversion();
extern int Gradient_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_Gradient_section_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Gradient_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Gradient_section_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_Gradient_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** StaticSpeedProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_StaticSpeedProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedProfile_t_TrackAtlasTypes_allow_double_conversion();
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_StaticSpeedProfile_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_StaticSpeedProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_StaticSpeedProfile_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_StaticSpeedProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** StaticSpeedSection_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedSection_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_StaticSpeedSection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedSection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedSection_t_TrackAtlasTypes_allow_double_conversion();
extern int StaticSpeedSection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_StaticSpeedSection_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_StaticSpeedSection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_StaticSpeedSection_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_StaticSpeedSection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** FromTIU_t_TrackAtlasTypes 
 ****************************************************************/
extern int FromTIU_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_FromTIU_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_FromTIU_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_FromTIU_t_TrackAtlasTypes_allow_double_conversion();
extern int FromTIU_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_FromTIU_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_FromTIU_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_FromTIU_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_FromTIU_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForModeAndLevel_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DataForModeAndLevel_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForModeAndLevel_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForModeAndLevel_t_TrackAtlasTypes_allow_double_conversion();
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DataForModeAndLevel_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DataForModeAndLevel_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DataForModeAndLevel_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DataForModeAndLevel_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** M_SupervisionDisplay_INT_T_DATA 
 ****************************************************************/
extern int M_SupervisionDisplay_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SupervisionDisplay_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_INT_T_DATA_allow_double_conversion();
extern int M_SupervisionDisplay_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_M_SupervisionDisplay_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SupervisionDisplay_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SupervisionDisplay_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_INT_T_DATA_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_INT_T_DATA 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SUPERVISION_STATUS_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_INT_T_DATA_allow_double_conversion();
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_M_SUPERVISION_STATUS_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SUPERVISION_STATUS_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SUPERVISION_STATUS_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_INT_T_DATA_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_INT_T_DATA 
 ****************************************************************/
extern int connectionStatusRadioUnit_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_connectionStatusRadioUnit_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_INT_T_DATA_allow_double_conversion();
extern int connectionStatusRadioUnit_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_connectionStatusRadioUnit_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_connectionStatusRadioUnit_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_connectionStatusRadioUnit_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Dynamic_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Dynamic_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Dynamic_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_int_array_T_DATA_allow_double_conversion();
extern int DMI_Dynamic_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Dynamic_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Dynamic_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Dynamic_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Dynamic_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Available_Menu_INT_T_DATA 
 ****************************************************************/
extern int DMI_Available_Menu_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Available_Menu_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_INT_T_DATA_allow_double_conversion();
extern int DMI_Available_Menu_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Available_Menu_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Available_Menu_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Available_Menu_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Available_Menu_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Menu_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Menu_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Menu_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Menu_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Menu_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Menu_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Menu_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Menu_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_INT_T_DATA 
 ****************************************************************/
extern int DMI_List_Entry_Request_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_List_Entry_Request_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_INT_T_DATA_allow_double_conversion();
extern int DMI_List_Entry_Request_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_List_Entry_Request_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_List_Entry_Request_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_List_Entry_Request_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Entry_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Entry_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Entry_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Entry_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Entry_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Entry_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Entry_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Entry_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_train_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_id_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_INT_T_DATA_allow_double_conversion();
extern int DMI_train_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_id_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_id_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_train_length_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_length_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_length_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_INT_T_DATA_allow_double_conversion();
extern int DMI_train_length_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_length_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_length_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_length_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_length_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_brakeModel_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_brakeModel_id_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_brakeModel_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_INT_T_DATA_allow_double_conversion();
extern int DMI_brakeModel_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_brakeModel_id_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_brakeModel_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_brakeModel_id_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_vMax_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_vMax_id_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_vMax_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_INT_T_DATA_allow_double_conversion();
extern int DMI_vMax_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_vMax_id_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_vMax_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_vMax_id_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_vMax_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_airtightSystem_INT_T_DATA 
 ****************************************************************/
extern int DMI_airtightSystem_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_airtightSystem_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_INT_T_DATA_allow_double_conversion();
extern int DMI_airtightSystem_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_airtightSystem_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_airtightSystem_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_airtightSystem_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_airtightSystem_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_loadingGauge_INT_T_DATA 
 ****************************************************************/
extern int DMI_loadingGauge_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_loadingGauge_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_INT_T_DATA_allow_double_conversion();
extern int DMI_loadingGauge_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_loadingGauge_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_loadingGauge_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_loadingGauge_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_loadingGauge_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Coded_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Coded_Train_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Coded_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Coded_Train_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_TEXT_INT_Array_T_DATA 
 ****************************************************************/
extern int DMI_TEXT_INT_Array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TEXT_INT_Array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_INT_Array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_INT_Array_T_DATA_allow_double_conversion();
extern int DMI_TEXT_INT_Array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_TEXT_INT_Array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TEXT_INT_Array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TEXT_INT_Array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TEXT_INT_Array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_int_array_T_DATA_allow_double_conversion();
extern int DMI_Text_Message_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_speedProfile_int_array_T_DATA 
 ****************************************************************/
extern int DMI_speedProfile_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_speedProfile_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_int_array_T_DATA_allow_double_conversion();
extern int DMI_speedProfile_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_speedProfile_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_speedProfile_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_speedProfile_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_speedProfile_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Identifier_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_System_Version_int_array_T_DATA 
 ****************************************************************/
extern int DMI_System_Version_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_System_Version_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_int_array_T_DATA_allow_double_conversion();
extern int DMI_System_Version_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_System_Version_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_System_Version_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_System_Version_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_System_Version_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Display_Control_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Display_Control_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Display_Control_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_int_array_T_DATA_allow_double_conversion();
extern int DMI_Display_Control_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Display_Control_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Display_Control_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Display_Control_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Display_Control_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_LevelList_int_array_T_DATA 
 ****************************************************************/
extern int DMI_LevelList_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_LevelList_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_int_array_T_DATA_allow_double_conversion();
extern int DMI_LevelList_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_LevelList_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_LevelList_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_LevelList_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_LevelList_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Level_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Level_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Radio_Net_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Radio_Net_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Running_Number_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Running_Number_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_int_array_T_DATA_allow_double_conversion();
extern int DMI_Train_Running_Number_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Running_Number_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Running_Number_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Running_Number_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Adhesion_Factor_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Adhesion_Factor_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Adhesion_Factor_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Adhesion_Factor_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** Icon_control_flag_INT_T_DATA 
 ****************************************************************/
extern int Icon_control_flag_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_control_flag_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_INT_T_DATA_allow_double_conversion();
extern int Icon_control_flag_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_Icon_control_flag_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_control_flag_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_control_flag_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_control_flag_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_m_icon_flashing_freq_INT_T_DATA 
 ****************************************************************/
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_m_icon_flashing_freq_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_m_icon_flashing_freq_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_m_icon_flashing_freq_INT_T_DATA_allow_double_conversion();
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_m_icon_flashing_freq_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_m_icon_flashing_freq_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_m_icon_flashing_freq_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_m_icon_flashing_freq_INT_T_DATA_Utils;

/****************************************************************
 ** Icon_group_INT_T_DATA 
 ****************************************************************/
extern int Icon_group_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_INT_T_DATA_allow_double_conversion();
extern int Icon_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_Icon_group_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_group_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_group_INT_T_DATA_Utils;

/****************************************************************
 ** Area_group_INT_T_DATA 
 ****************************************************************/
extern int Area_group_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Area_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Area_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Area_group_INT_T_DATA_allow_double_conversion();
extern int Area_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_Area_group_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Area_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Area_group_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_Area_group_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Icons_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icons_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icons_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_int_array_T_DATA_allow_double_conversion();
extern int DMI_Icons_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icons_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icons_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icons_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icons_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Identifier_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_int_array_T_DATA_allow_double_conversion();
extern int DMI_Driver_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Identifier_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Identifier_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DriverIdentifier_INT_T_DATA 
 ****************************************************************/
extern int DriverIdentifier_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DriverIdentifier_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DriverIdentifier_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DriverIdentifier_INT_T_DATA_allow_double_conversion();
extern int DriverIdentifier_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DriverIdentifier_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DriverIdentifier_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DriverIdentifier_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DriverIdentifier_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Status_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Status_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Status_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Status_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_int_array_T_DATA_allow_double_conversion();
extern int DMI_Status_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Status_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Status_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Status_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Status_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_int_array_T_DATA_allow_double_conversion();
extern int DMI_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Driver_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Radio_Net_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Radio_Net_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_int_array_T_DATA_allow_double_conversion();
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_Ack_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_Ack_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_int_array_T_DATA_allow_double_conversion();
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_Ack_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_Ack_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Icon_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icon_Ack_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icon_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_int_array_T_DATA_allow_double_conversion();
extern int DMI_Icon_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icon_Ack_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icon_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icon_Ack_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Level_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Level_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** radioManagementMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int radioManagementMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_radioManagementMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_radioManagementMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_radioManagementMessage_T_Common_Types_Pkg_allow_double_conversion();
extern int radioManagementMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_radioManagementMessage_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_radioManagementMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_radioManagementMessage_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_radioManagementMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MsgSource_T_Common_Types_Pkg 
 ****************************************************************/
extern int MsgSource_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MsgSource_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MsgSource_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MsgSource_T_Common_Types_Pkg_allow_double_conversion();
extern int MsgSource_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MsgSource_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MsgSource_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MsgSource_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MsgSource_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** RBC_Id_T_Common_Types_Pkg 
 ****************************************************************/
extern int RBC_Id_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RBC_Id_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Id_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Id_T_Common_Types_Pkg_allow_double_conversion();
extern int RBC_Id_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RBC_Id_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RBC_Id_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RBC_Id_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RBC_Id_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPackets_T_Common_Types_Pkg_allow_double_conversion();
extern int CompressedPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_CompressedPackets_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedPackets_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** Metadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int Metadata_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Metadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Metadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Metadata_T_Common_Types_Pkg_allow_double_conversion();
extern int Metadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Metadata_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Metadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Metadata_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Metadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MetadataElement_T_Common_Types_Pkg 
 ****************************************************************/
extern int MetadataElement_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MetadataElement_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MetadataElement_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MetadataElement_T_Common_Types_Pkg_allow_double_conversion();
extern int MetadataElement_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MetadataElement_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MetadataElement_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MetadataElement_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MetadataElement_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedPacketData_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPacketData_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedPacketData_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPacketData_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPacketData_T_Common_Types_Pkg_allow_double_conversion();
extern int CompressedPacketData_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_CompressedPacketData_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedPacketData_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedPacketData_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedPacketData_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** TrackSide_ForCheck_T_Common_Types_Pkg 
 ****************************************************************/
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrackSide_ForCheck_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrackSide_ForCheck_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrackSide_ForCheck_T_Common_Types_Pkg_allow_double_conversion();
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TrackSide_ForCheck_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrackSide_ForCheck_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrackSide_ForCheck_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TrackSide_ForCheck_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** RadioMetadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int RadioMetadata_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioMetadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMetadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMetadata_T_Common_Types_Pkg_allow_double_conversion();
extern int RadioMetadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RadioMetadata_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioMetadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioMetadata_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RadioMetadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** ReceivedMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int ReceivedMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ReceivedMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_ReceivedMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReceivedMessage_T_Common_Types_Pkg_allow_double_conversion();
extern int ReceivedMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ReceivedMessage_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ReceivedMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ReceivedMessage_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ReceivedMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** filterRelatedEvents_T_Common_Types_Pkg 
 ****************************************************************/
extern int filterRelatedEvents_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_filterRelatedEvents_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_filterRelatedEvents_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_filterRelatedEvents_T_Common_Types_Pkg_allow_double_conversion();
extern int filterRelatedEvents_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_filterRelatedEvents_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_filterRelatedEvents_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_filterRelatedEvents_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_filterRelatedEvents_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MSG_Errors_T_Common_Types_Pkg 
 ****************************************************************/
extern int MSG_Errors_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MSG_Errors_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MSG_Errors_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MSG_Errors_T_Common_Types_Pkg_allow_double_conversion();
extern int MSG_Errors_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MSG_Errors_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MSG_Errors_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MSG_Errors_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MSG_Errors_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** outPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int outPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_outPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_outPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_outPackets_T_Common_Types_Pkg_allow_double_conversion();
extern int outPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_outPackets_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_outPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_outPackets_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_outPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrackTrain_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_Radio_Types_Pkg_allow_double_conversion();
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrackTrain_Header_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrackTrain_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrackTrain_Header_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** RadioMessage_T_Radio_Types_Pkg 
 ****************************************************************/
extern int RadioMessage_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioMessage_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMessage_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMessage_T_Radio_Types_Pkg_allow_double_conversion();
extern int RadioMessage_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RadioMessage_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioMessage_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioMessage_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RadioMessage_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_Radio_Types_Pkg_allow_double_conversion();
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Header_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Header_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Message_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_Radio_Types_Pkg_allow_double_conversion();
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Message_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Message_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Message_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** P42_SessionManagement_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P42_SessionManagement_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P42_SessionManagement_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P42_SessionManagement_T_Packet_Types_Pkg_allow_double_conversion();
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P42_SessionManagement_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P42_SessionManagement_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P42_SessionManagement_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P42_SessionManagement_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P45_RadioNetworkRegistration_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_allow_double_conversion();
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P3_NationalValues_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P3_NationalValues_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P3_NationalValues_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P3_NationalValues_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P3_NationalValues_T_Packet_Types_Pkg_allow_double_conversion();
extern int P3_NationalValues_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P3_NationalValues_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P3_NationalValues_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P3_NationalValues_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P3_NationalValues_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nidCArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidCArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nidCArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidCArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidCArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nidCArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nidCArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nidCArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nidCArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nidCArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nidC_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidC_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nidC_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidC_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidC_T_Packet_Types_Pkg_allow_double_conversion();
extern int nidC_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nidC_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nidC_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nidC_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nidC_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintsetArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvintsetArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintsetArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintsetArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvintsetArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvintsetArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvintsetArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvintsetArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintset_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintset_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvintset_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintset_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintset_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvintset_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvintset_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvintset_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvintset_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvintset_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvintArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvintArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvint_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvint_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvint_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvint_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkrintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkrintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrintArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkrintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkrintArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkrintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkrintArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkrintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkrint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrint_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkrint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrint_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkrint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkrint_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkrint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkrint_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkrint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransistionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P41_LevelTransistionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransistionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransistionOrders_T_Packet_Types_Pkg_allow_double_conversion();
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P41_LevelTransistionOrders_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P41_LevelTransistionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P41_LevelTransistionOrders_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P41_LevelTransistionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P41_LevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransitionOrder_T_Packet_Types_Pkg_allow_double_conversion();
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P41_LevelTransitionOrder_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P41_LevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P41_LevelTransitionOrder_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P41_LevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_allow_double_conversion();
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_allow_double_conversion();
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_allow_double_conversion();
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** DiffArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int DiffArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiffArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DiffArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiffArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int DiffArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiffArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiffArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiffArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiffArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** Diff_T_Packet_Types_Pkg 
 ****************************************************************/
extern int Diff_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Diff_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Diff_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Diff_T_Packet_Types_Pkg_allow_double_conversion();
extern int Diff_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Diff_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Diff_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Diff_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Diff_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** SSPArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSPArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSPArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSPArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSPArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int SSPArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SSPArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSPArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSPArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SSPArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** SSP_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSP_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSP_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSP_T_Packet_Types_Pkg_allow_double_conversion();
extern int SSP_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SSP_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P80_ModeProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfiles_T_Packet_Types_Pkg_allow_double_conversion();
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P80_ModeProfiles_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P80_ModeProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P80_ModeProfiles_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P80_ModeProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P80_ModeProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfile_T_Packet_Types_Pkg_allow_double_conversion();
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P80_ModeProfile_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P80_ModeProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P80_ModeProfile_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P80_ModeProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_allow_double_conversion();
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P12_Level1MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_allow_double_conversion();
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P12_Level1MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P12_Level1MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P12_Level1MovementAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P12_Level1MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P12_Level1MovementAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P137_StopIfInStaffResponsible_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_allow_double_conversion();
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P138_ReversingAreaInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P138_ReversingAreaInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P138_ReversingAreaInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P138_ReversingAreaInformation_T_Packet_Types_Pkg_allow_double_conversion();
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P138_ReversingAreaInformation_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P138_ReversingAreaInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P138_ReversingAreaInformation_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P138_ReversingAreaInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P139_ReversingSupervisionInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_allow_double_conversion();
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_allow_double_conversion();
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P15_Level23MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P15_Level23MovementAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P15_Level23MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P15_Level23MovementAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P21_GradientProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P21_GradientProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfiles_T_Packet_Types_Pkg_allow_double_conversion();
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P21_GradientProfiles_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P21_GradientProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P21_GradientProfiles_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P21_GradientProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P21_GradientProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P21_GradientProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfile_T_Packet_Types_Pkg_allow_double_conversion();
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P21_GradientProfile_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P21_GradientProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P21_GradientProfile_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P21_GradientProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_BaliseInSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P58_PositionReportParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P58_PositionReportParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P58_PositionReportParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P58_PositionReportParameters_T_Packet_Types_Pkg_allow_double_conversion();
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P58_PositionReportParameters_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P58_PositionReportParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P58_PositionReportParameters_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P58_PositionReportParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58List_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58List_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_IterPacket58List_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58List_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58List_T_Packet_Types_Pkg_allow_double_conversion();
extern int IterPacket58List_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_IterPacket58List_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_IterPacket58List_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_IterPacket58List_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_IterPacket58List_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_IterPacket58_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58_T_Packet_Types_Pkg_allow_double_conversion();
extern int IterPacket58_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_IterPacket58_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_IterPacket58_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_IterPacket58_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_IterPacket58_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_allow_double_conversion();
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P131_RBCTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P131_RBCTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P131_RBCTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P131_RBCTransitionOrder_T_Packet_Types_Pkg_allow_double_conversion();
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P131_RBCTransitionOrder_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P131_RBCTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P131_RBCTransitionOrder_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P131_RBCTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** TSM_revokeCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TSM_revokeCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_revokeCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_revokeCond_T_SDM_Commands_Pkg_allow_double_conversion();
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TSM_revokeCond_T_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TSM_revokeCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TSM_revokeCond_T_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TSM_revokeCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** TSM_triggerCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TSM_triggerCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_triggerCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_triggerCond_T_SDM_Commands_Pkg_allow_double_conversion();
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TSM_triggerCond_T_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TSM_triggerCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TSM_triggerCond_T_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TSM_triggerCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** MyArray_SDM_Commands_Pkg 
 ****************************************************************/
extern int MyArray_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MyArray_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_MyArray_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MyArray_SDM_Commands_Pkg_allow_double_conversion();
extern int MyArray_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MyArray_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MyArray_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MyArray_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MyArray_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** EB_command_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int EB_command_T_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EB_command_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_EB_command_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EB_command_T_SDM_Commands_Pkg_allow_double_conversion();
extern int EB_command_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_EB_command_T_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EB_command_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EB_command_T_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_EB_command_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** SupervisionStatus_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SupervisionStatus_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SupervisionStatus_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SupervisionStatus_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SupervisionStatus_T_SDM_Types_Pkg_allow_double_conversion();
extern int SupervisionStatus_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SupervisionStatus_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SupervisionStatus_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SupervisionStatus_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SupervisionStatus_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Types_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Types_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SDM_Types_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Types_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Types_T_SDM_Types_Pkg_allow_double_conversion();
extern int SDM_Types_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SDM_Types_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SDM_Types_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SDM_Types_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SDM_Types_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** Speeds_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Speeds_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Speeds_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Speeds_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speeds_T_SDM_Types_Pkg_allow_double_conversion();
extern int Speeds_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Speeds_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Speeds_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Speeds_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Speeds_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Locations_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Locations_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SDM_Locations_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Locations_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Locations_T_SDM_Types_Pkg_allow_double_conversion();
extern int SDM_Locations_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SDM_Locations_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SDM_Locations_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SDM_Locations_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SDM_Locations_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** trainData_internal_t_SDM_Types_Pkg 
 ****************************************************************/
extern int trainData_internal_t_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_internal_t_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_internal_t_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_internal_t_SDM_Types_Pkg_allow_double_conversion();
extern int trainData_internal_t_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_internal_t_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_internal_t_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_internal_t_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_internal_t_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Commands_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Commands_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SDM_Commands_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Commands_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Commands_T_SDM_Types_Pkg_allow_double_conversion();
extern int SDM_Commands_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SDM_Commands_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SDM_Commands_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SDM_Commands_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SDM_Commands_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** L_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int L_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int L_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_L_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_L_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** V_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int V_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int V_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_V_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_V_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** TrainLocations_real_T_SDM_Types_Pkg 
 ****************************************************************/
extern int TrainLocations_real_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainLocations_real_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainLocations_real_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainLocations_real_T_SDM_Types_Pkg_allow_double_conversion();
extern int TrainLocations_real_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TrainLocations_real_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainLocations_real_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainLocations_real_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TrainLocations_real_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** A_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int A_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int A_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_A_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_A_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** T_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int T_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int T_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** Percentage_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Percentage_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Percentage_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Percentage_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Percentage_T_SDM_Types_Pkg_allow_double_conversion();
extern int Percentage_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Percentage_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Percentage_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Percentage_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Percentage_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** TargetType_T_TargetManagement_types 
 ****************************************************************/
extern int TargetType_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TargetType_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetType_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetType_T_TargetManagement_types_allow_double_conversion();
extern int TargetType_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_TargetType_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TargetType_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TargetType_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_TargetType_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_T_TargetManagement_types 
 ****************************************************************/
extern int Target_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Target_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_T_TargetManagement_types_allow_double_conversion();
extern int Target_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_Target_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Target_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Target_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_Target_T_TargetManagement_types_Utils;

/****************************************************************
 ** TargetCollection_T_TargetManagement_types 
 ****************************************************************/
extern int TargetCollection_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TargetCollection_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetCollection_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetCollection_T_TargetManagement_types_allow_double_conversion();
extern int TargetCollection_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_TargetCollection_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TargetCollection_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TargetCollection_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_TargetCollection_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_list_MRSP_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_list_MRSP_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Target_list_MRSP_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_list_MRSP_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_list_MRSP_real_T_TargetManagement_types_allow_double_conversion();
extern int Target_list_MRSP_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_Target_list_MRSP_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Target_list_MRSP_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Target_list_MRSP_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_Target_list_MRSP_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Target_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_real_T_TargetManagement_types_allow_double_conversion();
extern int Target_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_Target_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Target_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Target_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_Target_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_internal_section_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_section_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_internal_section_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_section_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_section_T_TargetManagement_types_allow_double_conversion();
extern int MRSP_internal_section_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_MRSP_internal_section_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_internal_section_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_internal_section_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_internal_section_T_TargetManagement_types_Utils;

/****************************************************************
 ** EOA_real_T_TargetManagement_types 
 ****************************************************************/
extern int EOA_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EOA_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_EOA_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_EOA_real_T_TargetManagement_types_allow_double_conversion();
extern int EOA_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_EOA_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EOA_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EOA_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_EOA_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MA_section_real_T_TargetManagement_types 
 ****************************************************************/
extern int MA_section_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MA_section_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MA_section_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MA_section_real_T_TargetManagement_types_allow_double_conversion();
extern int MA_section_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_MA_section_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MA_section_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MA_section_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_MA_section_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_internal_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_internal_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_T_TargetManagement_types_allow_double_conversion();
extern int MRSP_internal_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_MRSP_internal_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_internal_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_internal_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_internal_T_TargetManagement_types_Utils;

/****************************************************************
 ** Gradient_section_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Gradient_section_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_section_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_real_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_Gradient_section_real_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Gradient_section_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Gradient_section_real_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_Gradient_section_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** Gradient_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Gradient_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_real_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_Gradient_real_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Gradient_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Gradient_real_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_Gradient_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_real_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_real_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_real_compensated_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_gradient_element_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_gradient_element_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_element_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_element_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_A_gradient_element_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_gradient_element_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_gradient_element_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_A_gradient_element_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_gradient_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_gradient_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int A_gradient_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_A_gradient_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_gradient_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_gradient_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_A_gradient_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** BCAccumulator_type_CalcBrakingCurves_Pkg 
 ****************************************************************/
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BCAccumulator_type_CalcBrakingCurves_Pkg_string(const char *str, char **endptr);
extern int string_to_BCAccumulator_type_CalcBrakingCurves_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCAccumulator_type_CalcBrakingCurves_Pkg_allow_double_conversion();
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BCAccumulator_type_CalcBrakingCurves_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BCAccumulator_type_CalcBrakingCurves_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BCAccumulator_type_CalcBrakingCurves_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BCAccumulator_type_CalcBrakingCurves_Pkg_Utils;

/****************************************************************
 ** ASafe_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafe_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafe_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafe_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafe_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafe_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafe_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeDistanceDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafeDistanceDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeDistanceDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeDistanceDefinition_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafeDistanceDefinition_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafeDistanceDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafeDistanceDefinition_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafeDistanceDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeSpeedDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafeSpeedDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeSpeedDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeSpeedDefinition_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafeSpeedDefinition_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafeSpeedDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafeSpeedDefinition_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafeSpeedDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafe_Data_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_Data_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafe_Data_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_Data_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_Data_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafe_Data_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafe_Data_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafe_Data_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafe_Data_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafe_Data_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeRow_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeRow_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafeRow_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeRow_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeRow_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafeRow_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafeRow_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafeRow_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafeRow_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafeRow_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaArc_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaArc_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaArc_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaArc_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaArc_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaArc_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaArc_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaArc_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaArc_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaArc_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurve_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurve_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurve_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurve_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurve_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveDistances_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveDistances_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveDistances_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveDistances_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveDistances_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveDistances_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveDistances_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveDistances_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveSpeeds_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveAccelerations_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveValid_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveValid_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveValid_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveValid_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveValid_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveValid_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveValid_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveValid_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** CurveCollection_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int CurveCollection_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CurveCollection_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_CurveCollection_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_CurveCollection_T_CalcBrakingCurves_types_allow_double_conversion();
extern int CurveCollection_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_CurveCollection_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CurveCollection_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CurveCollection_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_CurveCollection_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** extractTargetsMRSPACC_TargetManagement_pkg 
 ****************************************************************/
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_extractTargetsMRSPACC_TargetManagement_pkg_string(const char *str, char **endptr);
extern int string_to_extractTargetsMRSPACC_TargetManagement_pkg(const char *str, void *pValue, char **endptr);
extern int is_extractTargetsMRSPACC_TargetManagement_pkg_allow_double_conversion();
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_double(const void *pValue, double *nValue);
extern int get_extractTargetsMRSPACC_TargetManagement_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_extractTargetsMRSPACC_TargetManagement_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_extractTargetsMRSPACC_TargetManagement_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_extractTargetsMRSPACC_TargetManagement_pkg_Utils;

/****************************************************************
 ** T_trac_t_TargetLimits_Pkg 
 ****************************************************************/
extern int T_trac_t_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_trac_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_T_trac_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_trac_t_TargetLimits_Pkg_allow_double_conversion();
extern int T_trac_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_trac_t_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_trac_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_trac_t_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_trac_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** bec_t_TargetLimits_Pkg 
 ****************************************************************/
extern int bec_t_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_bec_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_bec_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_bec_t_TargetLimits_Pkg_allow_double_conversion();
extern int bec_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_bec_t_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_bec_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_bec_t_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_bec_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** TargetIteratorAkku_TargetLimits_Pkg 
 ****************************************************************/
extern int TargetIteratorAkku_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TargetIteratorAkku_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TargetIteratorAkku_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TargetIteratorAkku_TargetLimits_Pkg_allow_double_conversion();
extern int TargetIteratorAkku_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TargetIteratorAkku_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TargetIteratorAkku_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TargetIteratorAkku_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TargetIteratorAkku_TargetLimits_Pkg_Utils;

/****************************************************************
 ** TractionDeltaTriple_TargetLimits_Pkg 
 ****************************************************************/
extern int TractionDeltaTriple_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TractionDeltaTriple_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TractionDeltaTriple_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TractionDeltaTriple_TargetLimits_Pkg_allow_double_conversion();
extern int TractionDeltaTriple_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TractionDeltaTriple_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TractionDeltaTriple_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TractionDeltaTriple_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TractionDeltaTriple_TargetLimits_Pkg_Utils;

/****************************************************************
 ** t_Brake_t_SDMModelPkg 
 ****************************************************************/
extern int t_Brake_t_SDMModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_t_Brake_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_Brake_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_Brake_t_SDMModelPkg_allow_double_conversion();
extern int t_Brake_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int get_t_Brake_t_SDMModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_t_Brake_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_t_Brake_t_SDMModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_t_Brake_t_SDMModelPkg_Utils;

/****************************************************************
 ** t_BrakeVt_t_SDMModelPkg 
 ****************************************************************/
extern int t_BrakeVt_t_SDMModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_t_BrakeVt_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_BrakeVt_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_BrakeVt_t_SDMModelPkg_allow_double_conversion();
extern int t_BrakeVt_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int get_t_BrakeVt_t_SDMModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_t_BrakeVt_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_t_BrakeVt_t_SDMModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_t_BrakeVt_t_SDMModelPkg_Utils;

/****************************************************************
 ** coeff_BrakeBasic_t_SDMConversionModelPkg 
 ****************************************************************/
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_coeff_BrakeBasic_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_coeff_BrakeBasic_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_coeff_BrakeBasic_t_SDMConversionModelPkg_allow_double_conversion();
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_coeff_BrakeBasic_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_coeff_BrakeBasic_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_coeff_BrakeBasic_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_coeff_BrakeBasic_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** LKrIntLookUp_t_SDMConversionModelPkg 
 ****************************************************************/
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LKrIntLookUp_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_LKrIntLookUp_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_LKrIntLookUp_t_SDMConversionModelPkg_allow_double_conversion();
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_LKrIntLookUp_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LKrIntLookUp_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LKrIntLookUp_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_LKrIntLookUp_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** mv_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int mv_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mv_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_mv_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_mv_Map_t_SDMConversionModelPkg_allow_double_conversion();
extern int mv_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_mv_Map_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mv_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mv_Map_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_mv_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** m_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int m_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_m_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_m_KvSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int m_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_m_KvSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m_KvSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_m_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** v_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_v_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_KvSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int v_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_v_KvSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_v_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_v_KvSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_v_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** av_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_av_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_Map_t_SDMConversionModelPkg_allow_double_conversion();
extern int av_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_av_Map_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_av_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_av_Map_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_av_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_a_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_BrakeSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_a_BrakeSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_a_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_a_BrakeSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_a_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** v_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_v_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_BrakeSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_v_BrakeSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_v_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_v_BrakeSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_v_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** av_MergedMap_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_MergedMap_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_av_MergedMap_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_MergedMap_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_MergedMap_t_SDMConversionModelPkg_allow_double_conversion();
extern int av_MergedMap_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_av_MergedMap_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_av_MergedMap_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_av_MergedMap_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_av_MergedMap_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_a_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_MergedSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int a_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_a_MergedSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_a_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_a_MergedSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_a_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** v_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_v_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_MergedSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int v_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_v_MergedSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_v_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_v_MergedSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_v_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_Brake_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_Brake_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_a_Brake_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_Brake_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_Brake_t_SDMConversionModelPkg_allow_double_conversion();
extern int a_Brake_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_a_Brake_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_a_Brake_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_a_Brake_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_a_Brake_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** ACC_SDM_GradientAcceleration_Pkg 
 ****************************************************************/
extern int ACC_SDM_GradientAcceleration_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ACC_SDM_GradientAcceleration_Pkg_string(const char *str, char **endptr);
extern int string_to_ACC_SDM_GradientAcceleration_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ACC_SDM_GradientAcceleration_Pkg_allow_double_conversion();
extern int ACC_SDM_GradientAcceleration_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ACC_SDM_GradientAcceleration_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ACC_SDM_GradientAcceleration_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ACC_SDM_GradientAcceleration_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ACC_SDM_GradientAcceleration_Pkg_Utils;

/****************************************************************
 ** EVC_to_GUI_EnvSim 
 ****************************************************************/
extern int EVC_to_GUI_EnvSim_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EVC_to_GUI_EnvSim_string(const char *str, char **endptr);
extern int string_to_EVC_to_GUI_EnvSim(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_GUI_EnvSim_allow_double_conversion();
extern int EVC_to_GUI_EnvSim_to_double(const void *pValue, double *nValue);
extern int get_EVC_to_GUI_EnvSim_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EVC_to_GUI_EnvSim(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EVC_to_GUI_EnvSim_default_value(void *pValue);
extern SimTypeUtils _Type_EVC_to_GUI_EnvSim_Utils;

/****************************************************************
 ** GUI_to_EVC_EnvSim 
 ****************************************************************/
extern int GUI_to_EVC_EnvSim_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GUI_to_EVC_EnvSim_string(const char *str, char **endptr);
extern int string_to_GUI_to_EVC_EnvSim(const char *str, void *pValue, char **endptr);
extern int is_GUI_to_EVC_EnvSim_allow_double_conversion();
extern int GUI_to_EVC_EnvSim_to_double(const void *pValue, double *nValue);
extern int get_GUI_to_EVC_EnvSim_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GUI_to_EVC_EnvSim(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GUI_to_EVC_EnvSim_default_value(void *pValue);
extern SimTypeUtils _Type_GUI_to_EVC_EnvSim_Utils;

/****************************************************************
 ** Driver2MAR_T_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_MA_Request_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Driver2MAR_T_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_MA_Request_allow_double_conversion();
extern int Driver2MAR_T_MA_Request_to_double(const void *pValue, double *nValue);
extern int get_Driver2MAR_T_MA_Request_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Driver2MAR_T_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Driver2MAR_T_MA_Request_default_value(void *pValue);
extern SimTypeUtils _Type_Driver2MAR_T_MA_Request_Utils;

/****************************************************************
 ** BGCollector_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BGCollector_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_BGCollector_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BGCollector_T_Receive_TrackSide_Msg_Pkg_allow_double_conversion();
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BGCollector_T_Receive_TrackSide_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BGCollector_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BGCollector_T_Receive_TrackSide_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BGCollector_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** TelegramStore_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TelegramStore_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramStore_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramStore_T_Receive_TrackSide_Msg_Pkg_allow_double_conversion();
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TelegramStore_T_Receive_TrackSide_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TelegramStore_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TelegramStore_T_Receive_TrackSide_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TelegramStore_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** API_TrackSideInput_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TrackSideInput_T_API_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_API_TrackSideInput_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TrackSideInput_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TrackSideInput_T_API_Msg_Pkg_allow_double_conversion();
extern int API_TrackSideInput_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_API_TrackSideInput_T_API_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_API_TrackSideInput_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_API_TrackSideInput_T_API_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_API_TrackSideInput_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_TelegramHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TelegramHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_API_TelegramHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TelegramHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TelegramHeader_T_API_Msg_Pkg_allow_double_conversion();
extern int API_TelegramHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_API_TelegramHeader_T_API_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_API_TelegramHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_API_TelegramHeader_T_API_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_API_TelegramHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_RadioMsgHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_API_RadioMsgHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_RadioMsgHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_RadioMsgHeader_T_API_Msg_Pkg_allow_double_conversion();
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_API_RadioMsgHeader_T_API_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_API_RadioMsgHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_API_RadioMsgHeader_T_API_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_API_RadioMsgHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** Array06_TM 
 ****************************************************************/
extern int Array06_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array06_TM_string(const char *str, char **endptr);
extern int string_to_Array06_TM(const char *str, void *pValue, char **endptr);
extern int is_Array06_TM_allow_double_conversion();
extern int Array06_TM_to_double(const void *pValue, double *nValue);
extern int get_Array06_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array06_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array06_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array06_TM_Utils;

/****************************************************************
 ** P015_section_enum_T_TM 
 ****************************************************************/
extern int P015_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_enum_T_TM_allow_double_conversion();
extern int P015_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_section_enum_T_TM_Utils;

/****************************************************************
 ** P015_sections_array_flat_T_TM 
 ****************************************************************/
extern int P015_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_sections_array_flat_T_TM_allow_double_conversion();
extern int P015_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P015_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** Array15_TM 
 ****************************************************************/
extern int Array15_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array15_TM_string(const char *str, char **endptr);
extern int string_to_Array15_TM(const char *str, void *pValue, char **endptr);
extern int is_Array15_TM_allow_double_conversion();
extern int Array15_TM_to_double(const void *pValue, double *nValue);
extern int get_Array15_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array15_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array15_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array15_TM_Utils;

/****************************************************************
 ** P015_OBU_T_TM 
 ****************************************************************/
extern int P015_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_T_TM_allow_double_conversion();
extern int P015_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_T_TM_Utils;

/****************************************************************
 ** P046_section_enum_T_TM 
 ****************************************************************/
extern int P046_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_enum_T_TM_allow_double_conversion();
extern int P046_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_section_enum_T_TM_Utils;

/****************************************************************
 ** P046_sections_array_flat_T_TM 
 ****************************************************************/
extern int P046_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_sections_array_flat_T_TM_allow_double_conversion();
extern int P046_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P046_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P046_OBU_T_TM 
 ****************************************************************/
extern int P046_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_T_TM_allow_double_conversion();
extern int P046_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_OBU_T_TM_Utils;

/****************************************************************
 ** Array04_TM 
 ****************************************************************/
extern int Array04_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array04_TM_string(const char *str, char **endptr);
extern int string_to_Array04_TM(const char *str, void *pValue, char **endptr);
extern int is_Array04_TM_allow_double_conversion();
extern int Array04_TM_to_double(const void *pValue, double *nValue);
extern int get_Array04_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array04_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array04_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array04_TM_Utils;

/****************************************************************
 ** P041_section_enum_T_TM 
 ****************************************************************/
extern int P041_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_enum_T_TM_allow_double_conversion();
extern int P041_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_section_enum_T_TM_Utils;

/****************************************************************
 ** P041_sections_array_flat_T_TM 
 ****************************************************************/
extern int P041_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_sections_array_flat_T_TM_allow_double_conversion();
extern int P041_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P041_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P041_OBU_T_TM 
 ****************************************************************/
extern int P041_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_T_TM_allow_double_conversion();
extern int P041_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_OBU_T_TM_Utils;

/****************************************************************
 ** P021_section_enum_T_TM 
 ****************************************************************/
extern int P021_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_enum_T_TM_allow_double_conversion();
extern int P021_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_section_enum_T_TM_Utils;

/****************************************************************
 ** P021_sections_array_flat_T_TM 
 ****************************************************************/
extern int P021_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_sections_array_flat_T_TM_allow_double_conversion();
extern int P021_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P021_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P021_OBU_T_TM 
 ****************************************************************/
extern int P021_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_T_TM_allow_double_conversion();
extern int P021_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_T_TM_Utils;

/****************************************************************
 ** Array05_TM 
 ****************************************************************/
extern int Array05_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array05_TM_string(const char *str, char **endptr);
extern int string_to_Array05_TM(const char *str, void *pValue, char **endptr);
extern int is_Array05_TM_allow_double_conversion();
extern int Array05_TM_to_double(const void *pValue, double *nValue);
extern int get_Array05_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array05_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array05_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array05_TM_Utils;

/****************************************************************
 ** Array03_TM 
 ****************************************************************/
extern int Array03_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array03_TM_string(const char *str, char **endptr);
extern int string_to_Array03_TM(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_allow_double_conversion();
extern int Array03_TM_to_double(const void *pValue, double *nValue);
extern int get_Array03_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array03_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array03_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array03_TM_Utils;

/****************************************************************
 ** Array07_TM 
 ****************************************************************/
extern int Array07_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array07_TM_string(const char *str, char **endptr);
extern int string_to_Array07_TM(const char *str, void *pValue, char **endptr);
extern int is_Array07_TM_allow_double_conversion();
extern int Array07_TM_to_double(const void *pValue, double *nValue);
extern int get_Array07_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array07_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array07_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array07_TM_Utils;

/****************************************************************
 ** P012_section_enum_T_TM 
 ****************************************************************/
extern int P012_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P012_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_section_enum_T_TM_allow_double_conversion();
extern int P012_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P012_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P012_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P012_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P012_section_enum_T_TM_Utils;

/****************************************************************
 ** P012_sections_array_flat_T_TM 
 ****************************************************************/
extern int P012_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P012_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_sections_array_flat_T_TM_allow_double_conversion();
extern int P012_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P012_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P012_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P012_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P012_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P012_OBU_T_TM 
 ****************************************************************/
extern int P012_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P012_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_OBU_T_TM_allow_double_conversion();
extern int P012_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P012_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P012_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P012_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P012_OBU_T_TM_Utils;

/****************************************************************
 ** P139_OBU_T_TM 
 ****************************************************************/
extern int P139_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P139_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P139_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P139_OBU_T_TM_allow_double_conversion();
extern int P139_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P139_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P139_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P139_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P139_OBU_T_TM_Utils;

/****************************************************************
 ** P135_OBU_T_TM 
 ****************************************************************/
extern int P135_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P135_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P135_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P135_OBU_T_TM_allow_double_conversion();
extern int P135_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P135_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P135_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P135_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P135_OBU_T_TM_Utils;

/****************************************************************
 ** P138_OBU_T_TM 
 ****************************************************************/
extern int P138_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P138_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P138_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P138_OBU_T_TM_allow_double_conversion();
extern int P138_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P138_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P138_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P138_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P138_OBU_T_TM_Utils;

/****************************************************************
 ** P058_section_enum_T_TM 
 ****************************************************************/
extern int P058_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_enum_T_TM_allow_double_conversion();
extern int P058_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_section_enum_T_TM_Utils;

/****************************************************************
 ** P058_sections_array_flat_T_TM 
 ****************************************************************/
extern int P058_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_sections_array_flat_T_TM_allow_double_conversion();
extern int P058_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P058_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P058_OBU_T_TM 
 ****************************************************************/
extern int P058_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_T_TM_allow_double_conversion();
extern int P058_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_T_TM_Utils;

/****************************************************************
 ** Array08_TM 
 ****************************************************************/
extern int Array08_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array08_TM_string(const char *str, char **endptr);
extern int string_to_Array08_TM(const char *str, void *pValue, char **endptr);
extern int is_Array08_TM_allow_double_conversion();
extern int Array08_TM_to_double(const void *pValue, double *nValue);
extern int get_Array08_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array08_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array08_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array08_TM_Utils;

/****************************************************************
 ** Array24_TM 
 ****************************************************************/
extern int Array24_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array24_TM_string(const char *str, char **endptr);
extern int string_to_Array24_TM(const char *str, void *pValue, char **endptr);
extern int is_Array24_TM_allow_double_conversion();
extern int Array24_TM_to_double(const void *pValue, double *nValue);
extern int get_Array24_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array24_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array24_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array24_TM_Utils;

/****************************************************************
 ** P003_OBU_T_TM 
 ****************************************************************/
extern int P003_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_T_TM_allow_double_conversion();
extern int P003_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_nid_c_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_nid_c_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_nid_c_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_nid_c_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_nid_c_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_nid_c_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_nid_c_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_nid_c_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_nid_c_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_n_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_n_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_n_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_n_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_n_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_n_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_n_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_n_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_n_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_n_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_n_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_n_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_m_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_m_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_m_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_m_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_m_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_m_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_m_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_m_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_m_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_m_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_m_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_m_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_m_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_l_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_l_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_l_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_l_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_l_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_l_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_l_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_l_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_l_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_l_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_l_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_l_section_enum_T_TM_Utils;

/****************************************************************
 ** P005_section_enum_T_TM 
 ****************************************************************/
extern int P005_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_enum_T_TM_allow_double_conversion();
extern int P005_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_section_enum_T_TM_Utils;

/****************************************************************
 ** P005_sections_array_flat_T_TM 
 ****************************************************************/
extern int P005_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_sections_array_flat_T_TM_allow_double_conversion();
extern int P005_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P005_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P005_OBU_T_TM 
 ****************************************************************/
extern int P005_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_T_TM_allow_double_conversion();
extern int P005_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_T_TM_Utils;

/****************************************************************
 ** P131_OBU_T_TM 
 ****************************************************************/
extern int P131_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P131_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P131_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P131_OBU_T_TM_allow_double_conversion();
extern int P131_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P131_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P131_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P131_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P131_OBU_T_TM_Utils;

/****************************************************************
 ** Array09_TM 
 ****************************************************************/
extern int Array09_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array09_TM_string(const char *str, char **endptr);
extern int string_to_Array09_TM(const char *str, void *pValue, char **endptr);
extern int is_Array09_TM_allow_double_conversion();
extern int Array09_TM_to_double(const void *pValue, double *nValue);
extern int get_Array09_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array09_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array09_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array09_TM_Utils;

/****************************************************************
 ** P042_trackside_int_T_TM 
 ****************************************************************/
extern int P042_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P042_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P042_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P042_trackside_int_T_TM_allow_double_conversion();
extern int P042_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P042_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P042_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P042_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P042_trackside_int_T_TM_Utils;

/****************************************************************
 ** nid_packet_meta_TM 
 ****************************************************************/
extern int nid_packet_meta_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nid_packet_meta_TM_string(const char *str, char **endptr);
extern int string_to_nid_packet_meta_TM(const char *str, void *pValue, char **endptr);
extern int is_nid_packet_meta_TM_allow_double_conversion();
extern int nid_packet_meta_TM_to_double(const void *pValue, double *nValue);
extern int get_nid_packet_meta_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nid_packet_meta_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nid_packet_meta_TM_default_value(void *pValue);
extern SimTypeUtils _Type_nid_packet_meta_TM_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_TM 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrackTrain_Header_T_TM_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_TM(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_TM_allow_double_conversion();
extern int Radio_TrackTrain_Header_T_TM_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrackTrain_Header_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrackTrain_Header_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrackTrain_Header_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_TM_Utils;

/****************************************************************
 ** CompressedRadioMessage_TM 
 ****************************************************************/
extern int CompressedRadioMessage_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedRadioMessage_TM_string(const char *str, char **endptr);
extern int string_to_CompressedRadioMessage_TM(const char *str, void *pValue, char **endptr);
extern int is_CompressedRadioMessage_TM_allow_double_conversion();
extern int CompressedRadioMessage_TM_to_double(const void *pValue, double *nValue);
extern int get_CompressedRadioMessage_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedRadioMessage_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedRadioMessage_TM_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedRadioMessage_TM_Utils;

/****************************************************************
 ** P057_trackside_int_T_TM 
 ****************************************************************/
extern int P057_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P057_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P057_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P057_trackside_int_T_TM_allow_double_conversion();
extern int P057_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P057_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P057_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P057_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P057_trackside_int_T_TM_Utils;

/****************************************************************
 ** P058_trackside_int_T_TM 
 ****************************************************************/
extern int P058_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_trackside_int_T_TM_allow_double_conversion();
extern int P058_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_trackside_int_T_TM_Utils;

/****************************************************************
 ** P058_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P058_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P058_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P058_section_int_T_TM 
 ****************************************************************/
extern int P058_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_int_T_TM_allow_double_conversion();
extern int P058_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_section_int_T_TM_Utils;

/****************************************************************
 ** P021_trackside_int_T_TM 
 ****************************************************************/
extern int P021_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_trackside_int_T_TM_allow_double_conversion();
extern int P021_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_trackside_int_T_TM_Utils;

/****************************************************************
 ** P021_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P021_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P021_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P021_section_int_T_TM 
 ****************************************************************/
extern int P021_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_int_T_TM_allow_double_conversion();
extern int P021_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_section_int_T_TM_Utils;

/****************************************************************
 ** P005_trackside_int_T_TM 
 ****************************************************************/
extern int P005_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_trackside_int_T_TM_allow_double_conversion();
extern int P005_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_trackside_int_T_TM_Utils;

/****************************************************************
 ** P005_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P005_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P005_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P005_section_int_T_TM 
 ****************************************************************/
extern int P005_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_int_T_TM_allow_double_conversion();
extern int P005_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_section_int_T_TM_Utils;

/****************************************************************
 ** P015_trackside_int_T_TM 
 ****************************************************************/
extern int P015_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_trackside_int_T_TM_allow_double_conversion();
extern int P015_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_trackside_int_T_TM_Utils;

/****************************************************************
 ** P015_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P015_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P015_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P015_section_int_T_TM 
 ****************************************************************/
extern int P015_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_int_T_TM_allow_double_conversion();
extern int P015_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_section_int_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P005_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P005_section_array_T_TM 
 ****************************************************************/
extern int P005_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_array_T_TM_allow_double_conversion();
extern int P005_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_section_array_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P005_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P015_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P015_section_array_T_TM 
 ****************************************************************/
extern int P015_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_array_T_TM_allow_double_conversion();
extern int P015_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_section_array_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P015_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P021_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P021_section_array_T_TM 
 ****************************************************************/
extern int P021_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_array_T_TM_allow_double_conversion();
extern int P021_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_section_array_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P021_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P058_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P058_section_array_T_TM 
 ****************************************************************/
extern int P058_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_array_T_TM_allow_double_conversion();
extern int P058_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_section_array_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P058_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** CompressedBaliseMessage_TM 
 ****************************************************************/
extern int CompressedBaliseMessage_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedBaliseMessage_TM_string(const char *str, char **endptr);
extern int string_to_CompressedBaliseMessage_TM(const char *str, void *pValue, char **endptr);
extern int is_CompressedBaliseMessage_TM_allow_double_conversion();
extern int CompressedBaliseMessage_TM_to_double(const void *pValue, double *nValue);
extern int get_CompressedBaliseMessage_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedBaliseMessage_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedBaliseMessage_TM_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedBaliseMessage_TM_Utils;

/****************************************************************
 ** BaliseTelegramHeader_int_T_TM 
 ****************************************************************/
extern int BaliseTelegramHeader_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BaliseTelegramHeader_int_T_TM_string(const char *str, char **endptr);
extern int string_to_BaliseTelegramHeader_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_BaliseTelegramHeader_int_T_TM_allow_double_conversion();
extern int BaliseTelegramHeader_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_BaliseTelegramHeader_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BaliseTelegramHeader_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BaliseTelegramHeader_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_BaliseTelegramHeader_int_T_TM_Utils;

/****************************************************************
 ** OrBG_TM 
 ****************************************************************/
extern int OrBG_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OrBG_TM_string(const char *str, char **endptr);
extern int string_to_OrBG_TM(const char *str, void *pValue, char **endptr);
extern int is_OrBG_TM_allow_double_conversion();
extern int OrBG_TM_to_double(const void *pValue, double *nValue);
extern int get_OrBG_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OrBG_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OrBG_TM_default_value(void *pValue);
extern SimTypeUtils _Type_OrBG_TM_Utils;

/****************************************************************
 ** OrLine_TM 
 ****************************************************************/
extern int OrLine_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OrLine_TM_string(const char *str, char **endptr);
extern int string_to_OrLine_TM(const char *str, void *pValue, char **endptr);
extern int is_OrLine_TM_allow_double_conversion();
extern int OrLine_TM_to_double(const void *pValue, double *nValue);
extern int get_OrLine_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OrLine_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OrLine_TM_default_value(void *pValue);
extern SimTypeUtils _Type_OrLine_TM_Utils;

/****************************************************************
 ** P255_trackside_int_T_TM 
 ****************************************************************/
extern int P255_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P255_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P255_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P255_trackside_int_T_TM_allow_double_conversion();
extern int P255_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P255_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P255_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P255_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P255_trackside_int_T_TM_Utils;

/****************************************************************
 ** BaliseGroupData_TM 
 ****************************************************************/
extern int BaliseGroupData_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BaliseGroupData_TM_string(const char *str, char **endptr);
extern int string_to_BaliseGroupData_TM(const char *str, void *pValue, char **endptr);
extern int is_BaliseGroupData_TM_allow_double_conversion();
extern int BaliseGroupData_TM_to_double(const void *pValue, double *nValue);
extern int get_BaliseGroupData_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BaliseGroupData_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BaliseGroupData_TM_default_value(void *pValue);
extern SimTypeUtils _Type_BaliseGroupData_TM_Utils;

/****************************************************************
 ** P041_trackside_int_T_TM 
 ****************************************************************/
extern int P041_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_trackside_int_T_TM_allow_double_conversion();
extern int P041_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_trackside_int_T_TM_Utils;

/****************************************************************
 ** P041_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P041_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P041_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P041_section_int_T_TM 
 ****************************************************************/
extern int P041_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_int_T_TM_allow_double_conversion();
extern int P041_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_section_int_T_TM_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P041_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P041_section_array_T_TM 
 ****************************************************************/
extern int P041_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_array_T_TM_allow_double_conversion();
extern int P041_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_section_array_T_TM_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P041_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P045_trackside_int_T_TM 
 ****************************************************************/
extern int P045_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P045_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P045_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P045_trackside_int_T_TM_allow_double_conversion();
extern int P045_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P045_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P045_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P045_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P045_trackside_int_T_TM_Utils;

/****************************************************************
 ** P046_trackside_int_T_TM 
 ****************************************************************/
extern int P046_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_trackside_int_T_TM_allow_double_conversion();
extern int P046_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_trackside_int_T_TM_Utils;

/****************************************************************
 ** P046_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P046_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P046_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P046_section_int_T_TM 
 ****************************************************************/
extern int P046_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_int_T_TM_allow_double_conversion();
extern int P046_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_section_int_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P046_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P046_section_array_T_TM 
 ****************************************************************/
extern int P046_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_array_T_TM_allow_double_conversion();
extern int P046_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_section_array_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P046_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P137_trackside_int_T_TM 
 ****************************************************************/
extern int P137_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P137_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P137_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P137_trackside_int_T_TM_allow_double_conversion();
extern int P137_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P137_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P137_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P137_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P137_trackside_int_T_TM_Utils;

/****************************************************************
 ** P065_trackside_int_T_TM 
 ****************************************************************/
extern int P065_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P065_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P065_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P065_trackside_int_T_TM_allow_double_conversion();
extern int P065_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P065_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P065_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P065_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P065_trackside_int_T_TM_Utils;

/****************************************************************
 ** MetadataTruthtable_T1_CheckEuroradioMessage 
 ****************************************************************/
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MetadataTruthtable_T1_CheckEuroradioMessage_string(const char *str, char **endptr);
extern int string_to_MetadataTruthtable_T1_CheckEuroradioMessage(const char *str, void *pValue, char **endptr);
extern int is_MetadataTruthtable_T1_CheckEuroradioMessage_allow_double_conversion();
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_double(const void *pValue, double *nValue);
extern int get_MetadataTruthtable_T1_CheckEuroradioMessage_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MetadataTruthtable_T1_CheckEuroradioMessage(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MetadataTruthtable_T1_CheckEuroradioMessage_default_value(void *pValue);
extern SimTypeUtils _Type_MetadataTruthtable_T1_CheckEuroradioMessage_Utils;

/****************************************************************
 ** M_TrainTrackMessage_buffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrackMessage_buffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessage_buffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessage_buffer_t_TM_lib_internal_allow_double_conversion();
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrackMessage_buffer_t_TM_lib_internal_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrackMessage_buffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrackMessage_buffer_t_TM_lib_internal_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrackMessage_buffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** M_TrainTrackRadioOutputBuffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_allow_double_conversion();
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** TransitionBuffer_T_InformationFilter_Pkg 
 ****************************************************************/
extern int TransitionBuffer_T_InformationFilter_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TransitionBuffer_T_InformationFilter_Pkg_string(const char *str, char **endptr);
extern int string_to_TransitionBuffer_T_InformationFilter_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TransitionBuffer_T_InformationFilter_Pkg_allow_double_conversion();
extern int TransitionBuffer_T_InformationFilter_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TransitionBuffer_T_InformationFilter_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TransitionBuffer_T_InformationFilter_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TransitionBuffer_T_InformationFilter_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TransitionBuffer_T_InformationFilter_Pkg_Utils;

/****************************************************************
 ** LevelDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LevelDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableActionKind_DataDictionary_Pkg_allow_double_conversion();
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LevelDecisionTableActionKind_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LevelDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LevelDecisionTableActionKind_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LevelDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** LevelDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LevelDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableType_DataDictionary_Pkg_allow_double_conversion();
extern int LevelDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LevelDecisionTableType_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LevelDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LevelDecisionTableType_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LevelDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ModeDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableType_DataDictionary_Pkg_allow_double_conversion();
extern int ModeDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ModeDecisionTableType_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ModeDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ModeDecisionTableType_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ModeDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ModeDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableActionKind_DataDictionary_Pkg_allow_double_conversion();
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ModeDecisionTableActionKind_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ModeDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ModeDecisionTableActionKind_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ModeDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** dataCollectionForLevelTransition_T_xdebugSupport_Pkg 
 ****************************************************************/
extern int dataCollectionForLevelTransition_T_xdebugSupport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_string(const char *str, char **endptr);
extern int string_to_dataCollectionForLevelTransition_T_xdebugSupport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_allow_double_conversion();
extern int dataCollectionForLevelTransition_T_xdebugSupport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_dataCollectionForLevelTransition_T_xdebugSupport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_Utils;

/****************************************************************
 ** probesBalises_T_xdebugSupport_Pkg 
 ****************************************************************/
extern int probesBalises_T_xdebugSupport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_probesBalises_T_xdebugSupport_Pkg_string(const char *str, char **endptr);
extern int string_to_probesBalises_T_xdebugSupport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_probesBalises_T_xdebugSupport_Pkg_allow_double_conversion();
extern int probesBalises_T_xdebugSupport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_probesBalises_T_xdebugSupport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_probesBalises_T_xdebugSupport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_probesBalises_T_xdebugSupport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_probesBalises_T_xdebugSupport_Pkg_Utils;

/****************************************************************
 ** P027V1_OBU_body_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_body_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_body_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_body_enum_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_body_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_body_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_body_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_body_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_enum_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_enum_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_sections_array_flat_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_sections_array_flat_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_sections_array_flat_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_sections_array_flat_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_sections_array_flat_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_sections_array_flat_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_sections_array_flat_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_sections_array_flat_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_T_TM_baseline2_allow_double_conversion();
extern int P003V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_OBU_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_OBU_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P003V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_sectionlist_int_T_TM_baseline2_allow_double_conversion();
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_OBU_sectionlist_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_OBU_sectionlist_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003_permanent_data_T_TM_baseline2 
 ****************************************************************/
extern int P003_permanent_data_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_permanent_data_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003_permanent_data_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003_permanent_data_T_TM_baseline2_allow_double_conversion();
extern int P003_permanent_data_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003_permanent_data_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_permanent_data_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_permanent_data_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003_permanent_data_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_n_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_n_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_n_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_n_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_n_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_m_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_m_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_m_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_m_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_l_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_l_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_l_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_l_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_l_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_trackside_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_int_T_TM_baseline2_allow_double_conversion();
extern int P027V1_trackside_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_trackside_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_trackside_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_trackside_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_trackside_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_qdifflist_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_trackside_qdifflist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_qdifflist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_qdifflist_T_TM_baseline2_allow_double_conversion();
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_trackside_qdifflist_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_trackside_qdifflist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_trackside_qdifflist_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_trackside_qdifflist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_int_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_int_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_int_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_int_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_int_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_int_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_int_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_int_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_sectionlist_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_trackside_sectionlist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_sectionlist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_sectionlist_T_TM_baseline2_allow_double_conversion();
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_trackside_sectionlist_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_trackside_sectionlist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_trackside_sectionlist_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_trackside_sectionlist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_int_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_trackside_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_trackside_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_trackside_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_trackside_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_trackside_int_T_TM_baseline2_allow_double_conversion();
extern int P003V1_trackside_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_trackside_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_trackside_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_trackside_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_trackside_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_trackide_sectionlist_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_trackide_sectionlist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_trackide_sectionlist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_trackide_sectionlist_T_TM_baseline2_allow_double_conversion();
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_trackide_sectionlist_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_trackide_sectionlist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_trackide_sectionlist_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_trackide_sectionlist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_int_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_array_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_array_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_array_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_array_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_array_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_array_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_array_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_array_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** connection_ids_T_Handover_Pkg 
 ****************************************************************/
extern int connection_ids_T_Handover_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_connection_ids_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_connection_ids_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connection_ids_T_Handover_Pkg_allow_double_conversion();
extern int connection_ids_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int get_connection_ids_T_Handover_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_connection_ids_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_connection_ids_T_Handover_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_connection_ids_T_Handover_Pkg_Utils;

/****************************************************************
 ** abilityToHandleCommunicationSessions_Handover_Pkg 
 ****************************************************************/
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_abilityToHandleCommunicationSessions_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_abilityToHandleCommunicationSessions_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_abilityToHandleCommunicationSessions_Handover_Pkg_allow_double_conversion();
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int get_abilityToHandleCommunicationSessions_Handover_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_abilityToHandleCommunicationSessions_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_abilityToHandleCommunicationSessions_Handover_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_abilityToHandleCommunicationSessions_Handover_Pkg_Utils;

/****************************************************************
 ** p131_q_rbcTransitionOrder_T_Handover_Pkg 
 ****************************************************************/
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_p131_q_rbcTransitionOrder_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_p131_q_rbcTransitionOrder_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p131_q_rbcTransitionOrder_T_Handover_Pkg_allow_double_conversion();
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int get_p131_q_rbcTransitionOrder_T_Handover_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_p131_q_rbcTransitionOrder_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_p131_q_rbcTransitionOrder_T_Handover_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_p131_q_rbcTransitionOrder_T_Handover_Pkg_Utils;

/****************************************************************
 ** ErrorMessage_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ErrorMessage_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ErrorMessage_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ErrorMessage_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ErrorMessage_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ErrorMessage_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ErrorMessage_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ErrorMessage_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ReportedBG_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ReportedBG_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBG_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBG_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ReportedBG_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ReportedBG_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ReportedBG_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ReportedBG_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ReportedBGList_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ReportedBGList_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBGList_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBGList_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ReportedBGList_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ReportedBGList_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ReportedBGList_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ReportedBGList_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** SystemTime_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int SystemTime_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SystemTime_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_SystemTime_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SystemTime_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int SystemTime_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SystemTime_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SystemTime_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SystemTime_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SystemTime_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ModeLevel2PositionReport_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** LocationBasedEvents_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LocationBasedEvents_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_LocationBasedEvents_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocationBasedEvents_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LocationBasedEvents_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LocationBasedEvents_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LocationBasedEvents_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LocationBasedEvents_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** RBC_Communication_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RBC_Communication_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Communication_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Communication_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RBC_Communication_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RBC_Communication_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RBC_Communication_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RBC_Communication_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** BG_Orientation_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_Orientation_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Orientation_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Orientation_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_Orientation_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_Orientation_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_Orientation_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_Orientation_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** Position_Report_TrainToTrack 
 ****************************************************************/
extern int Position_Report_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Position_Report_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_TrainToTrack_allow_double_conversion();
extern int Position_Report_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Position_Report_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Position_Report_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Position_Report_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Position_Report_TrainToTrack_Utils;

/****************************************************************
 ** Position_Report_based_on_two_balise_groups_TrainToTrack 
 ****************************************************************/
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Position_Report_based_on_two_balise_groups_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_based_on_two_balise_groups_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_based_on_two_balise_groups_TrainToTrack_allow_double_conversion();
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Position_Report_based_on_two_balise_groups_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Position_Report_based_on_two_balise_groups_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Position_Report_based_on_two_balise_groups_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Position_Report_based_on_two_balise_groups_TrainToTrack_Utils;

/****************************************************************
 ** M_TrainTrackMessageBus_t_TM_TrainTrack_Bus 
 ****************************************************************/
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_allow_double_conversion();
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_Utils;

/****************************************************************
 ** P004_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P004_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TM_TrainToTrack_allow_double_conversion();
extern int P004_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P004_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P004_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P004_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P004_TM_TrainToTrack_Utils;

/****************************************************************
 ** P004_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P004_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P004_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P004_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P004_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P004_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P004_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TM_TrainToTrack_allow_double_conversion();
extern int P005_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P005_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P005_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P005_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P005_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P005_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P044_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P044_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P044_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P044_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P044_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P044_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P044_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TM_TrainToTrack_allow_double_conversion();
extern int P044_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P044_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P044_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P044_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P044_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_other_data_TM_TrainToTrack 
 ****************************************************************/
extern int P044_other_data_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P044_other_data_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_other_data_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_other_data_TM_TrainToTrack_allow_double_conversion();
extern int P044_other_data_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P044_other_data_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P044_other_data_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P044_other_data_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P044_other_data_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P001_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TM_TrainToTrack_allow_double_conversion();
extern int P001_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P001_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P001_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P001_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P001_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P001_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P001_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P001_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P001_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P001_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P001_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P000_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P000_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TM_TrainToTrack_allow_double_conversion();
extern int P000_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P000_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P000_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P000_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P000_TM_TrainToTrack_Utils;

/****************************************************************
 ** P000_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P000_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P000_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P000_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P000_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P000_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P000_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TM_TrainToTrack_allow_double_conversion();
extern int P011_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_list_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_list_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_list_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_list_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_ntc_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_TM_TrainToTrack_allow_double_conversion();
extern int P011_ntc_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_ntc_list_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_ntc_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_ntc_list_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_ntc_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sections_array_flat_t_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_sections_array_flat_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sections_array_flat_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sections_array_flat_t_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_sections_array_flat_t_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_sections_array_flat_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_sections_array_flat_t_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_sections_array_flat_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sectionlist_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_sectionlist_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sectionlist_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sectionlist_array_T_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_sectionlist_array_T_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_sectionlist_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_sectionlist_array_T_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_sectionlist_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_section_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_section_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_section_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_section_array_T_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_section_array_T_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_section_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_section_array_T_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_section_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_ntc_list_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_array_T_TM_TrainToTrack_allow_double_conversion();
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_ntc_list_array_T_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_ntc_list_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_ntc_list_array_T_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_ntc_list_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P011_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P009_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TM_TrainToTrack_allow_double_conversion();
extern int P009_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P009_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P009_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P009_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P009_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P009_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P009_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P009_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P009_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P009_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P009_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TM_TrainToTrack_allow_double_conversion();
extern int P003_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_nid_radio_list_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_t_TM_TrainToTrack_allow_double_conversion();
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_nid_radio_list_t_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_nid_radio_list_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_nid_radio_list_t_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_nid_radio_list_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_int_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_nid_radio_list_int_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_int_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_int_t_TM_TrainToTrack_allow_double_conversion();
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_nid_radio_list_int_t_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_nid_radio_list_int_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_nid_radio_list_int_t_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_nid_radio_list_int_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P003_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** Array11_TM_TrainToTrack 
 ****************************************************************/
extern int Array11_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array11_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Array11_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Array11_TM_TrainToTrack_allow_double_conversion();
extern int Array11_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Array11_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array11_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array11_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Array11_TM_TrainToTrack_Utils;

/****************************************************************
 ** Array03_TM_TrainToTrack 
 ****************************************************************/
extern int Array03_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array03_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Array03_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_TrainToTrack_allow_double_conversion();
extern int Array03_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Array03_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array03_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array03_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Array03_TM_TrainToTrack_Utils;

/****************************************************************
 ** trainDataStatus_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainDataStatus_T_trainData_Types_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainDataStatus_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainDataStatus_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainDataStatus_T_trainData_Types_pkg_allow_double_conversion();
extern int trainDataStatus_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int get_trainDataStatus_T_trainData_Types_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainDataStatus_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainDataStatus_T_trainData_Types_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainDataStatus_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainData_Trigger_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Trigger_T_trainData_Types_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_Trigger_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Trigger_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Trigger_T_trainData_Types_pkg_allow_double_conversion();
extern int trainData_Trigger_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_Trigger_T_trainData_Types_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_Trigger_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_Trigger_T_trainData_Types_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_Trigger_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainData_Events_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Events_T_trainData_Types_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_Events_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Events_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Events_T_trainData_Types_pkg_allow_double_conversion();
extern int trainData_Events_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_Events_T_trainData_Types_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_Events_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_Events_T_trainData_Types_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_Events_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg 
 ****************************************************************/
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_string(const char *str, char **endptr);
extern int string_to_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_allow_double_conversion();
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_Utils;

/****************************************************************
 ** AccuDistanceProfileMA_TA_MA 
 ****************************************************************/
extern int AccuDistanceProfileMA_TA_MA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_AccuDistanceProfileMA_TA_MA_string(const char *str, char **endptr);
extern int string_to_AccuDistanceProfileMA_TA_MA(const char *str, void *pValue, char **endptr);
extern int is_AccuDistanceProfileMA_TA_MA_allow_double_conversion();
extern int AccuDistanceProfileMA_TA_MA_to_double(const void *pValue, double *nValue);
extern int get_AccuDistanceProfileMA_TA_MA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_AccuDistanceProfileMA_TA_MA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_AccuDistanceProfileMA_TA_MA_default_value(void *pValue);
extern SimTypeUtils _Type_AccuDistanceProfileMA_TA_MA_Utils;

/****************************************************************
 ** ActionType_TA_MA 
 ****************************************************************/
extern int ActionType_TA_MA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ActionType_TA_MA_string(const char *str, char **endptr);
extern int string_to_ActionType_TA_MA(const char *str, void *pValue, char **endptr);
extern int is_ActionType_TA_MA_allow_double_conversion();
extern int ActionType_TA_MA_to_double(const void *pValue, double *nValue);
extern int get_ActionType_TA_MA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ActionType_TA_MA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ActionType_TA_MA_default_value(void *pValue);
extern SimTypeUtils _Type_ActionType_TA_MA_Utils;

/****************************************************************
 ** SSP_matrix_t_TA_MRSP 
 ****************************************************************/
extern int SSP_matrix_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_matrix_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_matrix_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_matrix_t_TA_MRSP_allow_double_conversion();
extern int SSP_matrix_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_matrix_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_matrix_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_matrix_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_matrix_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_section_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_section_t_TA_MRSP_allow_double_conversion();
extern int SSP_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_section_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_section_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_t_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_t_section_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_t_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_t_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_t_section_t_TA_MRSP_allow_double_conversion();
extern int SSP_t_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_t_section_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_t_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_t_section_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_t_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_s_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_s_section_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_s_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_s_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_s_section_t_TA_MRSP_allow_double_conversion();
extern int SSP_s_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_s_section_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_s_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_s_section_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_s_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_cat_t_TA_MRSP 
 ****************************************************************/
extern int SSP_cat_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_cat_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_cat_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_cat_t_TA_MRSP_allow_double_conversion();
extern int SSP_cat_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_cat_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_cat_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_cat_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_cat_t_TA_MRSP_Utils;

/****************************************************************
 ** MRSP_reduction_acc_TA_Export 
 ****************************************************************/
extern int MRSP_reduction_acc_TA_Export_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_reduction_acc_TA_Export_string(const char *str, char **endptr);
extern int string_to_MRSP_reduction_acc_TA_Export(const char *str, void *pValue, char **endptr);
extern int is_MRSP_reduction_acc_TA_Export_allow_double_conversion();
extern int MRSP_reduction_acc_TA_Export_to_double(const void *pValue, double *nValue);
extern int get_MRSP_reduction_acc_TA_Export_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_reduction_acc_TA_Export(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_reduction_acc_TA_Export_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_reduction_acc_TA_Export_Utils;

/****************************************************************
 ** NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_allow_double_conversion();
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_allow_double_conversion();
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_allow_double_conversion();
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_TM_transitional_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Message_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_TM_transitional_allow_double_conversion();
extern int Radio_TrainTrack_Message_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Message_T_TM_transitional_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Message_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Message_T_TM_transitional_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_TM_transitional_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_TM_transitional_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_TM_transitional_allow_double_conversion();
extern int Radio_TrainTrack_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Header_T_TM_transitional_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Header_T_TM_transitional_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_TM_transitional_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_TM_transitional_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrackTrain_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_TM_transitional_allow_double_conversion();
extern int Radio_TrackTrain_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrackTrain_Header_T_TM_transitional_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrackTrain_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrackTrain_Header_T_TM_transitional_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_TM_transitional_Utils;

/****************************************************************
 ** Driver2MAR_T_TA_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_TA_MA_Request_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Driver2MAR_T_TA_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_TA_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_TA_MA_Request_allow_double_conversion();
extern int Driver2MAR_T_TA_MA_Request_to_double(const void *pValue, double *nValue);
extern int get_Driver2MAR_T_TA_MA_Request_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Driver2MAR_T_TA_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Driver2MAR_T_TA_MA_Request_default_value(void *pValue);
extern SimTypeUtils _Type_Driver2MAR_T_TA_MA_Request_Utils;

/****************************************************************
 ** positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg 
 ****************************************************************/
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_string(const char *str, char **endptr);
extern int string_to_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_allow_double_conversion();
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_double(const void *pValue, double *nValue);
extern int get_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_Utils;

/****************************************************************
 ** BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_allow_double_conversion();
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_allow_double_conversion();
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_allow_double_conversion();
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int get_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_allow_double_conversion();
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int get_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_allow_double_conversion();
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int get_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** radioNetWorkIDs_T_MoRC_Pck 
 ****************************************************************/
extern int radioNetWorkIDs_T_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_radioNetWorkIDs_T_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_radioNetWorkIDs_T_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_radioNetWorkIDs_T_MoRC_Pck_allow_double_conversion();
extern int radioNetWorkIDs_T_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_radioNetWorkIDs_T_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_radioNetWorkIDs_T_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_radioNetWorkIDs_T_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_radioNetWorkIDs_T_MoRC_Pck_Utils;

/****************************************************************
 ** time_Type_MoRC_Pck 
 ****************************************************************/
extern int time_Type_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_time_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_time_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_time_Type_MoRC_Pck_allow_double_conversion();
extern int time_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_time_Type_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_time_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_time_Type_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_time_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileHWConnectionStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileHWConnectionStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWConnectionStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWConnectionStatus_Type_MoRC_Pck_allow_double_conversion();
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_mobileHWConnectionStatus_Type_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileHWConnectionStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileHWConnectionStatus_Type_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_mobileHWConnectionStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileHWStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWStatus_Type_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileHWStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWStatus_Type_MoRC_Pck_allow_double_conversion();
extern int mobileHWStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_mobileHWStatus_Type_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileHWStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileHWStatus_Type_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_mobileHWStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** p42_sessionManagement_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_p42_sessionManagement_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p42_sessionManagement_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p42_sessionManagement_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_p42_sessionManagement_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_p42_sessionManagement_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_p42_sessionManagement_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_p42_sessionManagement_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgFromTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_msgFromTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgFromTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgFromTrack_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_msgFromTrack_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_msgFromTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_msgFromTrack_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_msgFromTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgToTrackTriggers_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgToTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_msgToTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrack_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_msgToTrack_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_msgToTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_msgToTrack_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_msgToTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** odometryFactors_T_Toolbox 
 ****************************************************************/
extern int odometryFactors_T_Toolbox_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odometryFactors_T_Toolbox_string(const char *str, char **endptr);
extern int string_to_odometryFactors_T_Toolbox(const char *str, void *pValue, char **endptr);
extern int is_odometryFactors_T_Toolbox_allow_double_conversion();
extern int odometryFactors_T_Toolbox_to_double(const void *pValue, double *nValue);
extern int get_odometryFactors_T_Toolbox_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odometryFactors_T_Toolbox(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odometryFactors_T_Toolbox_default_value(void *pValue);
extern SimTypeUtils _Type_odometryFactors_T_Toolbox_Utils;

/****************************************************************
 ** OdometrySpeed_T_Toolbox 
 ****************************************************************/
extern int OdometrySpeed_T_Toolbox_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OdometrySpeed_T_Toolbox_string(const char *str, char **endptr);
extern int string_to_OdometrySpeed_T_Toolbox(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeed_T_Toolbox_allow_double_conversion();
extern int OdometrySpeed_T_Toolbox_to_double(const void *pValue, double *nValue);
extern int get_OdometrySpeed_T_Toolbox_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OdometrySpeed_T_Toolbox(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OdometrySpeed_T_Toolbox_default_value(void *pValue);
extern SimTypeUtils _Type_OdometrySpeed_T_Toolbox_Utils;

/****************************************************************
 ** RBC_Data_T_RBC_DataBus_Pkg 
 ****************************************************************/
extern int RBC_Data_T_RBC_DataBus_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RBC_Data_T_RBC_DataBus_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Data_T_RBC_DataBus_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Data_T_RBC_DataBus_Pkg_allow_double_conversion();
extern int RBC_Data_T_RBC_DataBus_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RBC_Data_T_RBC_DataBus_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RBC_Data_T_RBC_DataBus_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RBC_Data_T_RBC_DataBus_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RBC_Data_T_RBC_DataBus_Pkg_Utils;

/****************************************************************
 ** DiagMsg_T_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsg_T_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsg_T_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsg_T_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsg_T_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsg_T_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsg_T_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsg_T_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgType_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsgType_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgType_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgType_E_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsgType_E_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsgType_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsgType_E_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsgType_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgSrc_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsgSrc_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgSrc_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgSrc_E_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsgSrc_E_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsgSrc_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsgSrc_E_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsgSrc_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgText_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsgText_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgText_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgText_E_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsgText_E_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsgText_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsgText_E_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsgText_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** TrackType_US_Integration_November 
 ****************************************************************/
extern int TrackType_US_Integration_November_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrackType_US_Integration_November_string(const char *str, char **endptr);
extern int string_to_TrackType_US_Integration_November(const char *str, void *pValue, char **endptr);
extern int is_TrackType_US_Integration_November_allow_double_conversion();
extern int TrackType_US_Integration_November_to_double(const void *pValue, double *nValue);
extern int get_TrackType_US_Integration_November_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrackType_US_Integration_November(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrackType_US_Integration_November_default_value(void *pValue);
extern SimTypeUtils _Type_TrackType_US_Integration_November_Utils;

/****************************************************************
 ** R_data_internal_T_InfraLib 
 ****************************************************************/
extern int R_data_internal_T_InfraLib_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_R_data_internal_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_R_data_internal_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_R_data_internal_T_InfraLib_allow_double_conversion();
extern int R_data_internal_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int get_R_data_internal_T_InfraLib_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_R_data_internal_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_R_data_internal_T_InfraLib_default_value(void *pValue);
extern SimTypeUtils _Type_R_data_internal_T_InfraLib_Utils;

/****************************************************************
 ** B_data_internal_T_InfraLib 
 ****************************************************************/
extern int B_data_internal_T_InfraLib_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_B_data_internal_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_B_data_internal_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_B_data_internal_T_InfraLib_allow_double_conversion();
extern int B_data_internal_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int get_B_data_internal_T_InfraLib_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_B_data_internal_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_B_data_internal_T_InfraLib_default_value(void *pValue);
extern SimTypeUtils _Type_B_data_internal_T_InfraLib_Utils;

/****************************************************************
 ** TrackSectionData_T_InfraLib 
 ****************************************************************/
extern int TrackSectionData_T_InfraLib_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrackSectionData_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_TrackSectionData_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_TrackSectionData_T_InfraLib_allow_double_conversion();
extern int TrackSectionData_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int get_TrackSectionData_T_InfraLib_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrackSectionData_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrackSectionData_T_InfraLib_default_value(void *pValue);
extern SimTypeUtils _Type_TrackSectionData_T_InfraLib_Utils;

/****************************************************************
 ** TrainPosRaw_T_InfraLib 
 ****************************************************************/
extern int TrainPosRaw_T_InfraLib_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainPosRaw_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_TrainPosRaw_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_TrainPosRaw_T_InfraLib_allow_double_conversion();
extern int TrainPosRaw_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int get_TrainPosRaw_T_InfraLib_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainPosRaw_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainPosRaw_T_InfraLib_default_value(void *pValue);
extern SimTypeUtils _Type_TrainPosRaw_T_InfraLib_Utils;

/****************************************************************
 ** BaliseGroupData_Basics 
 ****************************************************************/
extern int BaliseGroupData_Basics_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BaliseGroupData_Basics_string(const char *str, char **endptr);
extern int string_to_BaliseGroupData_Basics(const char *str, void *pValue, char **endptr);
extern int is_BaliseGroupData_Basics_allow_double_conversion();
extern int BaliseGroupData_Basics_to_double(const void *pValue, double *nValue);
extern int get_BaliseGroupData_Basics_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BaliseGroupData_Basics(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BaliseGroupData_Basics_default_value(void *pValue);
extern SimTypeUtils _Type_BaliseGroupData_Basics_Utils;


#endif /*TESTBENCH_INTEGRATION_TYPES_CONVERSION */
