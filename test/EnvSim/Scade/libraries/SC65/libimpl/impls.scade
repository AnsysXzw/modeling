package impls
   open impl;
   

/*****************************
 * Arithmetic functions      *
 *****************************/

/* Sum Protected */

   function imported #pragma kcg C:name iSumSat_int8_impls #end iSumSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iSumSat ;
   function imported #pragma kcg C:name iSumSat_uint8_impls #end iSumSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iSumSat ;
   function imported #pragma kcg C:name iSumSat_int16_impls #end iSumSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iSumSat ;
   function imported #pragma kcg C:name iSumSat_uint16_impls #end iSumSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iSumSat ;
   function imported #pragma kcg C:name iSumSat_int32_impls #end iSumSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iSumSat ;
   function imported #pragma kcg C:name iSumSat_uint32_impls #end iSumSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iSumSat ;

/* Substraction Protected*/

   function imported #pragma kcg C:name iSubSat_int8_impls #end iSubSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iSubSat ;
   function imported #pragma kcg C:name iSubSat_uint8_impls #end iSubSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iSubSat ;
   function imported #pragma kcg C:name iSubSat_int16_impls #end iSubSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iSubSat ;
   function imported #pragma kcg C:name iSubSat_uint16_impls #end iSubSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iSubSat ;
   function imported #pragma kcg C:name iSubSat_int32_impls #end iSubSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iSubSat ;
   function imported #pragma kcg C:name iSubSat_uint32_impls #end iSubSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iSubSat ;

/* Negation Protected */

   function imported #pragma kcg C:name iNegSat_int8_impls #end iNegSat_int8(In1 : int8) returns (Out1 : int8) specialize iNegSat ;
   function imported #pragma kcg C:name iNegSat_int16_impls #end iNegSat_int16(In1 : int16) returns (Out1 : int16) specialize iNegSat ;
   function imported #pragma kcg C:name iNegSat_int32_impls #end iNegSat_int32(In1 : int32) returns (Out1 : int32) specialize iNegSat ;

/* Product */

/* Mul Protected */

   function imported #pragma kcg C:name iMulSat_int8_impls #end iMulSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iMulSat ;
   function imported #pragma kcg C:name iMulSat_uint8_impls #end iMulSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iMulSat ;
   function imported #pragma kcg C:name iMulSat_int16_impls #end iMulSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iMulSat ;
   function imported #pragma kcg C:name iMulSat_uint16_impls #end iMulSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iMulSat ;
   function imported #pragma kcg C:name iMulSat_int32_impls #end iMulSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iMulSat ;
   function imported #pragma kcg C:name iMulSat_uint32_impls #end iMulSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iMulSat ;

/* Products that avoids cast on the 2 operands to get result on the upper size */
/* Mul16 */
   function imported #pragma kcg C:name iMul16_int8_impls #end iMul16_int8(In1 : int8; In2 : int8) returns (Out1 : int16) specialize iMul16;

/* Mul16U */
   function imported #pragma kcg C:name iMul16U_uint8_impls #end iMul16U_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint16) specialize iMul16U;

/* Mul32 */
   function imported #pragma kcg C:name iMul32_int16_impls #end iMul32_int16(In1 : int16; In2 : int16) returns (Out1 : int32) specialize iMul32;

/* Mul32U */
   function imported #pragma kcg C:name iMul32U_uint16_impls #end iMul32U_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint32) specialize iMul32U;


/* Division (rounding toward zero) protected, with Underflow check (next release) */

   function imported #pragma kcg C:name iDivSat_int8_impls #end iDivSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivSat ;
   function imported #pragma kcg C:name iDivSat_uint8_impls #end iDivSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivSat ;
   function imported #pragma kcg C:name iDivSat_int16_impls #end iDivSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivSat ;
   function imported #pragma kcg C:name iDivSat_uint16_impls #end iDivSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivSat ;
   function imported #pragma kcg C:name iDivSat_int32_impls #end iDivSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivSat ;
   function imported #pragma kcg C:name iDivSat_uint32_impls #end iDivSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivSat ;


/* Division (rounding toward zero), no Underflow check */

   function imported #pragma kcg C:name iDivFix_int8_impls #end iDivFix_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivFix ;
   function imported #pragma kcg C:name iDivFix_uint8_impls #end iDivFix_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivFix ;
   function imported #pragma kcg C:name iDivFix_int16_impls #end iDivFix_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivFix ;
   function imported #pragma kcg C:name iDivFix_uint16_impls #end iDivFix_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivFix ;
   function imported #pragma kcg C:name iDivFix_int32_impls #end iDivFix_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivFix ;
   function imported #pragma kcg C:name iDivFix_uint32_impls #end iDivFix_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivFix ;


/* Division (rounding Ceil), no Underflow check */

   function imported #pragma kcg C:name iDivCeil_int8_impls #end iDivCeil_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivCeil ;
   function imported #pragma kcg C:name iDivCeil_uint8_impls #end iDivCeil_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivCeil ;
   function imported #pragma kcg C:name iDivCeil_int16_impls #end iDivCeil_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivCeil ;
   function imported #pragma kcg C:name iDivCeil_uint16_impls #end iDivCeil_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivCeil ;
   function imported #pragma kcg C:name iDivCeil_int32_impls #end iDivCeil_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivCeil ;
   function imported #pragma kcg C:name iDivCeil_uint32_impls #end iDivCeil_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivCeil ;


/* Division (rounding floor), no Underflow check */

   function imported #pragma kcg C:name iDivFloor_int8_impls #end iDivFloor_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivFloor ;
   function imported #pragma kcg C:name iDivFloor_uint8_impls #end iDivFloor_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivFloor ;
   function imported #pragma kcg C:name iDivFloor_int16_impls #end iDivFloor_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivFloor ;
   function imported #pragma kcg C:name iDivFloor_uint16_impls #end iDivFloor_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivFloor ;
   function imported #pragma kcg C:name iDivFloor_int32_impls #end iDivFloor_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivFloor ;
   function imported #pragma kcg C:name iDivFloor_uint32_impls #end iDivFloor_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivFloor ;

/*****************************
 * Compare functions         *
 *****************************/

/* Less */
   function imported #pragma kcg C:name iLess_int8_int8_impls #end iLess_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int8_int16_impls #end iLess_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int8_int32_impls #end iLess_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint8_uint8_impls #end iLess_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint8_uint16_impls #end iLess_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint8_uint32_impls #end iLess_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int16_int8_impls #end iLess_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int16_int16_impls #end iLess_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int16_int32_impls #end iLess_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint16_uint8_impls #end iLess_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint16_uint16_impls #end iLess_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint16_uint32_impls #end iLess_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int32_int8_impls #end iLess_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int32_int16_impls #end iLess_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_int32_int32_impls #end iLess_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint32_uint8_impls #end iLess_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint32_uint16_impls #end iLess_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg C:name iLess_uint32_uint32_impls #end iLess_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iLess ;

/* Less Equal */
   function imported #pragma kcg C:name iLessEq_int8_int8_impls #end iLessEq_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int8_int16_impls #end iLessEq_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int8_int32_impls #end iLessEq_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint8_uint8_impls #end iLessEq_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint8_uint16_impls #end iLessEq_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint8_uint32_impls #end iLessEq_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int16_int8_impls #end iLessEq_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int16_int16_impls #end iLessEq_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int16_int32_impls #end iLessEq_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint16_uint8_impls #end iLessEq_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint16_uint16_impls #end iLessEq_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint16_uint32_impls #end iLessEq_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int32_int8_impls #end iLessEq_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int32_int16_impls #end iLessEq_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_int32_int32_impls #end iLessEq_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint32_uint8_impls #end iLessEq_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint32_uint16_impls #end iLessEq_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg C:name iLessEq_uint32_uint32_impls #end iLessEq_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iLessEq ;

/* Equal */
   function imported #pragma kcg C:name iEqual_int8_int8_impls #end iEqual_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int8_int16_impls #end iEqual_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int8_int32_impls #end iEqual_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint8_uint8_impls #end iEqual_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint8_uint16_impls #end iEqual_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint8_uint32_impls #end iEqual_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int16_int8_impls #end iEqual_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int16_int16_impls #end iEqual_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int16_int32_impls #end iEqual_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint16_uint8_impls #end iEqual_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint16_uint16_impls #end iEqual_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint16_uint32_impls #end iEqual_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int32_int8_impls #end iEqual_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int32_int16_impls #end iEqual_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_int32_int32_impls #end iEqual_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint32_uint8_impls #end iEqual_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint32_uint16_impls #end iEqual_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg C:name iEqual_uint32_uint32_impls #end iEqual_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iEqual ;

/* Different */
   function imported #pragma kcg C:name iDifferent_int8_int8_impls #end iDifferent_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int8_int16_impls #end iDifferent_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int8_int32_impls #end iDifferent_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint8_uint8_impls #end iDifferent_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint8_uint16_impls #end iDifferent_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint8_uint32_impls #end iDifferent_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int16_int8_impls #end iDifferent_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int16_int16_impls #end iDifferent_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int16_int32_impls #end iDifferent_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint16_uint8_impls #end iDifferent_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint16_uint16_impls #end iDifferent_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint16_uint32_impls #end iDifferent_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int32_int8_impls #end iDifferent_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int32_int16_impls #end iDifferent_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_int32_int32_impls #end iDifferent_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint32_uint8_impls #end iDifferent_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint32_uint16_impls #end iDifferent_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg C:name iDifferent_uint32_uint32_impls #end iDifferent_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iDifferent ;

/* Greater */
   function imported #pragma kcg C:name iGreater_int8_int8_impls #end iGreater_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int8_int16_impls #end iGreater_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int8_int32_impls #end iGreater_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint8_uint8_impls #end iGreater_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint8_uint16_impls #end iGreater_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint8_uint32_impls #end iGreater_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int16_int8_impls #end iGreater_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int16_int16_impls #end iGreater_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int16_int32_impls #end iGreater_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint16_uint8_impls #end iGreater_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint16_uint16_impls #end iGreater_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint16_uint32_impls #end iGreater_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int32_int8_impls #end iGreater_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int32_int16_impls #end iGreater_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_int32_int32_impls #end iGreater_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint32_uint8_impls #end iGreater_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint32_uint16_impls #end iGreater_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg C:name iGreater_uint32_uint32_impls #end iGreater_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iGreater ;

/* Greater Equal */
   function imported #pragma kcg C:name iGreaterEq_int8_int8_impls #end iGreaterEq_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int8_int16_impls #end iGreaterEq_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int8_int32_impls #end iGreaterEq_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint8_uint8_impls #end iGreaterEq_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint8_uint16_impls #end iGreaterEq_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint8_uint32_impls #end iGreaterEq_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int16_int8_impls #end iGreaterEq_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int16_int16_impls #end iGreaterEq_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int16_int32_impls #end iGreaterEq_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint16_uint8_impls #end iGreaterEq_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint16_uint16_impls #end iGreaterEq_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint16_uint32_impls #end iGreaterEq_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int32_int8_impls #end iGreaterEq_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int32_int16_impls #end iGreaterEq_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_int32_int32_impls #end iGreaterEq_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint32_uint8_impls #end iGreaterEq_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint32_uint16_impls #end iGreaterEq_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg C:name iGreaterEq_uint32_uint32_impls #end iGreaterEq_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iGreaterEq ;

end;
